

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Dec 10 18:55:55 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           ; Version 1.41
    76                           ; Generated 25/01/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F46K22 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     
   110                           	psect	idataBANK0
   111  00339A                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _KeyPressed
   115  00339A  0001               	dw	1
   116                           
   117                           	psect	smallconst
   118  001000                     __psmallconst:
   119                           	opt stack 0
   120  001000  00                 	db	0
   121  001001                     _dpowers:
   122                           	opt stack 0
   123  001001  0001               	dw	1
   124  001003  0000               	dw	0
   125  001005  000A               	dw	10
   126  001007  0000               	dw	0
   127  001009  0064               	dw	100
   128  00100B  0000               	dw	0
   129  00100D  03E8               	dw	1000
   130  00100F  0000               	dw	0
   131  001011  2710               	dw	10000
   132  001013  0000               	dw	0
   133  001015  86A0               	dw	34464
   134  001017  0001               	dw	1
   135  001019  4240               	dw	16960
   136  00101B  000F               	dw	15
   137  00101D  9680               	dw	38528
   138  00101F  0098               	dw	152
   139  001021  E100               	dw	57600
   140  001023  05F5               	dw	1525
   141  001025  CA00               	dw	51712
   142  001027  3B9A               	dw	15258
   143  001029                     __end_of_dpowers:
   144                           	opt stack 0
   145  001029                     __powers_:
   146                           	opt stack 0
   147  001029  00                 	db	0
   148  00102A  80                 	db	128
   149  00102B  3F                 	db	63
   150  00102C  00                 	db	0
   151  00102D  20                 	db	32
   152  00102E  41                 	db	65
   153  00102F  00                 	db	0
   154  001030  C8                 	db	200
   155  001031  42                 	db	66
   156  001032  00                 	db	0
   157  001033  7A                 	db	122
   158  001034  44                 	db	68
   159  001035  40                 	db	64
   160  001036  1C                 	db	28
   161  001037  46                 	db	70
   162  001038  50                 	db	80
   163  001039  C3                 	db	195
   164  00103A  47                 	db	71
   165  00103B  24                 	db	36
   166  00103C  74                 	db	116
   167  00103D  49                 	db	73
   168  00103E  97                 	db	151
   169  00103F  18                 	db	24
   170  001040  4B                 	db	75
   171  001041  BC                 	db	188
   172  001042  BE                 	db	190
   173  001043  4C                 	db	76
   174  001044  6B                 	db	107
   175  001045  6E                 	db	110
   176  001046  4E                 	db	78
   177  001047  03                 	db	3
   178  001048  15                 	db	21
   179  001049  50                 	db	80
   180  00104A  79                 	db	121
   181  00104B  AD                 	db	173
   182  00104C  60                 	db	96
   183  00104D  F3                 	db	243
   184  00104E  49                 	db	73
   185  00104F  71                 	db	113
   186  001050                     __end_of__powers_:
   187                           	opt stack 0
   188  001050                     __npowers_:
   189                           	opt stack 0
   190  001050  00                 	db	0
   191  001051  80                 	db	128
   192  001052  3F                 	db	63
   193  001053  CD                 	db	205
   194  001054  CC                 	db	204
   195  001055  3D                 	db	61
   196  001056  D7                 	db	215
   197  001057  23                 	db	35
   198  001058  3C                 	db	60
   199  001059  12                 	db	18
   200  00105A  83                 	db	131
   201  00105B  3A                 	db	58
   202  00105C  B7                 	db	183
   203  00105D  D1                 	db	209
   204  00105E  38                 	db	56
   205  00105F  C6                 	db	198
   206  001060  27                 	db	39
   207  001061  37                 	db	55
   208  001062  38                 	db	56
   209  001063  86                 	db	134
   210  001064  35                 	db	53
   211  001065  C0                 	db	192
   212  001066  D6                 	db	214
   213  001067  33                 	db	51
   214  001068  CC                 	db	204
   215  001069  2B                 	db	43
   216  00106A  32                 	db	50
   217  00106B  70                 	db	112
   218  00106C  89                 	db	137
   219  00106D  30                 	db	48
   220  00106E  E7                 	db	231
   221  00106F  DB                 	db	219
   222  001070  2E                 	db	46
   223  001071  E5                 	db	229
   224  001072  3C                 	db	60
   225  001073  1E                 	db	30
   226  001074  42                 	db	66
   227  001075  A2                 	db	162
   228  001076  0D                 	db	13
   229  001077                     __end_of__npowers_:
   230                           	opt stack 0
   231  001077                     STR_2:
   232  001077  25                 	db	37
   233  001078  66                 	db	102	;'f'
   234  001079  00                 	db	0
   235  00107A  25                 	db	37
   236  00107B  75                 	db	117	;'u'
   237  00107C  00                 	db	0
   238                           
   239                           ; #config settings
   240  00107D  00                 	db	0	; dummy byte at the end
   241  0000                     
   242                           	psect	nvBANK0
   243  0000BC                     __pnvBANK0:
   244                           	opt stack 0
   245  0000BC                     _TMR4_InterruptHandler:
   246                           	opt stack 0
   247  0000BC                     	ds	2
   248  0000BE                     _TMR2_InterruptHandler:
   249                           	opt stack 0
   250  0000BE                     	ds	2
   251  0000                     _CCPTMRS1bits	set	3912
   252  0000                     _CCPR4H	set	3929
   253  0000                     _CCPR4L	set	3928
   254  0000                     _CCP4CON	set	3927
   255  0000                     _T4CONbits	set	3921
   256  0000                     _TMR4	set	3923
   257  0000                     _PR4	set	3922
   258  0000                     _T4CON	set	3921
   259  0000                     _ANSELA	set	3896
   260  0000                     _ANSELE	set	3900
   261  0000                     _ANSELD	set	3899
   262  0000                     _ANSELB	set	3897
   263  0000                     _ANSELC	set	3898
   264  0000                     _PORTB	set	3969
   265  0000                     _PORTBbits	set	3969
   266  0000                     _PORTAbits	set	3968
   267  0000                     _LATAbits	set	3977
   268  0000                     _LATDbits	set	3980
   269  0000                     _LATBbits	set	3978
   270  0000                     _TXREG1	set	4013
   271  0000                     _RCREG1	set	4014
   272  0000                     _RCSTA1bits	set	4011
   273  0000                     _SPBRGH1	set	4016
   274  0000                     _SPBRG1	set	4015
   275  0000                     _TXSTA1	set	4012
   276  0000                     _RCSTA1	set	4011
   277  0000                     _BAUDCON1	set	4024
   278  0000                     _PIE2bits	set	4000
   279  0000                     _RCONbits	set	4048
   280  0000                     _PIE5bits	set	3965
   281  0000                     _PIR5bits	set	3966
   282  0000                     _T2CONbits	set	4026
   283  0000                     _TMR2	set	4028
   284  0000                     _PR2	set	4027
   285  0000                     _T2CON	set	4026
   286  0000                     _PIR2bits	set	4001
   287  0000                     _EEDATA	set	4008
   288  0000                     _EEADR	set	4009
   289  0000                     _EEADRH	set	4010
   290  0000                     _EECON2	set	4007
   291  0000                     _EECON1bits	set	4006
   292  0000                     _INTCONbits	set	4082
   293  0000                     _TABLAT	set	4085
   294  0000                     _TBLPTRL	set	4086
   295  0000                     _TBLPTRH	set	4087
   296  0000                     _TBLPTRU	set	4088
   297  0000                     _SSP1BUF	set	4041
   298  0000                     _SSP1CON2bits	set	4037
   299  0000                     _SSP1CON1bits	set	4038
   300  0000                     _PIE1bits	set	3997
   301  0000                     _PIR1bits	set	3998
   302  0000                     _SSP1ADD	set	4040
   303  0000                     _SSP1CON3	set	4043
   304  0000                     _SSP1CON1	set	4038
   305  0000                     _SSP1STAT	set	4039
   306  0000                     _INTCON2bits	set	4081
   307  0000                     _WPUB	set	3937
   308  0000                     _TRISD	set	3989
   309  0000                     _TRISC	set	3988
   310  0000                     _TRISB	set	3987
   311  0000                     _TRISA	set	3986
   312  0000                     _TRISE	set	3990
   313  0000                     _LATC	set	3979
   314  0000                     _LATB	set	3978
   315  0000                     _LATA	set	3977
   316  0000                     _LATD	set	3980
   317  0000                     _LATE	set	3981
   318  0000                     _OSCTUNE	set	3995
   319  0000                     _OSCCON2	set	4050
   320  0000                     _OSCCON	set	4051
   321                           
   322                           	psect	cinit
   323  003086                     __pcinit:
   324                           	opt stack 0
   325  003086                     start_initialization:
   326                           	opt stack 0
   327  003086                     __initialization:
   328                           	opt stack 0
   329                           
   330                           ; Initialize objects allocated to BANK0 (2 bytes)
   331                           ; load TBLPTR registers with __pidataBANK0
   332  003086  0E9A               	movlw	low __pidataBANK0
   333  003088  6EF6               	movwf	tblptrl,c
   334  00308A  0E33               	movlw	high __pidataBANK0
   335  00308C  6EF7               	movwf	tblptrh,c
   336  00308E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   337  003090  6EF8               	movwf	tblptru,c
   338  003092  0009               	tblrd		*+	;fetch initializer
   339  003094  CFF5 F0C0          	movff	tablat,__pdataBANK0
   340  003098  0009               	tblrd		*+	;fetch initializer
   341  00309A  CFF5 F0C1          	movff	tablat,__pdataBANK0+1
   342                           
   343                           ; Clear objects allocated to BANK0 (20 bytes)
   344  00309E  EE00  F0A8         	lfsr	0,__pbssBANK0
   345  0030A2  0E14               	movlw	20
   346  0030A4                     clear_0:
   347  0030A4  6AEE               	clrf	postinc0,c
   348  0030A6  06E8               	decf	wreg,f,c
   349  0030A8  E1FD               	bnz	clear_0
   350                           
   351                           ; Clear objects allocated to COMRAM (20 bytes)
   352  0030AA  EE00  F037         	lfsr	0,__pbssCOMRAM
   353  0030AE  0E14               	movlw	20
   354  0030B0                     clear_1:
   355  0030B0  6AEE               	clrf	postinc0,c
   356  0030B2  06E8               	decf	wreg,f,c
   357  0030B4  E1FD               	bnz	clear_1
   358  0030B6                     end_of_initialization:
   359                           	opt stack 0
   360  0030B6                     __end_of__initialization:
   361                           	opt stack 0
   362  0030B6  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   363  0030B8  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   364  0030BA  0100               	movlb	0
   365  0030BC  EFD1  F015         	goto	_main	;jump to C main() function
   366                           tblptru	equ	0xFF8
   367                           tblptrh	equ	0xFF7
   368                           tblptrl	equ	0xFF6
   369                           tablat	equ	0xFF5
   370                           postinc0	equ	0xFEE
   371                           wreg	equ	0xFE8
   372                           
   373                           	psect	bssCOMRAM
   374  000037                     __pbssCOMRAM:
   375                           	opt stack 0
   376  000037                     _i2c1_object:
   377                           	opt stack 0
   378  000037                     	ds	7
   379  00003E                     I2C1_ISR@pi2c_buf_ptr:
   380                           	opt stack 0
   381  00003E                     	ds	2
   382  000040                     _p_i2c1_current:
   383                           	opt stack 0
   384  000040                     	ds	2
   385  000042                     _p_i2c1_trb_current:
   386                           	opt stack 0
   387  000042                     	ds	2
   388  000044                     KeyPadScan@Push:
   389                           	opt stack 0
   390  000044                     	ds	1
   391  000045                     I2C1_ISR@i2c_10bit_address_restart:
   392                           	opt stack 0
   393  000045                     	ds	1
   394  000046                     I2C1_ISR@i2c_bytes_left:
   395                           	opt stack 0
   396  000046                     	ds	1
   397  000047                     _i2c1_trb_count:
   398                           	opt stack 0
   399  000047                     	ds	1
   400  000048                     _i2c1_state:
   401                           	opt stack 0
   402  000048                     	ds	1
   403  000049                     I2C1_ISR@i2c_address:
   404                           	opt stack 0
   405  000049                     	ds	2
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	bssBANK0
   414  0000A8                     __pbssBANK0:
   415                           	opt stack 0
   416  0000A8                     _TMR4_Ticked:
   417                           	opt stack 0
   418  0000A8                     	ds	2
   419  0000AA                     I2C1_MasterRead@trBlock:
   420                           	opt stack 0
   421  0000AA                     	ds	6
   422  0000B0                     I2C1_MasterWrite@trBlock:
   423                           	opt stack 0
   424  0000B0                     	ds	6
   425  0000B6                     _i2c1_tr_queue:
   426                           	opt stack 0
   427  0000B6                     	ds	6
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           
   435                           	psect	dataBANK0
   436  0000C0                     __pdataBANK0:
   437                           	opt stack 0
   438  0000C0                     _KeyPressed:
   439                           	opt stack 0
   440  0000C0                     	ds	2
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           
   448                           	psect	cstackBANK0
   449  000060                     __pcstackBANK0:
   450                           	opt stack 0
   451  000060                     ?_fround:
   452                           	opt stack 0
   453  000060                     ?_scale:
   454                           	opt stack 0
   455                           
   456                           ; 3 bytes @ 0x0
   457  000060                     	ds	3
   458  000063                     _fround$2473:
   459                           	opt stack 0
   460  000063                     _scale$2474:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0x3
   464  000063                     	ds	3
   465  000066                     scale@scl:
   466                           	opt stack 0
   467  000066                     _fround$2472:
   468                           	opt stack 0
   469                           
   470                           ; 3 bytes @ 0x6
   471  000066                     	ds	1
   472  000067                     ?___fttol:
   473                           	opt stack 0
   474  000067                     ___fttol@f1:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x7
   478  000067                     	ds	2
   479  000069                     fround@prec:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x9
   483  000069                     	ds	1
   484  00006A                     ?___ftadd:
   485                           	opt stack 0
   486  00006A                     ___ftadd@f1:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0xA
   490  00006A                     	ds	1
   491  00006B                     ??___fttol:
   492                           
   493                           ; 1 bytes @ 0xB
   494  00006B                     	ds	2
   495  00006D                     ___ftadd@f2:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0xD
   499  00006D                     	ds	3
   500  000070                     ??___ftadd:
   501  000070                     ___fttol@sign1:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x10
   505  000070                     	ds	1
   506  000071                     ___fttol@lval:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x11
   510  000071                     	ds	2
   511  000073                     ___ftadd@sign:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x13
   515  000073                     	ds	1
   516  000074                     ___ftadd@exp2:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x14
   520  000074                     	ds	1
   521  000075                     ___ftadd@exp1:
   522                           	opt stack 0
   523  000075                     ___fttol@exp1:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x15
   527  000075                     	ds	1
   528  000076                     ?___ftsub:
   529                           	opt stack 0
   530  000076                     ___ftsub@f1:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x16
   534  000076                     	ds	3
   535  000079                     ___ftsub@f2:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x19
   539  000079                     	ds	3
   540  00007C                     ?_sprintf:
   541                           	opt stack 0
   542  00007C                     sprintf@sp:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x1C
   546  00007C                     	ds	2
   547  00007E                     sprintf@f:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x1E
   551  00007E                     	ds	5
   552  000083                     ??_sprintf:
   553                           
   554                           ; 1 bytes @ 0x23
   555  000083                     	ds	6
   556  000089                     _sprintf$2475:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x29
   560  000089                     	ds	3
   561  00008C                     sprintf@ap:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x2C
   565  00008C                     	ds	2
   566  00008E                     sprintf@flag:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x2E
   570  00008E                     	ds	2
   571  000090                     sprintf@prec:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x30
   575  000090                     	ds	2
   576  000092                     sprintf@val:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x32
   580  000092                     	ds	4
   581  000096                     sprintf@exp:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x36
   585  000096                     	ds	2
   586  000098                     sprintf@tmpval:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x38
   590  000098                     	ds	4
   591  00009C                     sprintf@fval:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x3C
   595  00009C                     	ds	3
   596  00009F                     sprintf@c:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x3F
   600  00009F                     	ds	1
   601  0000A0                     lcd_msg_float@msg:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x40
   605  0000A0                     	ds	3
   606  0000A3                     lcd_msg_float@aux:
   607                           	opt stack 0
   608                           
   609                           ; 5 bytes @ 0x43
   610  0000A3                     	ds	5
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           
   618                           	psect	cstackCOMRAM
   619  000001                     __pcstackCOMRAM:
   620                           	opt stack 0
   621  000001                     ??_I2C1_Stop:
   622  000001                     
   623                           ; 1 bytes @ 0x0
   624  000001                     	ds	2
   625  000003                     I2C1_Stop@completion_code:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x2
   629  000003                     	ds	1
   630  000004                     ??_I2C1_ISR:
   631                           
   632                           ; 1 bytes @ 0x3
   633  000004                     	ds	2
   634  000006                     ??_INTERRUPT_InterruptManager:
   635                           
   636                           ; 1 bytes @ 0x5
   637  000006                     	ds	14
   638  000014                     ?___awmod:
   639                           	opt stack 0
   640  000014                     ?___ftpack:
   641                           	opt stack 0
   642  000014                     ?___ftneg:
   643                           	opt stack 0
   644  000014                     ?__tdiv_to_l_:
   645                           	opt stack 0
   646  000014                     ?__div_to_l_:
   647                           	opt stack 0
   648  000014                     ?___lldiv:
   649                           	opt stack 0
   650  000014                     EUSART1_Write@txData:
   651                           	opt stack 0
   652  000014                     TMR2_SetInterruptHandler@InterruptHandler:
   653                           	opt stack 0
   654  000014                     TMR4_SetInterruptHandler@InterruptHandler:
   655                           	opt stack 0
   656  000014                     Delay@DelayCount:
   657                           	opt stack 0
   658  000014                     ___awmod@dividend:
   659                           	opt stack 0
   660  000014                     __div_to_l_@f1:
   661                           	opt stack 0
   662  000014                     ___ftpack@arg:
   663                           	opt stack 0
   664  000014                     __tdiv_to_l_@f1:
   665                           	opt stack 0
   666  000014                     ___ftge@ff1:
   667                           	opt stack 0
   668  000014                     ___ftneg@f1:
   669                           	opt stack 0
   670  000014                     ___lldiv@dividend:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x13
   674  000014                     	ds	2
   675  000016                     KeyPadScan@KeyPadKey:
   676                           	opt stack 0
   677  000016                     lcd_cmd@x:
   678                           	opt stack 0
   679  000016                     lcd_cmd_hf@x:
   680                           	opt stack 0
   681  000016                     lcd_dwr@x:
   682                           	opt stack 0
   683  000016                     ___awmod@divisor:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x15
   687  000016                     	ds	1
   688  000017                     ?_KeyPadAcquire:
   689                           	opt stack 0
   690  000017                     ___ftpack@exp:
   691                           	opt stack 0
   692  000017                     lcd_msg@c:
   693                           	opt stack 0
   694  000017                     CursorGOTOxy@x:
   695                           	opt stack 0
   696  000017                     __div_to_l_@f2:
   697                           	opt stack 0
   698  000017                     __tdiv_to_l_@f2:
   699                           	opt stack 0
   700  000017                     ___ftge@ff2:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x16
   704  000017                     	ds	1
   705  000018                     ___awmod@counter:
   706                           	opt stack 0
   707  000018                     ___ftpack@sign:
   708                           	opt stack 0
   709  000018                     ___lldiv@divisor:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x17
   713  000018                     	ds	1
   714  000019                     ??___ftpack:
   715  000019                     KeyPadAcquire@KeyAcquire:
   716                           	opt stack 0
   717  000019                     ___awmod@sign:
   718                           	opt stack 0
   719  000019                     CursorGOTOxy@y:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x18
   723  000019                     	ds	1
   724  00001A                     ??__tdiv_to_l_:
   725  00001A                     ??___ftge:
   726  00001A                     ?___awdiv:
   727                           	opt stack 0
   728  00001A                     ___awdiv@dividend:
   729                           	opt stack 0
   730  00001A                     __div_to_l_@quot:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x19
   734  00001A                     	ds	1
   735  00001B                     ??_CursorGOTOxy:
   736                           
   737                           ; 1 bytes @ 0x1A
   738  00001B                     	ds	1
   739  00001C                     ?___lltoft:
   740                           	opt stack 0
   741  00001C                     ___awdiv@divisor:
   742                           	opt stack 0
   743  00001C                     ___lldiv@quotient:
   744                           	opt stack 0
   745  00001C                     ___lltoft@c:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x1B
   749  00001C                     	ds	1
   750  00001D                     __tdiv_to_l_@quot:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x1C
   754  00001D                     	ds	1
   755  00001E                     ___awdiv@counter:
   756                           	opt stack 0
   757  00001E                     __div_to_l_@cntr:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x1D
   761  00001E                     	ds	1
   762  00001F                     ___awdiv@sign:
   763                           	opt stack 0
   764  00001F                     __div_to_l_@exp1:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x1E
   768  00001F                     	ds	1
   769  000020                     ??___lltoft:
   770  000020                     ___lldiv@counter:
   771                           	opt stack 0
   772  000020                     CursorGOTOxy@i:
   773                           	opt stack 0
   774  000020                     ___awdiv@quotient:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x1F
   778  000020                     	ds	1
   779  000021                     ?___llmod:
   780                           	opt stack 0
   781  000021                     __tdiv_to_l_@cntr:
   782                           	opt stack 0
   783  000021                     ___llmod@dividend:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x20
   787  000021                     	ds	1
   788  000022                     ?___wmul:
   789                           	opt stack 0
   790  000022                     __tdiv_to_l_@exp1:
   791                           	opt stack 0
   792  000022                     ___wmul@multiplier:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x21
   796  000022                     	ds	2
   797  000024                     ___lltoft@exp:
   798                           	opt stack 0
   799  000024                     ___wmul@multiplicand:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x23
   803  000024                     	ds	1
   804  000025                     ___llmod@divisor:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x24
   808  000025                     	ds	1
   809  000026                     ___wmul@product:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x25
   813  000026                     	ds	2
   814  000028                     ?___ftmul:
   815                           	opt stack 0
   816  000028                     ___ftmul@f1:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x27
   820  000028                     	ds	1
   821  000029                     ___llmod@counter:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x28
   825  000029                     	ds	2
   826  00002B                     ___ftmul@f2:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x2A
   830  00002B                     	ds	3
   831  00002E                     ??___ftmul:
   832                           
   833                           ; 1 bytes @ 0x2D
   834  00002E                     	ds	3
   835  000031                     ___ftmul@exp:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x30
   839  000031                     	ds	1
   840  000032                     ___ftmul@f3_as_product:
   841                           	opt stack 0
   842                           
   843                           ; 3 bytes @ 0x31
   844  000032                     	ds	3
   845  000035                     ___ftmul@cntr:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x34
   849  000035                     	ds	1
   850  000036                     ___ftmul@sign:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x35
   854  000036                     	ds	1
   855  000037                     tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           
   862                           ; 1 bytes @ 0x36
   863 ;;
   864 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   865 ;;
   866 ;; *************** function _main *****************
   867 ;; Defined at:
   868 ;;		line 55 in file "main.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;Total ram usage:        0 bytes
   887 ;; Hardware stack levels required when called:    8
   888 ;; This function calls:
   889 ;;		_CursorGOTOxy
   890 ;;		_Delay
   891 ;;		_DisplayONCursorONToggleON
   892 ;;		_EUSART1_Write
   893 ;;		_KeyPadAcquire
   894 ;;		_KeyPadInit
   895 ;;		_SYSTEM_Initialize
   896 ;;		_TMR4_SetInterruptHandler
   897 ;;		_lcd_init
   898 ;;		_lcd_msg_float
   899 ;; This function is called by:
   900 ;;		Startup code after reset
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text0
   905  002BA2                     __ptext0:
   906                           	opt stack 0
   907  002BA2                     _main:
   908                           	opt stack 23
   909                           
   910                           ;main.c: 58: SYSTEM_Initialize();
   911                           
   912                           ;incstack = 0
   913  002BA2  EC3E  F019         	call	_SYSTEM_Initialize	;wreg free
   914                           
   915                           ;main.c: 77: (INTCONbits.GIE = 1);
   916  002BA6  8EF2               	bsf	intcon,7,c	;volatile
   917                           
   918                           ;main.c: 79: (INTCONbits.PEIE = 1);
   919  002BA8  8CF2               	bsf	intcon,6,c	;volatile
   920                           
   921                           ;main.c: 82: TMR4_SetInterruptHandler(TMR4_Interrupt);
   922  002BAA  0E62               	movlw	low _TMR4_Interrupt
   923  002BAC  6E14               	movwf	TMR4_SetInterruptHandler@InterruptHandler,c
   924  002BAE  0E33               	movlw	high _TMR4_Interrupt
   925  002BB0  6E15               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1,c
   926  002BB2  ECB7  F019         	call	_TMR4_SetInterruptHandler	;wreg free
   927                           
   928                           ;main.c: 84: KeyPadInit();
   929  002BB6  ECC1  F019         	call	_KeyPadInit	;wreg free
   930                           
   931                           ;main.c: 86: do { LATBbits.LATB4 = 1; } while(0);
   932  002BBA  888A               	bsf	3978,4,c	;volatile
   933                           
   934                           ;main.c: 99: Delay(10*10*10);
   935  002BBC  0E03               	movlw	3
   936  002BBE  6E15               	movwf	Delay@DelayCount+1,c
   937  002BC0  0EE8               	movlw	232
   938  002BC2  6E14               	movwf	Delay@DelayCount,c
   939  002BC4  EC92  F018         	call	_Delay	;wreg free
   940                           
   941                           ;main.c: 100: do { LATDbits.LATD0 = 0; } while(0);
   942  002BC8  908C               	bcf	3980,0,c	;volatile
   943                           
   944                           ;main.c: 102: do { LATDbits.LATD2 = 1; } while(0);
   945  002BCA  848C               	bsf	3980,2,c	;volatile
   946                           
   947                           ;main.c: 103: EUSART1_Write(1);
   948  002BCC  0E01               	movlw	1
   949  002BCE  ECAB  F019         	call	_EUSART1_Write
   950                           
   951                           ;main.c: 105: lcd_init();
   952  002BD2  EC99  F016         	call	_lcd_init	;wreg free
   953                           
   954                           ;main.c: 107: DisplayONCursorONToggleON();
   955  002BD6  EC91  F019         	call	_DisplayONCursorONToggleON	;wreg free
   956                           
   957                           ;main.c: 108: Delay(10*10*10);
   958  002BDA  0E03               	movlw	3
   959  002BDC  6E15               	movwf	Delay@DelayCount+1,c
   960  002BDE  0EE8               	movlw	232
   961  002BE0  6E14               	movwf	Delay@DelayCount,c
   962  002BE2  EC92  F018         	call	_Delay	;wreg free
   963                           
   964                           ;main.c: 111: CursorGOTOxy(5,2);
   965  002BE6  0E00               	movlw	0
   966  002BE8  6E18               	movwf	CursorGOTOxy@x+1,c
   967  002BEA  0E05               	movlw	5
   968  002BEC  6E17               	movwf	CursorGOTOxy@x,c
   969  002BEE  0E00               	movlw	0
   970  002BF0  6E1A               	movwf	CursorGOTOxy@y+1,c
   971  002BF2  0E02               	movlw	2
   972  002BF4  6E19               	movwf	CursorGOTOxy@y,c
   973  002BF6  EC14  F016         	call	_CursorGOTOxy	;wreg free
   974                           
   975                           ;main.c: 112: lcd_msg_float(56.2);
   976  002BFA  0ECD               	movlw	205
   977  002BFC  0100               	movlb	0	; () banked
   978  002BFE  6FA0               	movwf	lcd_msg_float@msg& (0+255),b
   979  002C00  0E60               	movlw	96
   980  002C02  0100               	movlb	0	; () banked
   981  002C04  6FA1               	movwf	(lcd_msg_float@msg+1)& (0+255),b
   982  002C06  0E42               	movlw	66
   983  002C08  0100               	movlb	0	; () banked
   984  002C0A  6FA2               	movwf	(lcd_msg_float@msg+2)& (0+255),b
   985  002C0C  EC60  F018         	call	_lcd_msg_float	;wreg free
   986  002C10                     l4837:
   987                           
   988                           ;main.c: 114: {
   989                           ;main.c: 115: EUSART1_Write(KeyPadAcquire());
   990  002C10  EC02  F018         	call	_KeyPadAcquire	;wreg free
   991  002C14  5017               	movf	?_KeyPadAcquire,w,c
   992  002C16  ECAB  F019         	call	_EUSART1_Write
   993                           
   994                           ;main.c: 117: Delay(10*10*10);
   995  002C1A  0E03               	movlw	3
   996  002C1C  6E15               	movwf	Delay@DelayCount+1,c
   997  002C1E  0EE8               	movlw	232
   998  002C20  6E14               	movwf	Delay@DelayCount,c
   999  002C22  EC92  F018         	call	_Delay	;wreg free
  1000  002C26  D7F4               	goto	l4837
  1001  002C28                     __end_of_main:
  1002                           	opt stack 0
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           intcon	equ	0xFF2
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           
  1011 ;; *************** function _lcd_msg_float *****************
  1012 ;; Defined at:
  1013 ;;		line 73 in file "DriverLCD16x2.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  msg             3   64[BANK0 ] float 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  aux             5   67[BANK0 ] unsigned char [5]
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  1    wreg      void 
  1020 ;; Registers used:
  1021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1027 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;Total ram usage:        8 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    7
  1034 ;; This function calls:
  1035 ;;		_lcd_msg
  1036 ;;		_sprintf
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text1
  1043  0030C0                     __ptext1:
  1044                           	opt stack 0
  1045  0030C0                     _lcd_msg_float:
  1046                           	opt stack 23
  1047                           
  1048                           ;DriverLCD16x2.c: 75: char aux[5];
  1049                           ;DriverLCD16x2.c: 76: sprintf(aux,"%f",msg);
  1050                           
  1051                           ;incstack = 0
  1052  0030C0  0EA3               	movlw	low lcd_msg_float@aux
  1053  0030C2  0100               	movlb	0	; () banked
  1054  0030C4  6F7C               	movwf	sprintf@sp& (0+255),b
  1055  0030C6  0E00               	movlw	high lcd_msg_float@aux
  1056  0030C8  0100               	movlb	0	; () banked
  1057  0030CA  6F7D               	movwf	(sprintf@sp+1)& (0+255),b
  1058  0030CC  0E77               	movlw	low STR_2
  1059  0030CE  0100               	movlb	0	; () banked
  1060  0030D0  6F7E               	movwf	sprintf@f& (0+255),b
  1061  0030D2  0E10               	movlw	high STR_2
  1062  0030D4  0100               	movlb	0	; () banked
  1063  0030D6  6F7F               	movwf	(sprintf@f+1)& (0+255),b
  1064  0030D8  C0A0  F080         	movff	lcd_msg_float@msg,?_sprintf+4
  1065  0030DC  C0A1  F081         	movff	lcd_msg_float@msg+1,?_sprintf+5
  1066  0030E0  C0A2  F082         	movff	lcd_msg_float@msg+2,?_sprintf+6
  1067  0030E4  EC3F  F008         	call	_sprintf	;wreg free
  1068                           
  1069                           ;DriverLCD16x2.c: 77: lcd_msg(aux);
  1070  0030E8  0EA3               	movlw	low lcd_msg_float@aux
  1071  0030EA  6E17               	movwf	lcd_msg@c,c
  1072  0030EC  0E00               	movlw	high lcd_msg_float@aux
  1073  0030EE  6E18               	movwf	lcd_msg@c+1,c
  1074  0030F0  EC08  F019         	call	_lcd_msg	;wreg free
  1075  0030F4  0012               	return		;funcret
  1076  0030F6                     __end_of_lcd_msg_float:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           intcon	equ	0xFF2
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           
  1086 ;; *************** function _sprintf *****************
  1087 ;; Defined at:
  1088 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  sp              2   28[BANK0 ] PTR unsigned char 
  1091 ;;		 -> lcd_msg_float@aux(5), lcd_msg_int@aux(10), 
  1092 ;;  f               2   30[BANK0 ] PTR const unsigned char 
  1093 ;;		 -> STR_2(3), STR_1(3), 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  tmpval          4   56[BANK0 ] struct .
  1096 ;;  val             4   50[BANK0 ] unsigned long 
  1097 ;;  fval            3   60[BANK0 ] unsigned long 
  1098 ;;  cp              3    0        PTR const unsigned char 
  1099 ;;  exp             2   54[BANK0 ] int 
  1100 ;;  prec            2   48[BANK0 ] int 
  1101 ;;  flag            2   46[BANK0 ] unsigned short 
  1102 ;;  ap              2   44[BANK0 ] PTR void [1]
  1103 ;;		 -> ?_sprintf(2), 
  1104 ;;  len             2    0        unsigned int 
  1105 ;;  width           2    0        int 
  1106 ;;  c               1   63[BANK0 ] char 
  1107 ;;  d               1    0        unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  2   28[BANK0 ] int 
  1110 ;; Registers used:
  1111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1117 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;Total ram usage:       36 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; Hardware stack levels required when called:    6
  1124 ;; This function calls:
  1125 ;;		___awdiv
  1126 ;;		___ftadd
  1127 ;;		___ftge
  1128 ;;		___ftmul
  1129 ;;		___ftneg
  1130 ;;		___ftsub
  1131 ;;		___fttol
  1132 ;;		___lldiv
  1133 ;;		___llmod
  1134 ;;		___lltoft
  1135 ;;		___wmul
  1136 ;;		__div_to_l_
  1137 ;;		__tdiv_to_l_
  1138 ;;		_fround
  1139 ;;		_scale
  1140 ;; This function is called by:
  1141 ;;		_lcd_msg_float
  1142 ;;		_lcd_msg_int
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text2
  1147  00107E                     __ptext2:
  1148                           	opt stack 0
  1149  00107E                     _sprintf:
  1150                           	opt stack 23
  1151                           
  1152                           ;doprnt.c: 494: va_list ap;
  1153                           ;doprnt.c: 499: signed char c;
  1154                           ;doprnt.c: 501: int width;
  1155                           ;doprnt.c: 504: int prec;
  1156                           ;doprnt.c: 508: unsigned short flag;
  1157                           ;doprnt.c: 515: char d;
  1158                           ;doprnt.c: 516: double fval;
  1159                           ;doprnt.c: 517: int exp;
  1160                           ;doprnt.c: 523: union {
  1161                           ;doprnt.c: 524: unsigned long vd;
  1162                           ;doprnt.c: 525: double integ;
  1163                           ;doprnt.c: 526: } tmpval;
  1164                           ;doprnt.c: 528: unsigned long val;
  1165                           ;doprnt.c: 529: unsigned len;
  1166                           ;doprnt.c: 530: const char * cp;
  1167                           ;doprnt.c: 533: *ap = __va_start();
  1168                           
  1169                           ;incstack = 0
  1170  00107E  0E80               	movlw	low (?_sprintf+4)
  1171  001080  0100               	movlb	0	; () banked
  1172  001082  6F8C               	movwf	sprintf@ap& (0+255),b
  1173  001084  0E00               	movlw	high (?_sprintf+4)
  1174  001086  0100               	movlb	0	; () banked
  1175  001088  6F8D               	movwf	(sprintf@ap+1)& (0+255),b
  1176                           
  1177                           ;doprnt.c: 536: while(c = *f++) {
  1178  00108A  EF56  F00C         	goto	l4799
  1179  00108E                     l4603:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;doprnt.c: 538: if(c != '%')
  1183  00108E  0E25               	movlw	37
  1184  001090  0100               	movlb	0	; () banked
  1185  001092  199F               	xorwf	sprintf@c& (0+255),w,b
  1186  001094  B4D8               	btfsc	status,2,c
  1187  001096  D00B               	goto	l4609
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;doprnt.c: 540: {
  1191                           ;doprnt.c: 541: ((*sp++ = (c)));
  1192  001098  C07C  FFD9         	movff	sprintf@sp,fsr2l
  1193  00109C  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  1194  0010A0  C09F  FFDF         	movff	sprintf@c,indf2
  1195                           
  1196                           ; BSR set to: 0
  1197  0010A4  0100               	movlb	0	; () banked
  1198  0010A6  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  1199  0010A8  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  1200                           
  1201                           ;doprnt.c: 542: continue;
  1202  0010AA  EF56  F00C         	goto	l4799
  1203  0010AE                     l4609:
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;doprnt.c: 543: }
  1207                           ;doprnt.c: 548: flag = 0;
  1208  0010AE  0E00               	movlw	0
  1209  0010B0  0100               	movlb	0	; () banked
  1210  0010B2  6F8F               	movwf	(sprintf@flag+1)& (0+255),b
  1211  0010B4  0E00               	movlw	0
  1212  0010B6  6F8E               	movwf	sprintf@flag& (0+255),b
  1213                           
  1214                           ;doprnt.c: 635: switch(c = *f++) {
  1215  0010B8  D007               	goto	l4617
  1216  0010BA                     l4611:
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;doprnt.c: 663: flag |= 0x400;
  1220  0010BA  0100               	movlb	0	; () banked
  1221  0010BC  858F               	bsf	(sprintf@flag+1)& (0+255),2,b
  1222                           
  1223                           ;doprnt.c: 664: break;
  1224  0010BE  D01B               	goto	l4619
  1225  0010C0                     l4613:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;doprnt.c: 818: flag |= 0xC0;
  1229  0010C0  0EC0               	movlw	192
  1230  0010C2  0100               	movlb	0	; () banked
  1231  0010C4  138E               	iorwf	sprintf@flag& (0+255),f,b
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;doprnt.c: 822: }
  1235                           
  1236                           ;doprnt.c: 819: break;
  1237  0010C6  D017               	goto	l4619
  1238  0010C8                     l4617:
  1239                           
  1240                           ; BSR set to: 0
  1241  0010C8  C07E  FFF6         	movff	sprintf@f,tblptrl
  1242  0010CC  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  1243  0010D0  0100               	movlb	0	; () banked
  1244  0010D2  4B7E               	infsnz	sprintf@f& (0+255),f,b
  1245  0010D4  2B7F               	incf	(sprintf@f+1)& (0+255),f,b
  1246  0010D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1247  0010D6  6AF8               	clrf	tblptru,c
  1248  0010D8                     	endif
  1249  0010D8                     	if	0	;tblptru may be non-zero
  1250  0010D8                     	endif
  1251  0010D8  0008               	tblrd		*
  1252  0010DA  CFF5 F09F          	movff	tablat,sprintf@c
  1253  0010DE  0100               	movlb	0	; () banked
  1254  0010E0  519F               	movf	sprintf@c& (0+255),w,b
  1255                           
  1256                           ; Switch size 1, requested type "space"
  1257                           ; Number of cases is 3, Range of values is 0 to 117
  1258                           ; switch strategies available:
  1259                           ; Name         Instructions Cycles
  1260                           ; simple_byte           10     6 (average)
  1261                           ;	Chosen strategy is simple_byte
  1262  0010E2  0A00               	xorlw	0	; case 0
  1263  0010E4  B4D8               	btfsc	status,2,c
  1264  0010E6  D3F2               	goto	l4801
  1265  0010E8  0A66               	xorlw	102	; case 102
  1266  0010EA  B4D8               	btfsc	status,2,c
  1267  0010EC  D7E6               	goto	l4611
  1268  0010EE  0A13               	xorlw	19	; case 117
  1269  0010F0  B4D8               	btfsc	status,2,c
  1270  0010F2  D7E6               	goto	l4613
  1271  0010F4  D3DB               	goto	l4799
  1272  0010F6                     l4619:
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;doprnt.c: 825: if(flag & (0x700)) {
  1276  0010F6  0E07               	movlw	7
  1277  0010F8  0100               	movlb	0	; () banked
  1278  0010FA  158F               	andwf	(sprintf@flag+1)& (0+255),w,b
  1279  0010FC  B4D8               	btfsc	status,2,c
  1280  0010FE  D322               	goto	l4765
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;doprnt.c: 829: prec = 6;
  1284  001100  0E00               	movlw	0
  1285  001102  0100               	movlb	0	; () banked
  1286  001104  6F91               	movwf	(sprintf@prec+1)& (0+255),b
  1287  001106  0E06               	movlw	6
  1288  001108  6F90               	movwf	sprintf@prec& (0+255),b
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1292  00110A  C08C  FFD9         	movff	sprintf@ap,fsr2l
  1293  00110E  C08D  FFDA         	movff	sprintf@ap+1,fsr2h
  1294  001112  CFDE F09C          	movff	postinc2,sprintf@fval
  1295  001116  CFDE F09D          	movff	postinc2,sprintf@fval+1
  1296  00111A  CFDD F09E          	movff	postdec2,sprintf@fval+2
  1297                           
  1298                           ; BSR set to: 0
  1299  00111E  0E03               	movlw	3
  1300  001120  0100               	movlb	0	; () banked
  1301  001122  278C               	addwf	sprintf@ap& (0+255),f,b
  1302  001124  0E00               	movlw	0
  1303  001126  238D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;doprnt.c: 831: if(fval < 0.0) {
  1307  001128  0100               	movlb	0	; () banked
  1308  00112A  AF9E               	btfss	(sprintf@fval+2)& (0+255),7,b
  1309  00112C  D011               	goto	l4633
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;doprnt.c: 832: fval = -fval;
  1313  00112E  C09C  F014         	movff	sprintf@fval,___ftneg@f1
  1314  001132  C09D  F015         	movff	sprintf@fval+1,___ftneg@f1+1
  1315  001136  C09E  F016         	movff	sprintf@fval+2,___ftneg@f1+2
  1316  00113A  ECF6  F018         	call	___ftneg	;wreg free
  1317  00113E  C014  F09C         	movff	?___ftneg,sprintf@fval
  1318  001142  C015  F09D         	movff	?___ftneg+1,sprintf@fval+1
  1319  001146  C016  F09E         	movff	?___ftneg+2,sprintf@fval+2
  1320                           
  1321                           ;doprnt.c: 833: flag |= 0x03;
  1322  00114A  0E03               	movlw	3
  1323  00114C  0100               	movlb	0	; () banked
  1324  00114E  138E               	iorwf	sprintf@flag& (0+255),f,b
  1325  001150                     l4633:
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;doprnt.c: 834: }
  1329                           ;doprnt.c: 835: exp = 0;
  1330  001150  0E00               	movlw	0
  1331  001152  0100               	movlb	0	; () banked
  1332  001154  6F97               	movwf	(sprintf@exp+1)& (0+255),b
  1333  001156  0E00               	movlw	0
  1334  001158  6F96               	movwf	sprintf@exp& (0+255),b
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;doprnt.c: 836: if( fval!=0) {
  1338  00115A  0100               	movlb	0	; () banked
  1339  00115C  519C               	movf	sprintf@fval& (0+255),w,b
  1340  00115E  0100               	movlb	0	; () banked
  1341  001160  119D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1342  001162  0100               	movlb	0	; () banked
  1343  001164  119E               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1344  001166  B4D8               	btfsc	status,2,c
  1345  001168  D091               	goto	l4661
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1349  00116A  0E82               	movlw	130
  1350  00116C  0100               	movlb	0	; () banked
  1351  00116E  6F83               	movwf	??_sprintf& (0+255),b
  1352  001170  0EFF               	movlw	255
  1353  001172  0100               	movlb	0	; () banked
  1354  001174  6F84               	movwf	(??_sprintf+1)& (0+255),b
  1355  001176  C09C  F085         	movff	sprintf@fval,??_sprintf+2
  1356  00117A  C09D  F086         	movff	sprintf@fval+1,??_sprintf+3
  1357  00117E  C09E  F087         	movff	sprintf@fval+2,??_sprintf+4
  1358  001182  C09F  F088         	movff	sprintf@fval+3,??_sprintf+5
  1359  001186  0E10               	movlw	16
  1360  001188  D006               	goto	u4480
  1361  00118A                     u4485:
  1362  00118A  0100               	movlb	0	; () banked
  1363  00118C  90D8               	bcf	status,0,c
  1364  00118E  3388               	rrcf	(??_sprintf+5)& (0+255),f,b
  1365  001190  3387               	rrcf	(??_sprintf+4)& (0+255),f,b
  1366  001192  3386               	rrcf	(??_sprintf+3)& (0+255),f,b
  1367  001194  3385               	rrcf	(??_sprintf+2)& (0+255),f,b
  1368  001196                     u4480:
  1369  001196  2EE8               	decfsz	wreg,f,c
  1370  001198  D7F8               	goto	u4485
  1371  00119A  0100               	movlb	0	; () banked
  1372  00119C  5185               	movf	(??_sprintf+2)& (0+255),w,b
  1373  00119E  0100               	movlb	0	; () banked
  1374  0011A0  2583               	addwf	??_sprintf& (0+255),w,b
  1375  0011A2  0100               	movlb	0	; () banked
  1376  0011A4  6F96               	movwf	sprintf@exp& (0+255),b
  1377  0011A6  0E00               	movlw	0
  1378  0011A8  0100               	movlb	0	; () banked
  1379  0011AA  2184               	addwfc	(??_sprintf+1)& (0+255),w,b
  1380  0011AC  0100               	movlb	0	; () banked
  1381  0011AE  6F97               	movwf	(sprintf@exp+1)& (0+255),b
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;doprnt.c: 838: exp--;
  1385  0011B0  0100               	movlb	0	; () banked
  1386  0011B2  0796               	decf	sprintf@exp& (0+255),f,b
  1387  0011B4  A0D8               	btfss	status,0,c
  1388  0011B6  0797               	decf	(sprintf@exp+1)& (0+255),f,b
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;doprnt.c: 839: exp *= 3;
  1392  0011B8  C096  F022         	movff	sprintf@exp,___wmul@multiplier
  1393  0011BC  C097  F023         	movff	sprintf@exp+1,___wmul@multiplier+1
  1394  0011C0  0E00               	movlw	0
  1395  0011C2  6E25               	movwf	___wmul@multiplicand+1,c
  1396  0011C4  0E03               	movlw	3
  1397  0011C6  6E24               	movwf	___wmul@multiplicand,c
  1398  0011C8  ECBD  F018         	call	___wmul	;wreg free
  1399  0011CC  C022  F096         	movff	?___wmul,sprintf@exp
  1400  0011D0  C023  F097         	movff	?___wmul+1,sprintf@exp+1
  1401                           
  1402                           ;doprnt.c: 840: exp /= 10;
  1403  0011D4  C096  F01A         	movff	sprintf@exp,___awdiv@dividend
  1404  0011D8  C097  F01B         	movff	sprintf@exp+1,___awdiv@dividend+1
  1405  0011DC  0E00               	movlw	0
  1406  0011DE  6E1D               	movwf	___awdiv@divisor+1,c
  1407  0011E0  0E0A               	movlw	10
  1408  0011E2  6E1C               	movwf	___awdiv@divisor,c
  1409  0011E4  EC57  F016         	call	___awdiv	;wreg free
  1410  0011E8  C01A  F096         	movff	?___awdiv,sprintf@exp
  1411  0011EC  C01B  F097         	movff	?___awdiv+1,sprintf@exp+1
  1412                           
  1413                           ;doprnt.c: 841: if(exp < 0)
  1414  0011F0  0100               	movlb	0	; () banked
  1415  0011F2  AF97               	btfss	(sprintf@exp+1)& (0+255),7,b
  1416  0011F4  D004               	goto	l4649
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;doprnt.c: 842: exp--;
  1420  0011F6  0100               	movlb	0	; () banked
  1421  0011F8  0796               	decf	sprintf@exp& (0+255),f,b
  1422  0011FA  A0D8               	btfss	status,0,c
  1423  0011FC  0797               	decf	(sprintf@exp+1)& (0+255),f,b
  1424  0011FE                     l4649:
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1428  0011FE  0100               	movlb	0	; () banked
  1429  001200  5196               	movf	sprintf@exp& (0+255),w,b
  1430  001202  0800               	sublw	0
  1431  001204  EC6D  F00C         	call	_scale
  1432  001208  C060  F098         	movff	?_scale,sprintf@tmpval
  1433  00120C  C061  F099         	movff	?_scale+1,sprintf@tmpval+1
  1434  001210  C062  F09A         	movff	?_scale+2,sprintf@tmpval+2
  1435                           
  1436                           ;doprnt.c: 847: tmpval.integ *= fval;
  1437  001214  C098  F028         	movff	sprintf@tmpval,___ftmul@f1
  1438  001218  C099  F029         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1439  00121C  C09A  F02A         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1440  001220  C09C  F02B         	movff	sprintf@fval,___ftmul@f2
  1441  001224  C09D  F02C         	movff	sprintf@fval+1,___ftmul@f2+1
  1442  001228  C09E  F02D         	movff	sprintf@fval+2,___ftmul@f2+2
  1443  00122C  ECB8  F014         	call	___ftmul	;wreg free
  1444  001230  C028  F098         	movff	?___ftmul,sprintf@tmpval
  1445  001234  C029  F099         	movff	?___ftmul+1,sprintf@tmpval+1
  1446  001238  C02A  F09A         	movff	?___ftmul+2,sprintf@tmpval+2
  1447                           
  1448                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1449  00123C  C098  F014         	movff	sprintf@tmpval,___ftge@ff1
  1450  001240  C099  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1451  001244  C09A  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1452  001248  0E00               	movlw	0
  1453  00124A  6E17               	movwf	___ftge@ff2,c
  1454  00124C  0E80               	movlw	128
  1455  00124E  6E18               	movwf	___ftge@ff2+1,c
  1456  001250  0E3F               	movlw	63
  1457  001252  6E19               	movwf	___ftge@ff2+2,c
  1458  001254  EC89  F015         	call	___ftge	;wreg free
  1459  001258  B0D8               	btfsc	status,0,c
  1460  00125A  D005               	goto	l4657
  1461                           
  1462                           ;doprnt.c: 849: exp--;
  1463  00125C  0100               	movlb	0	; () banked
  1464  00125E  0796               	decf	sprintf@exp& (0+255),f,b
  1465  001260  A0D8               	btfss	status,0,c
  1466  001262  0797               	decf	(sprintf@exp+1)& (0+255),f,b
  1467  001264  D013               	goto	l4661
  1468  001266                     l4657:
  1469                           
  1470                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1471  001266  C098  F014         	movff	sprintf@tmpval,___ftge@ff1
  1472  00126A  C099  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1473  00126E  C09A  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1474  001272  0E00               	movlw	0
  1475  001274  6E17               	movwf	___ftge@ff2,c
  1476  001276  0E20               	movlw	32
  1477  001278  6E18               	movwf	___ftge@ff2+1,c
  1478  00127A  0E41               	movlw	65
  1479  00127C  6E19               	movwf	___ftge@ff2+2,c
  1480  00127E  EC89  F015         	call	___ftge	;wreg free
  1481  001282  A0D8               	btfss	status,0,c
  1482  001284  D003               	goto	l4661
  1483                           
  1484                           ;doprnt.c: 851: exp++;
  1485  001286  0100               	movlb	0	; () banked
  1486  001288  4B96               	infsnz	sprintf@exp& (0+255),f,b
  1487  00128A  2B97               	incf	(sprintf@exp+1)& (0+255),f,b
  1488  00128C                     l4661:
  1489                           
  1490                           ;doprnt.c: 852: }
  1491                           ;doprnt.c: 1112: if(prec <= 12)
  1492  00128C  0100               	movlb	0	; () banked
  1493  00128E  BF91               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1494  001290  D008               	goto	l4663
  1495  001292  0100               	movlb	0	; () banked
  1496  001294  5191               	movf	(sprintf@prec+1)& (0+255),w,b
  1497  001296  E11D               	bnz	l4665
  1498  001298  0E0D               	movlw	13
  1499  00129A  0100               	movlb	0	; () banked
  1500  00129C  5D90               	subwf	sprintf@prec& (0+255),w,b
  1501  00129E  B0D8               	btfsc	status,0,c
  1502  0012A0  D018               	goto	l4665
  1503  0012A2                     l4663:
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;doprnt.c: 1113: fval += fround(prec);
  1507  0012A2  C09C  F06A         	movff	sprintf@fval,___ftadd@f1
  1508  0012A6  C09D  F06B         	movff	sprintf@fval+1,___ftadd@f1+1
  1509  0012AA  C09E  F06C         	movff	sprintf@fval+2,___ftadd@f1+2
  1510  0012AE  0100               	movlb	0	; () banked
  1511  0012B0  5190               	movf	sprintf@prec& (0+255),w,b
  1512  0012B2  EC9C  F00E         	call	_fround
  1513  0012B6  C060  F06D         	movff	?_fround,___ftadd@f2
  1514  0012BA  C061  F06E         	movff	?_fround+1,___ftadd@f2+1
  1515  0012BE  C062  F06F         	movff	?_fround+2,___ftadd@f2+2
  1516  0012C2  ECD5  F00F         	call	___ftadd	;wreg free
  1517  0012C6  C06A  F09C         	movff	?___ftadd,sprintf@fval
  1518  0012CA  C06B  F09D         	movff	?___ftadd+1,sprintf@fval+1
  1519  0012CE  C06C  F09E         	movff	?___ftadd+2,sprintf@fval+2
  1520  0012D2                     l4665:
  1521                           
  1522                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1523  0012D2  0100               	movlb	0	; () banked
  1524  0012D4  BF97               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1525  0012D6  D008               	goto	l4667
  1526  0012D8  0100               	movlb	0	; () banked
  1527  0012DA  5197               	movf	(sprintf@exp+1)& (0+255),w,b
  1528  0012DC  E12A               	bnz	l4673
  1529  0012DE  0E0A               	movlw	10
  1530  0012E0  0100               	movlb	0	; () banked
  1531  0012E2  5D96               	subwf	sprintf@exp& (0+255),w,b
  1532  0012E4  B0D8               	btfsc	status,0,c
  1533  0012E6  D025               	goto	l4673
  1534  0012E8                     l4667:
  1535                           
  1536                           ; BSR set to: 0
  1537  0012E8  0100               	movlb	0	; () banked
  1538  0012EA  519C               	movf	sprintf@fval& (0+255),w,b
  1539  0012EC  0100               	movlb	0	; () banked
  1540  0012EE  119D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1541  0012F0  0100               	movlb	0	; () banked
  1542  0012F2  119E               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1543  0012F4  B4D8               	btfsc	status,2,c
  1544  0012F6  D05F               	goto	l4687
  1545                           
  1546                           ; BSR set to: 0
  1547  0012F8  C09C  F067         	movff	sprintf@fval,___fttol@f1
  1548  0012FC  C09D  F068         	movff	sprintf@fval+1,___fttol@f1+1
  1549  001300  C09E  F069         	movff	sprintf@fval+2,___fttol@f1+2
  1550  001304  ECE9  F012         	call	___fttol	;wreg free
  1551  001308  0100               	movlb	0	; () banked
  1552  00130A  5167               	movf	?___fttol& (0+255),w,b
  1553  00130C  0100               	movlb	0	; () banked
  1554  00130E  1168               	iorwf	(?___fttol+1)& (0+255),w,b
  1555  001310  0100               	movlb	0	; () banked
  1556  001312  1169               	iorwf	(?___fttol+2)& (0+255),w,b
  1557  001314  0100               	movlb	0	; () banked
  1558  001316  116A               	iorwf	(?___fttol+3)& (0+255),w,b
  1559  001318  A4D8               	btfss	status,2,c
  1560  00131A  D04D               	goto	l4687
  1561                           
  1562                           ; BSR set to: 0
  1563  00131C  0100               	movlb	0	; () banked
  1564  00131E  BF97               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1565  001320  D04A               	goto	l4687
  1566  001322  0100               	movlb	0	; () banked
  1567  001324  5197               	movf	(sprintf@exp+1)& (0+255),w,b
  1568  001326  E105               	bnz	l4673
  1569  001328  0E02               	movlw	2
  1570  00132A  0100               	movlb	0	; () banked
  1571  00132C  5D96               	subwf	sprintf@exp& (0+255),w,b
  1572  00132E  A0D8               	btfss	status,0,c
  1573  001330  D042               	goto	l4687
  1574  001332                     l4673:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1578  001332  C098  F014         	movff	sprintf@tmpval,___ftge@ff1
  1579  001336  C099  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1580  00133A  C09A  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1581  00133E  0E70               	movlw	112
  1582  001340  6E17               	movwf	___ftge@ff2,c
  1583  001342  0E89               	movlw	137
  1584  001344  6E18               	movwf	___ftge@ff2+1,c
  1585  001346  0E40               	movlw	64
  1586  001348  6E19               	movwf	___ftge@ff2+2,c
  1587  00134A  EC89  F015         	call	___ftge	;wreg free
  1588  00134E  B0D8               	btfsc	status,0,c
  1589  001350  D003               	goto	l4677
  1590                           
  1591                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1592  001352  0100               	movlb	0	; () banked
  1593  001354  0EF7               	movlw	247
  1594  001356  D002               	goto	L1
  1595  001358                     l4677:
  1596                           
  1597                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1598  001358  0100               	movlb	0	; () banked
  1599  00135A  0EF8               	movlw	248
  1600  00135C                     L1:
  1601  00135C  2796               	addwf	sprintf@exp& (0+255),f,b
  1602  00135E  0EFF               	movlw	255
  1603  001360  2397               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 1124: }
  1607                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1608                           
  1609                           ; BSR set to: 0
  1610  001362  0100               	movlb	0	; () banked
  1611  001364  5196               	movf	sprintf@exp& (0+255),w,b
  1612  001366  EC6D  F00C         	call	_scale
  1613  00136A  C060  F098         	movff	?_scale,sprintf@tmpval
  1614  00136E  C061  F099         	movff	?_scale+1,sprintf@tmpval+1
  1615  001372  C062  F09A         	movff	?_scale+2,sprintf@tmpval+2
  1616                           
  1617                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1618  001376  C09C  F014         	movff	sprintf@fval,__tdiv_to_l_@f1
  1619  00137A  C09D  F015         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1620  00137E  C09E  F016         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1621  001382  C098  F017         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1622  001386  C099  F018         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1623  00138A  C09A  F019         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1624  00138E  EC8B  F013         	call	__tdiv_to_l_	;wreg free
  1625  001392  C014  F092         	movff	?__tdiv_to_l_,sprintf@val
  1626  001396  C015  F093         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1627  00139A  C016  F094         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1628  00139E  C017  F095         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1629                           
  1630                           ;doprnt.c: 1129: fval = 0.0;
  1631  0013A2  0E00               	movlw	0
  1632  0013A4  0100               	movlb	0	; () banked
  1633  0013A6  6F9C               	movwf	sprintf@fval& (0+255),b
  1634  0013A8  0E00               	movlw	0
  1635  0013AA  0100               	movlb	0	; () banked
  1636  0013AC  6F9D               	movwf	(sprintf@fval+1)& (0+255),b
  1637  0013AE  0E00               	movlw	0
  1638  0013B0  0100               	movlb	0	; () banked
  1639  0013B2  6F9E               	movwf	(sprintf@fval+2)& (0+255),b
  1640                           
  1641                           ;doprnt.c: 1130: } else {
  1642  0013B4  D033               	goto	l4691
  1643  0013B6                     l4687:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1647  0013B6  C09C  F067         	movff	sprintf@fval,___fttol@f1
  1648  0013BA  C09D  F068         	movff	sprintf@fval+1,___fttol@f1+1
  1649  0013BE  C09E  F069         	movff	sprintf@fval+2,___fttol@f1+2
  1650  0013C2  ECE9  F012         	call	___fttol	;wreg free
  1651  0013C6  C067  F092         	movff	?___fttol,sprintf@val
  1652  0013CA  C068  F093         	movff	?___fttol+1,sprintf@val+1
  1653  0013CE  C069  F094         	movff	?___fttol+2,sprintf@val+2
  1654  0013D2  C06A  F095         	movff	?___fttol+3,sprintf@val+3
  1655                           
  1656                           ;doprnt.c: 1132: fval -= (double)val;
  1657  0013D6  C09C  F076         	movff	sprintf@fval,___ftsub@f1
  1658  0013DA  C09D  F077         	movff	sprintf@fval+1,___ftsub@f1+1
  1659  0013DE  C09E  F078         	movff	sprintf@fval+2,___ftsub@f1+2
  1660  0013E2  C092  F01C         	movff	sprintf@val,___lltoft@c
  1661  0013E6  C093  F01D         	movff	sprintf@val+1,___lltoft@c+1
  1662  0013EA  C094  F01E         	movff	sprintf@val+2,___lltoft@c+2
  1663  0013EE  C095  F01F         	movff	sprintf@val+3,___lltoft@c+3
  1664  0013F2  EC87  F017         	call	___lltoft	;wreg free
  1665  0013F6  C01C  F079         	movff	?___lltoft,___ftsub@f2
  1666  0013FA  C01D  F07A         	movff	?___lltoft+1,___ftsub@f2+1
  1667  0013FE  C01E  F07B         	movff	?___lltoft+2,___ftsub@f2+2
  1668  001402  ECDC  F017         	call	___ftsub	;wreg free
  1669  001406  C076  F09C         	movff	?___ftsub,sprintf@fval
  1670  00140A  C077  F09D         	movff	?___ftsub+1,sprintf@fval+1
  1671  00140E  C078  F09E         	movff	?___ftsub+2,sprintf@fval+2
  1672                           
  1673                           ;doprnt.c: 1133: exp = 0;
  1674  001412  0E00               	movlw	0
  1675  001414  0100               	movlb	0	; () banked
  1676  001416  6F97               	movwf	(sprintf@exp+1)& (0+255),b
  1677  001418  0E00               	movlw	0
  1678  00141A  6F96               	movwf	sprintf@exp& (0+255),b
  1679  00141C                     l4691:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 1134: }
  1683                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1684  00141C  0E01               	movlw	1
  1685  00141E  0100               	movlb	0	; () banked
  1686  001420  6F9F               	movwf	sprintf@c& (0+255),b
  1687  001422                     l4693:
  1688                           
  1689                           ; BSR set to: 0
  1690  001422  0E0A               	movlw	10
  1691  001424  0100               	movlb	0	; () banked
  1692  001426  199F               	xorwf	sprintf@c& (0+255),w,b
  1693  001428  B4D8               	btfsc	status,2,c
  1694  00142A  D021               	goto	l4705
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;doprnt.c: 1137: if(val < dpowers[c])
  1698                           
  1699                           ; BSR set to: 0
  1700                           
  1701                           ; BSR set to: 0
  1702  00142C  0100               	movlb	0	; () banked
  1703  00142E  519F               	movf	sprintf@c& (0+255),w,b
  1704  001430  0D04               	mullw	4
  1705  001432  0E01               	movlw	low _dpowers
  1706  001434  24F3               	addwf	prodl,w,c
  1707  001436  6EF6               	movwf	tblptrl,c
  1708  001438  0E10               	movlw	high _dpowers
  1709  00143A  20F4               	addwfc	prodh,w,c
  1710  00143C  6EF7               	movwf	tblptrh,c
  1711  00143E                     	if	1	;There are 3 active tblptr bytes
  1712  00143E  6AF8               	clrf	tblptru,c
  1713  001440  0E00               	movlw	low (__mediumconst shr (0+16))
  1714  001442  22F8               	addwfc	tblptru,f,c
  1715  001444                     	endif
  1716  001444  0009               	tblrd		*+
  1717  001446  50F5               	movf	tablat,w,c
  1718  001448  0100               	movlb	0	; () banked
  1719  00144A  5D92               	subwf	sprintf@val& (0+255),w,b
  1720  00144C  0009               	tblrd		*+
  1721  00144E  50F5               	movf	tablat,w,c
  1722  001450  0100               	movlb	0	; () banked
  1723  001452  5993               	subwfb	(sprintf@val+1)& (0+255),w,b
  1724  001454  0009               	tblrd		*+
  1725  001456  50F5               	movf	tablat,w,c
  1726  001458  0100               	movlb	0	; () banked
  1727  00145A  5994               	subwfb	(sprintf@val+2)& (0+255),w,b
  1728  00145C  0009               	tblrd		*+
  1729  00145E  50F5               	movf	tablat,w,c
  1730  001460  0100               	movlb	0	; () banked
  1731  001462  5995               	subwfb	(sprintf@val+3)& (0+255),w,b
  1732  001464  A0D8               	btfss	status,0,c
  1733  001466  D003               	goto	l4705
  1734                           
  1735                           ; BSR set to: 0
  1736                           
  1737                           ; BSR set to: 0
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;doprnt.c: 1138: break;
  1741  001468  0100               	movlb	0	; () banked
  1742  00146A  2B9F               	incf	sprintf@c& (0+255),f,b
  1743  00146C  D7DA               	goto	l4693
  1744  00146E                     l4705:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;doprnt.c: 1175: {
  1748                           ;doprnt.c: 1188: if(flag & 0x03)
  1749  00146E  0E03               	movlw	3
  1750  001470  0100               	movlb	0	; () banked
  1751  001472  158E               	andwf	sprintf@flag& (0+255),w,b
  1752  001474  0100               	movlb	0	; () banked
  1753  001476  6F83               	movwf	??_sprintf& (0+255),b
  1754  001478  0E00               	movlw	0
  1755  00147A  0100               	movlb	0	; () banked
  1756  00147C  158F               	andwf	(sprintf@flag+1)& (0+255),w,b
  1757  00147E  0100               	movlb	0	; () banked
  1758  001480  6F84               	movwf	(??_sprintf+1)& (0+255),b
  1759  001482  0100               	movlb	0	; () banked
  1760  001484  5183               	movf	??_sprintf& (0+255),w,b
  1761  001486  0100               	movlb	0	; () banked
  1762  001488  1184               	iorwf	(??_sprintf+1)& (0+255),w,b
  1763  00148A  B4D8               	btfsc	status,2,c
  1764  00148C  D057               	goto	l4719
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1768  00148E  C07C  FFD9         	movff	sprintf@sp,fsr2l
  1769  001492  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  1770  001496  0E2D               	movlw	45
  1771  001498  D04F               	goto	L2
  1772  00149A                     l4709:
  1773                           
  1774                           ; BSR set to: 0
  1775  00149A  0100               	movlb	0	; () banked
  1776  00149C  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  1777  00149E  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;doprnt.c: 1195: }
  1781                           ;doprnt.c: 1196: while(c--) {
  1782  0014A0  D04D               	goto	l4719
  1783  0014A2                     l4711:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;doprnt.c: 1200: {
  1787                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1788  0014A2  C092  F014         	movff	sprintf@val,___lldiv@dividend
  1789  0014A6  C093  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  1790  0014AA  C094  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  1791  0014AE  C095  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  1792  0014B2  0100               	movlb	0	; () banked
  1793  0014B4  519F               	movf	sprintf@c& (0+255),w,b
  1794  0014B6  0D04               	mullw	4
  1795  0014B8  0E01               	movlw	low _dpowers
  1796  0014BA  24F3               	addwf	prodl,w,c
  1797  0014BC  6EF6               	movwf	tblptrl,c
  1798  0014BE  0E10               	movlw	high _dpowers
  1799  0014C0  20F4               	addwfc	prodh,w,c
  1800  0014C2  6EF7               	movwf	tblptrh,c
  1801  0014C4                     	if	1	;There are 3 active tblptr bytes
  1802  0014C4  6AF8               	clrf	tblptru,c
  1803  0014C6  0E00               	movlw	low (__mediumconst shr (0+16))
  1804  0014C8  22F8               	addwfc	tblptru,f,c
  1805  0014CA                     	endif
  1806  0014CA  0009               	tblrd		*+
  1807  0014CC  CFF5 F018          	movff	tablat,___lldiv@divisor
  1808  0014D0  0009               	tblrd		*+
  1809  0014D2  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  1810  0014D6  0009               	tblrd		*+
  1811  0014D8  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  1812  0014DC  000A               	tblrd		*-
  1813  0014DE  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  1814  0014E2  ECDB  F016         	call	___lldiv	;wreg free
  1815  0014E6  C014  F098         	movff	?___lldiv,sprintf@tmpval
  1816  0014EA  C015  F099         	movff	?___lldiv+1,sprintf@tmpval+1
  1817  0014EE  C016  F09A         	movff	?___lldiv+2,sprintf@tmpval+2
  1818  0014F2  C017  F09B         	movff	?___lldiv+3,sprintf@tmpval+3
  1819                           
  1820                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1821  0014F6  C098  F021         	movff	sprintf@tmpval,___llmod@dividend
  1822  0014FA  C099  F022         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1823  0014FE  C09A  F023         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1824  001502  C09B  F024         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1825  001506  0E0A               	movlw	10
  1826  001508  6E25               	movwf	___llmod@divisor,c
  1827  00150A  0E00               	movlw	0
  1828  00150C  6E26               	movwf	___llmod@divisor+1,c
  1829  00150E  0E00               	movlw	0
  1830  001510  6E27               	movwf	___llmod@divisor+2,c
  1831  001512  0E00               	movlw	0
  1832  001514  6E28               	movwf	___llmod@divisor+3,c
  1833  001516  EC54  F017         	call	___llmod	;wreg free
  1834  00151A  C021  F098         	movff	?___llmod,sprintf@tmpval
  1835  00151E  C022  F099         	movff	?___llmod+1,sprintf@tmpval+1
  1836  001522  C023  F09A         	movff	?___llmod+2,sprintf@tmpval+2
  1837  001526  C024  F09B         	movff	?___llmod+3,sprintf@tmpval+3
  1838                           
  1839                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1840  00152A  0100               	movlb	0	; () banked
  1841  00152C  5198               	movf	sprintf@tmpval& (0+255),w,b
  1842  00152E  0F30               	addlw	48
  1843  001530  C07C  FFD9         	movff	sprintf@sp,fsr2l
  1844  001534  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  1845  001538                     L2:
  1846  001538  6EDF               	movwf	indf2,c
  1847  00153A  D7AF               	goto	l4709
  1848  00153C                     l4719:
  1849                           
  1850                           ; BSR set to: 0
  1851  00153C  0100               	movlb	0	; () banked
  1852  00153E  079F               	decf	sprintf@c& (0+255),f,b
  1853  001540  0100               	movlb	0	; () banked
  1854  001542  299F               	incf	sprintf@c& (0+255),w,b
  1855  001544  B4D8               	btfsc	status,2,c
  1856  001546  D00E               	goto	l4727
  1857  001548  D7AC               	goto	l4711
  1858  00154A                     l4721:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1862  00154A  C07C  FFD9         	movff	sprintf@sp,fsr2l
  1863  00154E  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  1864  001552  0E30               	movlw	48
  1865  001554  6EDF               	movwf	indf2,c
  1866                           
  1867                           ; BSR set to: 0
  1868  001556  0100               	movlb	0	; () banked
  1869  001558  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  1870  00155A  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;doprnt.c: 1209: exp--;
  1874  00155C  0100               	movlb	0	; () banked
  1875  00155E  0796               	decf	sprintf@exp& (0+255),f,b
  1876  001560  A0D8               	btfss	status,0,c
  1877  001562  0797               	decf	(sprintf@exp+1)& (0+255),f,b
  1878  001564                     l4727:
  1879                           
  1880                           ; BSR set to: 0
  1881  001564  0100               	movlb	0	; () banked
  1882  001566  BF97               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1883  001568  D007               	goto	l4729
  1884  00156A  0100               	movlb	0	; () banked
  1885  00156C  5197               	movf	(sprintf@exp+1)& (0+255),w,b
  1886  00156E  E1ED               	bnz	l4721
  1887  001570  0100               	movlb	0	; () banked
  1888  001572  0596               	decf	sprintf@exp& (0+255),w,b
  1889  001574  B0D8               	btfsc	status,0,c
  1890  001576  D7E9               	goto	l4721
  1891  001578                     l4729:
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;doprnt.c: 1210: }
  1895                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1896  001578  0100               	movlb	0	; () banked
  1897  00157A  BF91               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1898  00157C  D00C               	goto	l724
  1899  00157E  0100               	movlb	0	; () banked
  1900  001580  5191               	movf	(sprintf@prec+1)& (0+255),w,b
  1901  001582  E105               	bnz	u4640
  1902  001584  0E09               	movlw	9
  1903  001586  0100               	movlb	0	; () banked
  1904  001588  5D90               	subwf	sprintf@prec& (0+255),w,b
  1905  00158A  A0D8               	btfss	status,0,c
  1906  00158C  D004               	goto	l724
  1907  00158E                     u4640:
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1911  00158E  0E08               	movlw	8
  1912  001590  0100               	movlb	0	; () banked
  1913  001592  6F9F               	movwf	sprintf@c& (0+255),b
  1914  001594  D002               	goto	l4733
  1915  001596                     l724:
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;doprnt.c: 1213: else
  1919                           ;doprnt.c: 1214: c = prec;
  1920  001596  C090  F09F         	movff	sprintf@prec,sprintf@c
  1921  00159A                     l4733:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;doprnt.c: 1215: prec -= c;
  1925  00159A  0100               	movlb	0	; () banked
  1926  00159C  519F               	movf	sprintf@c& (0+255),w,b
  1927  00159E  0100               	movlb	0	; () banked
  1928  0015A0  5F90               	subwf	sprintf@prec& (0+255),f,b
  1929  0015A2  0E00               	movlw	0
  1930  0015A4  0100               	movlb	0	; () banked
  1931  0015A6  BF9F               	btfsc	sprintf@c& (0+255),7,b
  1932  0015A8  0EFF               	movlw	255
  1933  0015AA  0100               	movlb	0	; () banked
  1934  0015AC  5B91               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;doprnt.c: 1219: if(c)
  1938  0015AE  0100               	movlb	0	; () banked
  1939  0015B0  519F               	movf	sprintf@c& (0+255),w,b
  1940  0015B2  0100               	movlb	0	; () banked
  1941  0015B4  B4D8               	btfsc	status,2,c
  1942  0015B6  D009               	goto	l4741
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1946  0015B8  C07C  FFD9         	movff	sprintf@sp,fsr2l
  1947  0015BC  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  1948  0015C0  0E2E               	movlw	46
  1949  0015C2  6EDF               	movwf	indf2,c
  1950                           
  1951                           ; BSR set to: 0
  1952  0015C4  0100               	movlb	0	; () banked
  1953  0015C6  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  1954  0015C8  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  1955  0015CA                     l4741:
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1959  0015CA  0100               	movlb	0	; () banked
  1960  0015CC  519F               	movf	sprintf@c& (0+255),w,b
  1961  0015CE  EC6D  F00C         	call	_scale
  1962  0015D2  C060  F089         	movff	?_scale,_sprintf$2475
  1963  0015D6  C061  F08A         	movff	?_scale+1,_sprintf$2475+1
  1964  0015DA  C062  F08B         	movff	?_scale+2,_sprintf$2475+2
  1965                           
  1966                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1967  0015DE  C09C  F02B         	movff	sprintf@fval,___ftmul@f2
  1968  0015E2  C09D  F02C         	movff	sprintf@fval+1,___ftmul@f2+1
  1969  0015E6  C09E  F02D         	movff	sprintf@fval+2,___ftmul@f2+2
  1970  0015EA  C089  F028         	movff	_sprintf$2475,___ftmul@f1
  1971  0015EE  C08A  F029         	movff	_sprintf$2475+1,___ftmul@f1+1
  1972  0015F2  C08B  F02A         	movff	_sprintf$2475+2,___ftmul@f1+2
  1973  0015F6  ECB8  F014         	call	___ftmul	;wreg free
  1974  0015FA  C028  F067         	movff	?___ftmul,___fttol@f1
  1975  0015FE  C029  F068         	movff	?___ftmul+1,___fttol@f1+1
  1976  001602  C02A  F069         	movff	?___ftmul+2,___fttol@f1+2
  1977  001606  ECE9  F012         	call	___fttol	;wreg free
  1978  00160A  C067  F092         	movff	?___fttol,sprintf@val
  1979  00160E  C068  F093         	movff	?___fttol+1,sprintf@val+1
  1980  001612  C069  F094         	movff	?___fttol+2,sprintf@val+2
  1981  001616  C06A  F095         	movff	?___fttol+3,sprintf@val+3
  1982                           
  1983                           ;doprnt.c: 1228: while(c--) {
  1984  00161A  D079               	goto	l4755
  1985  00161C                     l4745:
  1986                           
  1987                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1988  00161C  C092  F014         	movff	sprintf@val,___lldiv@dividend
  1989  001620  C093  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  1990  001624  C094  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  1991  001628  C095  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  1992  00162C  0100               	movlb	0	; () banked
  1993  00162E  519F               	movf	sprintf@c& (0+255),w,b
  1994  001630  0D04               	mullw	4
  1995  001632  0E01               	movlw	low _dpowers
  1996  001634  24F3               	addwf	prodl,w,c
  1997  001636  6EF6               	movwf	tblptrl,c
  1998  001638  0E10               	movlw	high _dpowers
  1999  00163A  20F4               	addwfc	prodh,w,c
  2000  00163C  6EF7               	movwf	tblptrh,c
  2001  00163E                     	if	1	;There are 3 active tblptr bytes
  2002  00163E  6AF8               	clrf	tblptru,c
  2003  001640  0E00               	movlw	low (__mediumconst shr (0+16))
  2004  001642  22F8               	addwfc	tblptru,f,c
  2005  001644                     	endif
  2006  001644  0009               	tblrd		*+
  2007  001646  CFF5 F018          	movff	tablat,___lldiv@divisor
  2008  00164A  0009               	tblrd		*+
  2009  00164C  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  2010  001650  0009               	tblrd		*+
  2011  001652  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  2012  001656  000A               	tblrd		*-
  2013  001658  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  2014  00165C  ECDB  F016         	call	___lldiv	;wreg free
  2015  001660  C014  F098         	movff	?___lldiv,sprintf@tmpval
  2016  001664  C015  F099         	movff	?___lldiv+1,sprintf@tmpval+1
  2017  001668  C016  F09A         	movff	?___lldiv+2,sprintf@tmpval+2
  2018  00166C  C017  F09B         	movff	?___lldiv+3,sprintf@tmpval+3
  2019                           
  2020                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2021  001670  C098  F021         	movff	sprintf@tmpval,___llmod@dividend
  2022  001674  C099  F022         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2023  001678  C09A  F023         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2024  00167C  C09B  F024         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2025  001680  0E0A               	movlw	10
  2026  001682  6E25               	movwf	___llmod@divisor,c
  2027  001684  0E00               	movlw	0
  2028  001686  6E26               	movwf	___llmod@divisor+1,c
  2029  001688  0E00               	movlw	0
  2030  00168A  6E27               	movwf	___llmod@divisor+2,c
  2031  00168C  0E00               	movlw	0
  2032  00168E  6E28               	movwf	___llmod@divisor+3,c
  2033  001690  EC54  F017         	call	___llmod	;wreg free
  2034  001694  C021  F098         	movff	?___llmod,sprintf@tmpval
  2035  001698  C022  F099         	movff	?___llmod+1,sprintf@tmpval+1
  2036  00169C  C023  F09A         	movff	?___llmod+2,sprintf@tmpval+2
  2037  0016A0  C024  F09B         	movff	?___llmod+3,sprintf@tmpval+3
  2038                           
  2039                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2040  0016A4  0100               	movlb	0	; () banked
  2041  0016A6  5198               	movf	sprintf@tmpval& (0+255),w,b
  2042  0016A8  0F30               	addlw	48
  2043  0016AA  C07C  FFD9         	movff	sprintf@sp,fsr2l
  2044  0016AE  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  2045  0016B2  6EDF               	movwf	indf2,c
  2046                           
  2047                           ; BSR set to: 0
  2048  0016B4  0100               	movlb	0	; () banked
  2049  0016B6  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  2050  0016B8  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;doprnt.c: 1232: val %= dpowers[c];
  2054  0016BA  C092  F021         	movff	sprintf@val,___llmod@dividend
  2055  0016BE  C093  F022         	movff	sprintf@val+1,___llmod@dividend+1
  2056  0016C2  C094  F023         	movff	sprintf@val+2,___llmod@dividend+2
  2057  0016C6  C095  F024         	movff	sprintf@val+3,___llmod@dividend+3
  2058  0016CA  0100               	movlb	0	; () banked
  2059  0016CC  519F               	movf	sprintf@c& (0+255),w,b
  2060  0016CE  0D04               	mullw	4
  2061  0016D0  0E01               	movlw	low _dpowers
  2062  0016D2  24F3               	addwf	prodl,w,c
  2063  0016D4  6EF6               	movwf	tblptrl,c
  2064  0016D6  0E10               	movlw	high _dpowers
  2065  0016D8  20F4               	addwfc	prodh,w,c
  2066  0016DA  6EF7               	movwf	tblptrh,c
  2067  0016DC                     	if	1	;There are 3 active tblptr bytes
  2068  0016DC  6AF8               	clrf	tblptru,c
  2069  0016DE  0E00               	movlw	low (__mediumconst shr (0+16))
  2070  0016E0  22F8               	addwfc	tblptru,f,c
  2071  0016E2                     	endif
  2072  0016E2  0009               	tblrd		*+
  2073  0016E4  CFF5 F025          	movff	tablat,___llmod@divisor
  2074  0016E8  0009               	tblrd		*+
  2075  0016EA  CFF5 F026          	movff	tablat,___llmod@divisor+1
  2076  0016EE  0009               	tblrd		*+
  2077  0016F0  CFF5 F027          	movff	tablat,___llmod@divisor+2
  2078  0016F4  000A               	tblrd		*-
  2079  0016F6  CFF5 F028          	movff	tablat,___llmod@divisor+3
  2080  0016FA  EC54  F017         	call	___llmod	;wreg free
  2081  0016FE  C021  F092         	movff	?___llmod,sprintf@val
  2082  001702  C022  F093         	movff	?___llmod+1,sprintf@val+1
  2083  001706  C023  F094         	movff	?___llmod+2,sprintf@val+2
  2084  00170A  C024  F095         	movff	?___llmod+3,sprintf@val+3
  2085  00170E                     l4755:
  2086  00170E  0100               	movlb	0	; () banked
  2087  001710  079F               	decf	sprintf@c& (0+255),f,b
  2088  001712  0100               	movlb	0	; () banked
  2089  001714  299F               	incf	sprintf@c& (0+255),w,b
  2090  001716  B4D8               	btfsc	status,2,c
  2091  001718  D00E               	goto	l4763
  2092  00171A  D780               	goto	l4745
  2093  00171C                     l4757:
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2097  00171C  C07C  FFD9         	movff	sprintf@sp,fsr2l
  2098  001720  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  2099  001724  0E30               	movlw	48
  2100  001726  6EDF               	movwf	indf2,c
  2101                           
  2102                           ; BSR set to: 0
  2103  001728  0100               	movlb	0	; () banked
  2104  00172A  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  2105  00172C  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;doprnt.c: 1237: prec--;
  2109  00172E  0100               	movlb	0	; () banked
  2110  001730  0790               	decf	sprintf@prec& (0+255),f,b
  2111  001732  A0D8               	btfss	status,0,c
  2112  001734  0791               	decf	(sprintf@prec+1)& (0+255),f,b
  2113  001736                     l4763:
  2114                           
  2115                           ; BSR set to: 0
  2116  001736  0100               	movlb	0	; () banked
  2117  001738  5190               	movf	sprintf@prec& (0+255),w,b
  2118  00173A  0100               	movlb	0	; () banked
  2119  00173C  1191               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2120  00173E  B4D8               	btfsc	status,2,c
  2121  001740  D0B5               	goto	l4799
  2122  001742  D7EC               	goto	l4757
  2123  001744                     l4765:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 1246: }
  2127                           ;doprnt.c: 1273: {
  2128                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2129  001744  C08C  FFD9         	movff	sprintf@ap,fsr2l
  2130  001748  C08D  FFDA         	movff	sprintf@ap+1,fsr2h
  2131  00174C  CFDE F083          	movff	postinc2,??_sprintf
  2132  001750  CFDD F084          	movff	postdec2,??_sprintf+1
  2133  001754  C083  F092         	movff	??_sprintf,sprintf@val
  2134  001758  C084  F093         	movff	??_sprintf+1,sprintf@val+1
  2135  00175C  0100               	movlb	0	; () banked
  2136  00175E  6B94               	clrf	(sprintf@val+2)& (0+255),b
  2137  001760  6B95               	clrf	(sprintf@val+3)& (0+255),b
  2138                           
  2139                           ; BSR set to: 0
  2140  001762  0E02               	movlw	2
  2141  001764  0100               	movlb	0	; () banked
  2142  001766  278C               	addwf	sprintf@ap& (0+255),f,b
  2143  001768  0E00               	movlw	0
  2144  00176A  238D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;doprnt.c: 1287: }
  2148                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2149  00176C  0E01               	movlw	1
  2150  00176E  0100               	movlb	0	; () banked
  2151  001770  6F9F               	movwf	sprintf@c& (0+255),b
  2152  001772                     l4771:
  2153                           
  2154                           ; BSR set to: 0
  2155  001772  0E0A               	movlw	10
  2156  001774  0100               	movlb	0	; () banked
  2157  001776  199F               	xorwf	sprintf@c& (0+255),w,b
  2158  001778  B4D8               	btfsc	status,2,c
  2159  00177A  D021               	goto	l4783
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;doprnt.c: 1306: if(val < dpowers[c])
  2163                           
  2164                           ; BSR set to: 0
  2165                           
  2166                           ; BSR set to: 0
  2167  00177C  0100               	movlb	0	; () banked
  2168  00177E  519F               	movf	sprintf@c& (0+255),w,b
  2169  001780  0D04               	mullw	4
  2170  001782  0E01               	movlw	low _dpowers
  2171  001784  24F3               	addwf	prodl,w,c
  2172  001786  6EF6               	movwf	tblptrl,c
  2173  001788  0E10               	movlw	high _dpowers
  2174  00178A  20F4               	addwfc	prodh,w,c
  2175  00178C  6EF7               	movwf	tblptrh,c
  2176  00178E                     	if	1	;There are 3 active tblptr bytes
  2177  00178E  6AF8               	clrf	tblptru,c
  2178  001790  0E00               	movlw	low (__mediumconst shr (0+16))
  2179  001792  22F8               	addwfc	tblptru,f,c
  2180  001794                     	endif
  2181  001794  0009               	tblrd		*+
  2182  001796  50F5               	movf	tablat,w,c
  2183  001798  0100               	movlb	0	; () banked
  2184  00179A  5D92               	subwf	sprintf@val& (0+255),w,b
  2185  00179C  0009               	tblrd		*+
  2186  00179E  50F5               	movf	tablat,w,c
  2187  0017A0  0100               	movlb	0	; () banked
  2188  0017A2  5993               	subwfb	(sprintf@val+1)& (0+255),w,b
  2189  0017A4  0009               	tblrd		*+
  2190  0017A6  50F5               	movf	tablat,w,c
  2191  0017A8  0100               	movlb	0	; () banked
  2192  0017AA  5994               	subwfb	(sprintf@val+2)& (0+255),w,b
  2193  0017AC  0009               	tblrd		*+
  2194  0017AE  50F5               	movf	tablat,w,c
  2195  0017B0  0100               	movlb	0	; () banked
  2196  0017B2  5995               	subwfb	(sprintf@val+3)& (0+255),w,b
  2197  0017B4  A0D8               	btfss	status,0,c
  2198  0017B6  D003               	goto	l4783
  2199                           
  2200                           ; BSR set to: 0
  2201                           
  2202                           ; BSR set to: 0
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1307: break;
  2206  0017B8  0100               	movlb	0	; () banked
  2207  0017BA  2B9F               	incf	sprintf@c& (0+255),f,b
  2208  0017BC  D7DA               	goto	l4771
  2209  0017BE                     l4783:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 1422: {
  2213                           ;doprnt.c: 1438: if(flag & 0x03)
  2214  0017BE  0E03               	movlw	3
  2215  0017C0  0100               	movlb	0	; () banked
  2216  0017C2  158E               	andwf	sprintf@flag& (0+255),w,b
  2217  0017C4  0100               	movlb	0	; () banked
  2218  0017C6  6F83               	movwf	??_sprintf& (0+255),b
  2219  0017C8  0E00               	movlw	0
  2220  0017CA  0100               	movlb	0	; () banked
  2221  0017CC  158F               	andwf	(sprintf@flag+1)& (0+255),w,b
  2222  0017CE  0100               	movlb	0	; () banked
  2223  0017D0  6F84               	movwf	(??_sprintf+1)& (0+255),b
  2224  0017D2  0100               	movlb	0	; () banked
  2225  0017D4  5183               	movf	??_sprintf& (0+255),w,b
  2226  0017D6  0100               	movlb	0	; () banked
  2227  0017D8  1184               	iorwf	(??_sprintf+1)& (0+255),w,b
  2228  0017DA  B4D8               	btfsc	status,2,c
  2229  0017DC  D009               	goto	l4789
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2233  0017DE  C07C  FFD9         	movff	sprintf@sp,fsr2l
  2234  0017E2  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  2235  0017E6  0E2D               	movlw	45
  2236  0017E8  6EDF               	movwf	indf2,c
  2237                           
  2238                           ; BSR set to: 0
  2239  0017EA  0100               	movlb	0	; () banked
  2240  0017EC  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  2241  0017EE  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  2242  0017F0                     l4789:
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;doprnt.c: 1469: }
  2246                           ;doprnt.c: 1472: prec = c;
  2247  0017F0  0100               	movlb	0	; () banked
  2248  0017F2  519F               	movf	sprintf@c& (0+255),w,b
  2249  0017F4  0100               	movlb	0	; () banked
  2250  0017F6  6F90               	movwf	sprintf@prec& (0+255),b
  2251  0017F8  6B91               	clrf	(sprintf@prec+1)& (0+255),b
  2252  0017FA  BF90               	btfsc	sprintf@prec& (0+255),7,b
  2253  0017FC  0791               	decf	(sprintf@prec+1)& (0+255),f,b
  2254                           
  2255                           ;doprnt.c: 1474: while(prec--) {
  2256  0017FE  D04B               	goto	l4797
  2257  001800                     l4791:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;doprnt.c: 1478: {
  2261                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2262  001800  C090  F083         	movff	sprintf@prec,??_sprintf
  2263  001804  C091  F084         	movff	sprintf@prec+1,??_sprintf+1
  2264  001808  0100               	movlb	0	; () banked
  2265  00180A  90D8               	bcf	status,0,c
  2266  00180C  3783               	rlcf	??_sprintf& (0+255),f,b
  2267  00180E  3784               	rlcf	(??_sprintf+1)& (0+255),f,b
  2268  001810  0100               	movlb	0	; () banked
  2269  001812  90D8               	bcf	status,0,c
  2270  001814  3783               	rlcf	??_sprintf& (0+255),f,b
  2271  001816  3784               	rlcf	(??_sprintf+1)& (0+255),f,b
  2272  001818  0E01               	movlw	low _dpowers
  2273  00181A  0100               	movlb	0	; () banked
  2274  00181C  2583               	addwf	??_sprintf& (0+255),w,b
  2275  00181E  6EF6               	movwf	tblptrl,c
  2276  001820  0E10               	movlw	high _dpowers
  2277  001822  2184               	addwfc	(??_sprintf+1)& (0+255),w,b
  2278  001824  6EF7               	movwf	tblptrh,c
  2279  001826                     	if	1	;There are 3 active tblptr bytes
  2280  001826  6AF8               	clrf	tblptru,c
  2281  001828  0E00               	movlw	low (__mediumconst shr (0+16))
  2282  00182A  22F8               	addwfc	tblptru,f,c
  2283  00182C                     	endif
  2284  00182C  0009               	tblrd		*+
  2285  00182E  CFF5 F018          	movff	tablat,___lldiv@divisor
  2286  001832  0009               	tblrd		*+
  2287  001834  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  2288  001838  0009               	tblrd		*+
  2289  00183A  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  2290  00183E  000A               	tblrd		*-
  2291  001840  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  2292  001844  C092  F014         	movff	sprintf@val,___lldiv@dividend
  2293  001848  C093  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  2294  00184C  C094  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  2295  001850  C095  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  2296  001854  ECDB  F016         	call	___lldiv	;wreg free
  2297  001858  C014  F021         	movff	?___lldiv,___llmod@dividend
  2298  00185C  C015  F022         	movff	?___lldiv+1,___llmod@dividend+1
  2299  001860  C016  F023         	movff	?___lldiv+2,___llmod@dividend+2
  2300  001864  C017  F024         	movff	?___lldiv+3,___llmod@dividend+3
  2301  001868  0E0A               	movlw	10
  2302  00186A  6E25               	movwf	___llmod@divisor,c
  2303  00186C  0E00               	movlw	0
  2304  00186E  6E26               	movwf	___llmod@divisor+1,c
  2305  001870  0E00               	movlw	0
  2306  001872  6E27               	movwf	___llmod@divisor+2,c
  2307  001874  0E00               	movlw	0
  2308  001876  6E28               	movwf	___llmod@divisor+3,c
  2309  001878  EC54  F017         	call	___llmod	;wreg free
  2310  00187C  5021               	movf	?___llmod,w,c
  2311  00187E  0F30               	addlw	48
  2312  001880  0100               	movlb	0	; () banked
  2313  001882  6F9F               	movwf	sprintf@c& (0+255),b
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;doprnt.c: 1523: }
  2317                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2318  001884  C07C  FFD9         	movff	sprintf@sp,fsr2l
  2319  001888  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  2320  00188C  C09F  FFDF         	movff	sprintf@c,indf2
  2321                           
  2322                           ; BSR set to: 0
  2323  001890  0100               	movlb	0	; () banked
  2324  001892  4B7C               	infsnz	sprintf@sp& (0+255),f,b
  2325  001894  2B7D               	incf	(sprintf@sp+1)& (0+255),f,b
  2326  001896                     l4797:
  2327                           
  2328                           ; BSR set to: 0
  2329  001896  0100               	movlb	0	; () banked
  2330  001898  0790               	decf	sprintf@prec& (0+255),f,b
  2331  00189A  A0D8               	btfss	status,0,c
  2332  00189C  0791               	decf	(sprintf@prec+1)& (0+255),f,b
  2333  00189E  0100               	movlb	0	; () banked
  2334  0018A0  2990               	incf	sprintf@prec& (0+255),w,b
  2335  0018A2  E1AE               	bnz	l4791
  2336  0018A4  0100               	movlb	0	; () banked
  2337  0018A6  2991               	incf	(sprintf@prec+1)& (0+255),w,b
  2338  0018A8  A4D8               	btfss	status,2,c
  2339  0018AA  D7AA               	goto	l4791
  2340  0018AC                     l4799:
  2341                           
  2342                           ; BSR set to: 0
  2343  0018AC  C07E  FFF6         	movff	sprintf@f,tblptrl
  2344  0018B0  C07F  FFF7         	movff	sprintf@f+1,tblptrh
  2345  0018B4  0100               	movlb	0	; () banked
  2346  0018B6  4B7E               	infsnz	sprintf@f& (0+255),f,b
  2347  0018B8  2B7F               	incf	(sprintf@f+1)& (0+255),f,b
  2348  0018BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2349  0018BA  6AF8               	clrf	tblptru,c
  2350  0018BC                     	endif
  2351  0018BC                     	if	0	;tblptru may be non-zero
  2352  0018BC                     	endif
  2353  0018BC  0008               	tblrd		*
  2354  0018BE  CFF5 F09F          	movff	tablat,sprintf@c
  2355  0018C2  0100               	movlb	0	; () banked
  2356  0018C4  519F               	movf	sprintf@c& (0+255),w,b
  2357  0018C6  A4D8               	btfss	status,2,c
  2358  0018C8  EF47  F008         	goto	l4603
  2359  0018CC                     l4801:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;doprnt.c: 1538: *sp = 0;
  2363  0018CC  C07C  FFD9         	movff	sprintf@sp,fsr2l
  2364  0018D0  C07D  FFDA         	movff	sprintf@sp+1,fsr2h
  2365  0018D4  0E00               	movlw	0
  2366  0018D6  6EDF               	movwf	indf2,c
  2367  0018D8  0012               	return	
  2368  0018DA                     __end_of_sprintf:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           prodh	equ	0xFF4
  2375                           prodl	equ	0xFF3
  2376                           intcon	equ	0xFF2
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _scale *****************
  2387 ;; Defined at:
  2388 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  scl             1    wreg     char 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  scl             1    6[BANK0 ] char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  3    0[BANK0 ] char 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2402 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;Total ram usage:        7 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    5
  2409 ;; This function calls:
  2410 ;;		___awdiv
  2411 ;;		___awmod
  2412 ;;		___ftmul
  2413 ;;		___wmul
  2414 ;; This function is called by:
  2415 ;;		_sprintf
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text3
  2420  0018DA                     __ptext3:
  2421                           	opt stack 0
  2422  0018DA                     _scale:
  2423                           	opt stack 23
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;incstack = 0
  2427                           ;scale@scl stored from wreg
  2428  0018DA  0100               	movlb	0	; () banked
  2429  0018DC  6F66               	movwf	scale@scl& (0+255),b
  2430                           
  2431                           ;doprnt.c: 428: if(scl < 0) {
  2432  0018DE  0100               	movlb	0	; () banked
  2433  0018E0  AF66               	btfss	scale@scl& (0+255),7,b
  2434  0018E2  D116               	goto	l4519
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 429: scl = -scl;
  2438  0018E4  0100               	movlb	0	; () banked
  2439  0018E6  6D66               	negf	scale@scl& (0+255),b
  2440                           
  2441                           ;doprnt.c: 430: if(scl>=110)
  2442  0018E8  0100               	movlb	0	; () banked
  2443  0018EA  5166               	movf	scale@scl& (0+255),w,b
  2444  0018EC  0A80               	xorlw	128
  2445  0018EE  0F12               	addlw	-238
  2446  0018F0  A0D8               	btfss	status,0,c
  2447  0018F2  D09D               	goto	l4509
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2451  0018F4  0E00               	movlw	0
  2452  0018F6  6E25               	movwf	___wmul@multiplicand+1,c
  2453  0018F8  0E03               	movlw	3
  2454  0018FA  6E24               	movwf	___wmul@multiplicand,c
  2455  0018FC  0E00               	movlw	0
  2456  0018FE  6E1D               	movwf	___awdiv@divisor+1,c
  2457  001900  0E0A               	movlw	10
  2458  001902  6E1C               	movwf	___awdiv@divisor,c
  2459  001904  0E00               	movlw	0
  2460  001906  6E17               	movwf	___awmod@divisor+1,c
  2461  001908  0E64               	movlw	100
  2462  00190A  6E16               	movwf	___awmod@divisor,c
  2463  00190C  0100               	movlb	0	; () banked
  2464  00190E  5166               	movf	scale@scl& (0+255),w,b
  2465  001910  6E14               	movwf	___awmod@dividend,c
  2466  001912  6A15               	clrf	___awmod@dividend+1,c
  2467  001914  BE14               	btfsc	___awmod@dividend,7,c
  2468  001916  0615               	decf	___awmod@dividend+1,f,c
  2469  001918  EC1C  F017         	call	___awmod	;wreg free
  2470  00191C  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2471  001920  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2472  001924  EC57  F016         	call	___awdiv	;wreg free
  2473  001928  0E09               	movlw	9
  2474  00192A  241A               	addwf	?___awdiv,w,c
  2475  00192C  6E22               	movwf	___wmul@multiplier,c
  2476  00192E  0E00               	movlw	0
  2477  001930  201B               	addwfc	?___awdiv+1,w,c
  2478  001932  6E23               	movwf	___wmul@multiplier+1,c
  2479  001934  ECBD  F018         	call	___wmul	;wreg free
  2480  001938  0E50               	movlw	low __npowers_
  2481  00193A  2422               	addwf	?___wmul,w,c
  2482  00193C  6EF6               	movwf	tblptrl,c
  2483  00193E  0E10               	movlw	high __npowers_
  2484  001940  2023               	addwfc	?___wmul+1,w,c
  2485  001942  6EF7               	movwf	tblptrh,c
  2486  001944                     	if	1	;There are 3 active tblptr bytes
  2487  001944  6AF8               	clrf	tblptru,c
  2488  001946  0E00               	movlw	low (__mediumconst shr (0+16))
  2489  001948  22F8               	addwfc	tblptru,f,c
  2490  00194A                     	endif
  2491  00194A  0009               	tblrd		*+
  2492  00194C  CFF5 F02B          	movff	tablat,___ftmul@f2
  2493  001950  0009               	tblrd		*+
  2494  001952  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2495  001956  000A               	tblrd		*-
  2496  001958  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2497  00195C  0E00               	movlw	0
  2498  00195E  6E1D               	movwf	___awdiv@divisor+1,c
  2499  001960  0E64               	movlw	100
  2500  001962  6E1C               	movwf	___awdiv@divisor,c
  2501  001964  0100               	movlb	0	; () banked
  2502  001966  5166               	movf	scale@scl& (0+255),w,b
  2503  001968  6E1A               	movwf	___awdiv@dividend,c
  2504  00196A  6A1B               	clrf	___awdiv@dividend+1,c
  2505  00196C  BE1A               	btfsc	___awdiv@dividend,7,c
  2506  00196E  061B               	decf	___awdiv@dividend+1,f,c
  2507  001970  EC57  F016         	call	___awdiv	;wreg free
  2508  001974  0E12               	movlw	18
  2509  001976  241A               	addwf	?___awdiv,w,c
  2510  001978  6E22               	movwf	___wmul@multiplier,c
  2511  00197A  0E00               	movlw	0
  2512  00197C  201B               	addwfc	?___awdiv+1,w,c
  2513  00197E  6E23               	movwf	___wmul@multiplier+1,c
  2514  001980  0E00               	movlw	0
  2515  001982  6E25               	movwf	___wmul@multiplicand+1,c
  2516  001984  0E03               	movlw	3
  2517  001986  6E24               	movwf	___wmul@multiplicand,c
  2518  001988  ECBD  F018         	call	___wmul	;wreg free
  2519  00198C  0E50               	movlw	low __npowers_
  2520  00198E  2422               	addwf	?___wmul,w,c
  2521  001990  6EF6               	movwf	tblptrl,c
  2522  001992  0E10               	movlw	high __npowers_
  2523  001994  2023               	addwfc	?___wmul+1,w,c
  2524  001996  6EF7               	movwf	tblptrh,c
  2525  001998                     	if	1	;There are 3 active tblptr bytes
  2526  001998  6AF8               	clrf	tblptru,c
  2527  00199A  0E00               	movlw	low (__mediumconst shr (0+16))
  2528  00199C  22F8               	addwfc	tblptru,f,c
  2529  00199E                     	endif
  2530  00199E  0009               	tblrd		*+
  2531  0019A0  CFF5 F028          	movff	tablat,___ftmul@f1
  2532  0019A4  0009               	tblrd		*+
  2533  0019A6  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2534  0019AA  000A               	tblrd		*-
  2535  0019AC  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2536  0019B0  ECB8  F014         	call	___ftmul	;wreg free
  2537  0019B4  C028  F063         	movff	?___ftmul,_scale$2474
  2538  0019B8  C029  F064         	movff	?___ftmul+1,_scale$2474+1
  2539  0019BC  C02A  F065         	movff	?___ftmul+2,_scale$2474+2
  2540                           
  2541                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2542  0019C0  C063  F028         	movff	_scale$2474,___ftmul@f1
  2543  0019C4  C064  F029         	movff	_scale$2474+1,___ftmul@f1+1
  2544  0019C8  C065  F02A         	movff	_scale$2474+2,___ftmul@f1+2
  2545  0019CC  0E00               	movlw	0
  2546  0019CE  6E25               	movwf	___wmul@multiplicand+1,c
  2547  0019D0  0E03               	movlw	3
  2548  0019D2  6E24               	movwf	___wmul@multiplicand,c
  2549  0019D4  0E00               	movlw	0
  2550  0019D6  6E17               	movwf	___awmod@divisor+1,c
  2551  0019D8  0E0A               	movlw	10
  2552  0019DA  6E16               	movwf	___awmod@divisor,c
  2553  0019DC  0100               	movlb	0	; () banked
  2554  0019DE  5166               	movf	scale@scl& (0+255),w,b
  2555  0019E0  6E14               	movwf	___awmod@dividend,c
  2556  0019E2  6A15               	clrf	___awmod@dividend+1,c
  2557  0019E4  BE14               	btfsc	___awmod@dividend,7,c
  2558  0019E6  0615               	decf	___awmod@dividend+1,f,c
  2559  0019E8  EC1C  F017         	call	___awmod	;wreg free
  2560  0019EC  C014  F022         	movff	?___awmod,___wmul@multiplier
  2561  0019F0  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2562  0019F4  ECBD  F018         	call	___wmul	;wreg free
  2563  0019F8  0E50               	movlw	low __npowers_
  2564  0019FA  2422               	addwf	?___wmul,w,c
  2565  0019FC  6EF6               	movwf	tblptrl,c
  2566  0019FE  0E10               	movlw	high __npowers_
  2567  001A00  2023               	addwfc	?___wmul+1,w,c
  2568  001A02  6EF7               	movwf	tblptrh,c
  2569  001A04                     	if	1	;There are 3 active tblptr bytes
  2570  001A04  6AF8               	clrf	tblptru,c
  2571  001A06  0E00               	movlw	low (__mediumconst shr (0+16))
  2572  001A08  22F8               	addwfc	tblptru,f,c
  2573  001A0A                     	endif
  2574  001A0A  0009               	tblrd		*+
  2575  001A0C  CFF5 F02B          	movff	tablat,___ftmul@f2
  2576  001A10  0009               	tblrd		*+
  2577  001A12  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2578  001A16  000A               	tblrd		*-
  2579  001A18  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2580  001A1C  ECB8  F014         	call	___ftmul	;wreg free
  2581  001A20  C028  F060         	movff	?___ftmul,?_scale
  2582  001A24  C029  F061         	movff	?___ftmul+1,?_scale+1
  2583  001A28  C02A  F062         	movff	?___ftmul+2,?_scale+2
  2584  001A2C  0012               	return	
  2585  001A2E                     l4509:
  2586                           
  2587                           ;doprnt.c: 432: else if(scl > 10)
  2588  001A2E  0100               	movlb	0	; () banked
  2589  001A30  5166               	movf	scale@scl& (0+255),w,b
  2590  001A32  0A80               	xorlw	128
  2591  001A34  0F75               	addlw	-139
  2592  001A36  A0D8               	btfss	status,0,c
  2593  001A38  D055               	goto	l4515
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2597  001A3A  0E00               	movlw	0
  2598  001A3C  6E1D               	movwf	___awdiv@divisor+1,c
  2599  001A3E  0E0A               	movlw	10
  2600  001A40  6E1C               	movwf	___awdiv@divisor,c
  2601  001A42  0100               	movlb	0	; () banked
  2602  001A44  5166               	movf	scale@scl& (0+255),w,b
  2603  001A46  6E1A               	movwf	___awdiv@dividend,c
  2604  001A48  6A1B               	clrf	___awdiv@dividend+1,c
  2605  001A4A  BE1A               	btfsc	___awdiv@dividend,7,c
  2606  001A4C  061B               	decf	___awdiv@dividend+1,f,c
  2607  001A4E  EC57  F016         	call	___awdiv	;wreg free
  2608  001A52  0E09               	movlw	9
  2609  001A54  241A               	addwf	?___awdiv,w,c
  2610  001A56  6E22               	movwf	___wmul@multiplier,c
  2611  001A58  0E00               	movlw	0
  2612  001A5A  201B               	addwfc	?___awdiv+1,w,c
  2613  001A5C  6E23               	movwf	___wmul@multiplier+1,c
  2614  001A5E  0E00               	movlw	0
  2615  001A60  6E25               	movwf	___wmul@multiplicand+1,c
  2616  001A62  0E03               	movlw	3
  2617  001A64  6E24               	movwf	___wmul@multiplicand,c
  2618  001A66  ECBD  F018         	call	___wmul	;wreg free
  2619  001A6A  0E50               	movlw	low __npowers_
  2620  001A6C  2422               	addwf	?___wmul,w,c
  2621  001A6E  6EF6               	movwf	tblptrl,c
  2622  001A70  0E10               	movlw	high __npowers_
  2623  001A72  2023               	addwfc	?___wmul+1,w,c
  2624  001A74  6EF7               	movwf	tblptrh,c
  2625  001A76                     	if	1	;There are 3 active tblptr bytes
  2626  001A76  6AF8               	clrf	tblptru,c
  2627  001A78  0E00               	movlw	low (__mediumconst shr (0+16))
  2628  001A7A  22F8               	addwfc	tblptru,f,c
  2629  001A7C                     	endif
  2630  001A7C  0009               	tblrd		*+
  2631  001A7E  CFF5 F028          	movff	tablat,___ftmul@f1
  2632  001A82  0009               	tblrd		*+
  2633  001A84  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2634  001A88  000A               	tblrd		*-
  2635  001A8A  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2636  001A8E  0E00               	movlw	0
  2637  001A90  6E25               	movwf	___wmul@multiplicand+1,c
  2638  001A92  0E03               	movlw	3
  2639  001A94  6E24               	movwf	___wmul@multiplicand,c
  2640  001A96  0E00               	movlw	0
  2641  001A98  6E17               	movwf	___awmod@divisor+1,c
  2642  001A9A  0E0A               	movlw	10
  2643  001A9C  6E16               	movwf	___awmod@divisor,c
  2644  001A9E  0100               	movlb	0	; () banked
  2645  001AA0  5166               	movf	scale@scl& (0+255),w,b
  2646  001AA2  6E14               	movwf	___awmod@dividend,c
  2647  001AA4  6A15               	clrf	___awmod@dividend+1,c
  2648  001AA6  BE14               	btfsc	___awmod@dividend,7,c
  2649  001AA8  0615               	decf	___awmod@dividend+1,f,c
  2650  001AAA  EC1C  F017         	call	___awmod	;wreg free
  2651  001AAE  C014  F022         	movff	?___awmod,___wmul@multiplier
  2652  001AB2  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2653  001AB6  ECBD  F018         	call	___wmul	;wreg free
  2654  001ABA  0E50               	movlw	low __npowers_
  2655  001ABC  2422               	addwf	?___wmul,w,c
  2656  001ABE  6EF6               	movwf	tblptrl,c
  2657  001AC0  0E10               	movlw	high __npowers_
  2658  001AC2  2023               	addwfc	?___wmul+1,w,c
  2659  001AC4  6EF7               	movwf	tblptrh,c
  2660  001AC6                     	if	1	;There are 3 active tblptr bytes
  2661  001AC6  6AF8               	clrf	tblptru,c
  2662  001AC8  0E00               	movlw	low (__mediumconst shr (0+16))
  2663  001ACA  22F8               	addwfc	tblptru,f,c
  2664  001ACC                     	endif
  2665  001ACC  0009               	tblrd		*+
  2666  001ACE  CFF5 F02B          	movff	tablat,___ftmul@f2
  2667  001AD2  0009               	tblrd		*+
  2668  001AD4  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2669  001AD8  000A               	tblrd		*-
  2670  001ADA  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2671  001ADE  ECB8  F014         	call	___ftmul	;wreg free
  2672  001AE2  D79E               	goto	L3
  2673  001AE4                     l4515:
  2674                           
  2675                           ;doprnt.c: 434: return _npowers_[scl];
  2676  001AE4  0100               	movlb	0	; () banked
  2677  001AE6  5166               	movf	scale@scl& (0+255),w,b
  2678  001AE8  0D03               	mullw	3
  2679  001AEA  0E50               	movlw	low __npowers_
  2680  001AEC  24F3               	addwf	prodl,w,c
  2681  001AEE  6EF6               	movwf	tblptrl,c
  2682  001AF0  0E10               	movlw	high __npowers_
  2683  001AF2  20F4               	addwfc	prodh,w,c
  2684  001AF4  6EF7               	movwf	tblptrh,c
  2685  001AF6                     	if	1	;There are 3 active tblptr bytes
  2686  001AF6  6AF8               	clrf	tblptru,c
  2687  001AF8  0E00               	movlw	low (__mediumconst shr (0+16))
  2688  001AFA  22F8               	addwfc	tblptru,f,c
  2689  001AFC                     	endif
  2690  001AFC  0009               	tblrd		*+
  2691  001AFE  CFF5 F060          	movff	tablat,?_scale
  2692  001B02  0009               	tblrd		*+
  2693  001B04  CFF5 F061          	movff	tablat,?_scale+1
  2694  001B08  000A               	tblrd		*-
  2695  001B0A  CFF5 F062          	movff	tablat,?_scale+2
  2696                           
  2697                           ; BSR set to: 0
  2698  001B0E  0012               	return	
  2699  001B10                     l4519:
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;doprnt.c: 435: }
  2703                           ;doprnt.c: 436: if(scl>=110)
  2704  001B10  0100               	movlb	0	; () banked
  2705  001B12  5166               	movf	scale@scl& (0+255),w,b
  2706  001B14  0A80               	xorlw	128
  2707  001B16  0F12               	addlw	-238
  2708  001B18  A0D8               	btfss	status,0,c
  2709  001B1A  D09D               	goto	l4527
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2713  001B1C  0E00               	movlw	0
  2714  001B1E  6E25               	movwf	___wmul@multiplicand+1,c
  2715  001B20  0E03               	movlw	3
  2716  001B22  6E24               	movwf	___wmul@multiplicand,c
  2717  001B24  0E00               	movlw	0
  2718  001B26  6E1D               	movwf	___awdiv@divisor+1,c
  2719  001B28  0E0A               	movlw	10
  2720  001B2A  6E1C               	movwf	___awdiv@divisor,c
  2721  001B2C  0E00               	movlw	0
  2722  001B2E  6E17               	movwf	___awmod@divisor+1,c
  2723  001B30  0E64               	movlw	100
  2724  001B32  6E16               	movwf	___awmod@divisor,c
  2725  001B34  0100               	movlb	0	; () banked
  2726  001B36  5166               	movf	scale@scl& (0+255),w,b
  2727  001B38  6E14               	movwf	___awmod@dividend,c
  2728  001B3A  6A15               	clrf	___awmod@dividend+1,c
  2729  001B3C  BE14               	btfsc	___awmod@dividend,7,c
  2730  001B3E  0615               	decf	___awmod@dividend+1,f,c
  2731  001B40  EC1C  F017         	call	___awmod	;wreg free
  2732  001B44  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2733  001B48  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2734  001B4C  EC57  F016         	call	___awdiv	;wreg free
  2735  001B50  0E09               	movlw	9
  2736  001B52  241A               	addwf	?___awdiv,w,c
  2737  001B54  6E22               	movwf	___wmul@multiplier,c
  2738  001B56  0E00               	movlw	0
  2739  001B58  201B               	addwfc	?___awdiv+1,w,c
  2740  001B5A  6E23               	movwf	___wmul@multiplier+1,c
  2741  001B5C  ECBD  F018         	call	___wmul	;wreg free
  2742  001B60  0E29               	movlw	low __powers_
  2743  001B62  2422               	addwf	?___wmul,w,c
  2744  001B64  6EF6               	movwf	tblptrl,c
  2745  001B66  0E10               	movlw	high __powers_
  2746  001B68  2023               	addwfc	?___wmul+1,w,c
  2747  001B6A  6EF7               	movwf	tblptrh,c
  2748  001B6C                     	if	1	;There are 3 active tblptr bytes
  2749  001B6C  6AF8               	clrf	tblptru,c
  2750  001B6E  0E00               	movlw	low (__mediumconst shr (0+16))
  2751  001B70  22F8               	addwfc	tblptru,f,c
  2752  001B72                     	endif
  2753  001B72  0009               	tblrd		*+
  2754  001B74  CFF5 F02B          	movff	tablat,___ftmul@f2
  2755  001B78  0009               	tblrd		*+
  2756  001B7A  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2757  001B7E  000A               	tblrd		*-
  2758  001B80  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2759  001B84  0E00               	movlw	0
  2760  001B86  6E1D               	movwf	___awdiv@divisor+1,c
  2761  001B88  0E64               	movlw	100
  2762  001B8A  6E1C               	movwf	___awdiv@divisor,c
  2763  001B8C  0100               	movlb	0	; () banked
  2764  001B8E  5166               	movf	scale@scl& (0+255),w,b
  2765  001B90  6E1A               	movwf	___awdiv@dividend,c
  2766  001B92  6A1B               	clrf	___awdiv@dividend+1,c
  2767  001B94  BE1A               	btfsc	___awdiv@dividend,7,c
  2768  001B96  061B               	decf	___awdiv@dividend+1,f,c
  2769  001B98  EC57  F016         	call	___awdiv	;wreg free
  2770  001B9C  0E12               	movlw	18
  2771  001B9E  241A               	addwf	?___awdiv,w,c
  2772  001BA0  6E22               	movwf	___wmul@multiplier,c
  2773  001BA2  0E00               	movlw	0
  2774  001BA4  201B               	addwfc	?___awdiv+1,w,c
  2775  001BA6  6E23               	movwf	___wmul@multiplier+1,c
  2776  001BA8  0E00               	movlw	0
  2777  001BAA  6E25               	movwf	___wmul@multiplicand+1,c
  2778  001BAC  0E03               	movlw	3
  2779  001BAE  6E24               	movwf	___wmul@multiplicand,c
  2780  001BB0  ECBD  F018         	call	___wmul	;wreg free
  2781  001BB4  0E29               	movlw	low __powers_
  2782  001BB6  2422               	addwf	?___wmul,w,c
  2783  001BB8  6EF6               	movwf	tblptrl,c
  2784  001BBA  0E10               	movlw	high __powers_
  2785  001BBC  2023               	addwfc	?___wmul+1,w,c
  2786  001BBE  6EF7               	movwf	tblptrh,c
  2787  001BC0                     	if	1	;There are 3 active tblptr bytes
  2788  001BC0  6AF8               	clrf	tblptru,c
  2789  001BC2  0E00               	movlw	low (__mediumconst shr (0+16))
  2790  001BC4  22F8               	addwfc	tblptru,f,c
  2791  001BC6                     	endif
  2792  001BC6  0009               	tblrd		*+
  2793  001BC8  CFF5 F028          	movff	tablat,___ftmul@f1
  2794  001BCC  0009               	tblrd		*+
  2795  001BCE  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2796  001BD2  000A               	tblrd		*-
  2797  001BD4  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2798  001BD8  ECB8  F014         	call	___ftmul	;wreg free
  2799  001BDC  C028  F063         	movff	?___ftmul,_scale$2474
  2800  001BE0  C029  F064         	movff	?___ftmul+1,_scale$2474+1
  2801  001BE4  C02A  F065         	movff	?___ftmul+2,_scale$2474+2
  2802                           
  2803                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2804  001BE8  C063  F028         	movff	_scale$2474,___ftmul@f1
  2805  001BEC  C064  F029         	movff	_scale$2474+1,___ftmul@f1+1
  2806  001BF0  C065  F02A         	movff	_scale$2474+2,___ftmul@f1+2
  2807  001BF4  0E00               	movlw	0
  2808  001BF6  6E25               	movwf	___wmul@multiplicand+1,c
  2809  001BF8  0E03               	movlw	3
  2810  001BFA  6E24               	movwf	___wmul@multiplicand,c
  2811  001BFC  0E00               	movlw	0
  2812  001BFE  6E17               	movwf	___awmod@divisor+1,c
  2813  001C00  0E0A               	movlw	10
  2814  001C02  6E16               	movwf	___awmod@divisor,c
  2815  001C04  0100               	movlb	0	; () banked
  2816  001C06  5166               	movf	scale@scl& (0+255),w,b
  2817  001C08  6E14               	movwf	___awmod@dividend,c
  2818  001C0A  6A15               	clrf	___awmod@dividend+1,c
  2819  001C0C  BE14               	btfsc	___awmod@dividend,7,c
  2820  001C0E  0615               	decf	___awmod@dividend+1,f,c
  2821  001C10  EC1C  F017         	call	___awmod	;wreg free
  2822  001C14  C014  F022         	movff	?___awmod,___wmul@multiplier
  2823  001C18  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2824  001C1C  ECBD  F018         	call	___wmul	;wreg free
  2825  001C20  0E29               	movlw	low __powers_
  2826  001C22  2422               	addwf	?___wmul,w,c
  2827  001C24  6EF6               	movwf	tblptrl,c
  2828  001C26  0E10               	movlw	high __powers_
  2829  001C28  2023               	addwfc	?___wmul+1,w,c
  2830  001C2A  6EF7               	movwf	tblptrh,c
  2831  001C2C                     	if	1	;There are 3 active tblptr bytes
  2832  001C2C  6AF8               	clrf	tblptru,c
  2833  001C2E  0E00               	movlw	low (__mediumconst shr (0+16))
  2834  001C30  22F8               	addwfc	tblptru,f,c
  2835  001C32                     	endif
  2836  001C32  0009               	tblrd		*+
  2837  001C34  CFF5 F02B          	movff	tablat,___ftmul@f2
  2838  001C38  0009               	tblrd		*+
  2839  001C3A  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2840  001C3E  000A               	tblrd		*-
  2841  001C40  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2842  001C44  ECB8  F014         	call	___ftmul	;wreg free
  2843  001C48  C028  F060         	movff	?___ftmul,?_scale
  2844  001C4C  C029  F061         	movff	?___ftmul+1,?_scale+1
  2845  001C50  C02A  F062         	movff	?___ftmul+2,?_scale+2
  2846  001C54  0012               	return	
  2847  001C56                     l4527:
  2848                           
  2849                           ;doprnt.c: 438: else if(scl > 10)
  2850  001C56  0100               	movlb	0	; () banked
  2851  001C58  5166               	movf	scale@scl& (0+255),w,b
  2852  001C5A  0A80               	xorlw	128
  2853  001C5C  0F75               	addlw	-139
  2854  001C5E  A0D8               	btfss	status,0,c
  2855  001C60  D055               	goto	l4533
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2859  001C62  0E00               	movlw	0
  2860  001C64  6E1D               	movwf	___awdiv@divisor+1,c
  2861  001C66  0E0A               	movlw	10
  2862  001C68  6E1C               	movwf	___awdiv@divisor,c
  2863  001C6A  0100               	movlb	0	; () banked
  2864  001C6C  5166               	movf	scale@scl& (0+255),w,b
  2865  001C6E  6E1A               	movwf	___awdiv@dividend,c
  2866  001C70  6A1B               	clrf	___awdiv@dividend+1,c
  2867  001C72  BE1A               	btfsc	___awdiv@dividend,7,c
  2868  001C74  061B               	decf	___awdiv@dividend+1,f,c
  2869  001C76  EC57  F016         	call	___awdiv	;wreg free
  2870  001C7A  0E09               	movlw	9
  2871  001C7C  241A               	addwf	?___awdiv,w,c
  2872  001C7E  6E22               	movwf	___wmul@multiplier,c
  2873  001C80  0E00               	movlw	0
  2874  001C82  201B               	addwfc	?___awdiv+1,w,c
  2875  001C84  6E23               	movwf	___wmul@multiplier+1,c
  2876  001C86  0E00               	movlw	0
  2877  001C88  6E25               	movwf	___wmul@multiplicand+1,c
  2878  001C8A  0E03               	movlw	3
  2879  001C8C  6E24               	movwf	___wmul@multiplicand,c
  2880  001C8E  ECBD  F018         	call	___wmul	;wreg free
  2881  001C92  0E29               	movlw	low __powers_
  2882  001C94  2422               	addwf	?___wmul,w,c
  2883  001C96  6EF6               	movwf	tblptrl,c
  2884  001C98  0E10               	movlw	high __powers_
  2885  001C9A  2023               	addwfc	?___wmul+1,w,c
  2886  001C9C  6EF7               	movwf	tblptrh,c
  2887  001C9E                     	if	1	;There are 3 active tblptr bytes
  2888  001C9E  6AF8               	clrf	tblptru,c
  2889  001CA0  0E00               	movlw	low (__mediumconst shr (0+16))
  2890  001CA2  22F8               	addwfc	tblptru,f,c
  2891  001CA4                     	endif
  2892  001CA4  0009               	tblrd		*+
  2893  001CA6  CFF5 F028          	movff	tablat,___ftmul@f1
  2894  001CAA  0009               	tblrd		*+
  2895  001CAC  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2896  001CB0  000A               	tblrd		*-
  2897  001CB2  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2898  001CB6  0E00               	movlw	0
  2899  001CB8  6E25               	movwf	___wmul@multiplicand+1,c
  2900  001CBA  0E03               	movlw	3
  2901  001CBC  6E24               	movwf	___wmul@multiplicand,c
  2902  001CBE  0E00               	movlw	0
  2903  001CC0  6E17               	movwf	___awmod@divisor+1,c
  2904  001CC2  0E0A               	movlw	10
  2905  001CC4  6E16               	movwf	___awmod@divisor,c
  2906  001CC6  0100               	movlb	0	; () banked
  2907  001CC8  5166               	movf	scale@scl& (0+255),w,b
  2908  001CCA  6E14               	movwf	___awmod@dividend,c
  2909  001CCC  6A15               	clrf	___awmod@dividend+1,c
  2910  001CCE  BE14               	btfsc	___awmod@dividend,7,c
  2911  001CD0  0615               	decf	___awmod@dividend+1,f,c
  2912  001CD2  EC1C  F017         	call	___awmod	;wreg free
  2913  001CD6  C014  F022         	movff	?___awmod,___wmul@multiplier
  2914  001CDA  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2915  001CDE  ECBD  F018         	call	___wmul	;wreg free
  2916  001CE2  0E29               	movlw	low __powers_
  2917  001CE4  2422               	addwf	?___wmul,w,c
  2918  001CE6  6EF6               	movwf	tblptrl,c
  2919  001CE8  0E10               	movlw	high __powers_
  2920  001CEA  2023               	addwfc	?___wmul+1,w,c
  2921  001CEC  6EF7               	movwf	tblptrh,c
  2922  001CEE                     	if	1	;There are 3 active tblptr bytes
  2923  001CEE  6AF8               	clrf	tblptru,c
  2924  001CF0  0E00               	movlw	low (__mediumconst shr (0+16))
  2925  001CF2  22F8               	addwfc	tblptru,f,c
  2926  001CF4                     	endif
  2927  001CF4  0009               	tblrd		*+
  2928  001CF6  CFF5 F02B          	movff	tablat,___ftmul@f2
  2929  001CFA  0009               	tblrd		*+
  2930  001CFC  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2931  001D00  000A               	tblrd		*-
  2932  001D02  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2933  001D06  ECB8  F014         	call	___ftmul	;wreg free
  2934  001D0A  D79E               	goto	L4
  2935  001D0C                     l4533:
  2936                           
  2937                           ;doprnt.c: 440: return _powers_[scl];
  2938  001D0C  0100               	movlb	0	; () banked
  2939  001D0E  5166               	movf	scale@scl& (0+255),w,b
  2940  001D10  0D03               	mullw	3
  2941  001D12  0E29               	movlw	low __powers_
  2942  001D14  24F3               	addwf	prodl,w,c
  2943  001D16  6EF6               	movwf	tblptrl,c
  2944  001D18  0E10               	movlw	high __powers_
  2945  001D1A  20F4               	addwfc	prodh,w,c
  2946  001D1C  6EF7               	movwf	tblptrh,c
  2947  001D1E                     	if	1	;There are 3 active tblptr bytes
  2948  001D1E  6AF8               	clrf	tblptru,c
  2949  001D20  0E00               	movlw	low (__mediumconst shr (0+16))
  2950  001D22  22F8               	addwfc	tblptru,f,c
  2951  001D24                     	endif
  2952  001D24  0009               	tblrd		*+
  2953  001D26  CFF5 F060          	movff	tablat,?_scale
  2954  001D2A  0009               	tblrd		*+
  2955  001D2C  CFF5 F061          	movff	tablat,?_scale+1
  2956  001D30  000A               	tblrd		*-
  2957  001D32  CFF5 F062          	movff	tablat,?_scale+2
  2958  001D36  0012               	return	
  2959  001D38                     __end_of_scale:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           prodh	equ	0xFF4
  2966                           prodl	equ	0xFF3
  2967                           intcon	equ	0xFF2
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           postdec2	equ	0xFDD
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _fround *****************
  2978 ;; Defined at:
  2979 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  prec            1    wreg     unsigned char 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  prec            1    9[BANK0 ] unsigned char 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  3    0[BANK0 ] unsigned char 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2993 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;Total ram usage:       10 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    5
  3000 ;; This function calls:
  3001 ;;		___awdiv
  3002 ;;		___awmod
  3003 ;;		___ftmul
  3004 ;;		___wmul
  3005 ;; This function is called by:
  3006 ;;		_sprintf
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text4
  3011  001D38                     __ptext4:
  3012                           	opt stack 0
  3013  001D38                     _fround:
  3014                           	opt stack 23
  3015                           
  3016                           ;incstack = 0
  3017                           ;fround@prec stored from wreg
  3018  001D38  0100               	movlb	0	; () banked
  3019  001D3A  6F69               	movwf	fround@prec& (0+255),b
  3020                           
  3021                           ;doprnt.c: 413: if(prec>=110)
  3022  001D3C  0E6D               	movlw	109
  3023  001D3E  0100               	movlb	0	; () banked
  3024  001D40  6569               	cpfsgt	fround@prec& (0+255),b
  3025  001D42  D0A8               	goto	l4487
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3029  001D44  0E00               	movlw	0
  3030  001D46  6E25               	movwf	___wmul@multiplicand+1,c
  3031  001D48  0E03               	movlw	3
  3032  001D4A  6E24               	movwf	___wmul@multiplicand,c
  3033  001D4C  0E00               	movlw	0
  3034  001D4E  6E1D               	movwf	___awdiv@divisor+1,c
  3035  001D50  0E0A               	movlw	10
  3036  001D52  6E1C               	movwf	___awdiv@divisor,c
  3037  001D54  0E00               	movlw	0
  3038  001D56  6E17               	movwf	___awmod@divisor+1,c
  3039  001D58  0E64               	movlw	100
  3040  001D5A  6E16               	movwf	___awmod@divisor,c
  3041  001D5C  C069  F014         	movff	fround@prec,___awmod@dividend
  3042  001D60  6A15               	clrf	___awmod@dividend+1,c
  3043  001D62  EC1C  F017         	call	___awmod	;wreg free
  3044  001D66  C014  F01A         	movff	?___awmod,___awdiv@dividend
  3045  001D6A  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  3046  001D6E  EC57  F016         	call	___awdiv	;wreg free
  3047  001D72  0E09               	movlw	9
  3048  001D74  241A               	addwf	?___awdiv,w,c
  3049  001D76  6E22               	movwf	___wmul@multiplier,c
  3050  001D78  0E00               	movlw	0
  3051  001D7A  201B               	addwfc	?___awdiv+1,w,c
  3052  001D7C  6E23               	movwf	___wmul@multiplier+1,c
  3053  001D7E  ECBD  F018         	call	___wmul	;wreg free
  3054  001D82  0E50               	movlw	low __npowers_
  3055  001D84  2422               	addwf	?___wmul,w,c
  3056  001D86  6EF6               	movwf	tblptrl,c
  3057  001D88  0E10               	movlw	high __npowers_
  3058  001D8A  2023               	addwfc	?___wmul+1,w,c
  3059  001D8C  6EF7               	movwf	tblptrh,c
  3060  001D8E                     	if	1	;There are 3 active tblptr bytes
  3061  001D8E  6AF8               	clrf	tblptru,c
  3062  001D90  0E00               	movlw	low (__mediumconst shr (0+16))
  3063  001D92  22F8               	addwfc	tblptru,f,c
  3064  001D94                     	endif
  3065  001D94  0009               	tblrd		*+
  3066  001D96  CFF5 F02B          	movff	tablat,___ftmul@f2
  3067  001D9A  0009               	tblrd		*+
  3068  001D9C  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  3069  001DA0  000A               	tblrd		*-
  3070  001DA2  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  3071  001DA6  0E00               	movlw	0
  3072  001DA8  6E1D               	movwf	___awdiv@divisor+1,c
  3073  001DAA  0E64               	movlw	100
  3074  001DAC  6E1C               	movwf	___awdiv@divisor,c
  3075  001DAE  C069  F01A         	movff	fround@prec,___awdiv@dividend
  3076  001DB2  6A1B               	clrf	___awdiv@dividend+1,c
  3077  001DB4  EC57  F016         	call	___awdiv	;wreg free
  3078  001DB8  0E12               	movlw	18
  3079  001DBA  241A               	addwf	?___awdiv,w,c
  3080  001DBC  6E22               	movwf	___wmul@multiplier,c
  3081  001DBE  0E00               	movlw	0
  3082  001DC0  201B               	addwfc	?___awdiv+1,w,c
  3083  001DC2  6E23               	movwf	___wmul@multiplier+1,c
  3084  001DC4  0E00               	movlw	0
  3085  001DC6  6E25               	movwf	___wmul@multiplicand+1,c
  3086  001DC8  0E03               	movlw	3
  3087  001DCA  6E24               	movwf	___wmul@multiplicand,c
  3088  001DCC  ECBD  F018         	call	___wmul	;wreg free
  3089  001DD0  0E50               	movlw	low __npowers_
  3090  001DD2  2422               	addwf	?___wmul,w,c
  3091  001DD4  6EF6               	movwf	tblptrl,c
  3092  001DD6  0E10               	movlw	high __npowers_
  3093  001DD8  2023               	addwfc	?___wmul+1,w,c
  3094  001DDA  6EF7               	movwf	tblptrh,c
  3095  001DDC                     	if	1	;There are 3 active tblptr bytes
  3096  001DDC  6AF8               	clrf	tblptru,c
  3097  001DDE  0E00               	movlw	low (__mediumconst shr (0+16))
  3098  001DE0  22F8               	addwfc	tblptru,f,c
  3099  001DE2                     	endif
  3100  001DE2  0009               	tblrd		*+
  3101  001DE4  CFF5 F028          	movff	tablat,___ftmul@f1
  3102  001DE8  0009               	tblrd		*+
  3103  001DEA  CFF5 F029          	movff	tablat,___ftmul@f1+1
  3104  001DEE  000A               	tblrd		*-
  3105  001DF0  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  3106  001DF4  ECB8  F014         	call	___ftmul	;wreg free
  3107  001DF8  C028  F066         	movff	?___ftmul,_fround$2472
  3108  001DFC  C029  F067         	movff	?___ftmul+1,_fround$2472+1
  3109  001E00  C02A  F068         	movff	?___ftmul+2,_fround$2472+2
  3110                           
  3111                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3112  001E04  0E00               	movlw	0
  3113  001E06  6E25               	movwf	___wmul@multiplicand+1,c
  3114  001E08  0E03               	movlw	3
  3115  001E0A  6E24               	movwf	___wmul@multiplicand,c
  3116  001E0C  0E00               	movlw	0
  3117  001E0E  6E17               	movwf	___awmod@divisor+1,c
  3118  001E10  0E0A               	movlw	10
  3119  001E12  6E16               	movwf	___awmod@divisor,c
  3120  001E14  C069  F014         	movff	fround@prec,___awmod@dividend
  3121  001E18  6A15               	clrf	___awmod@dividend+1,c
  3122  001E1A  EC1C  F017         	call	___awmod	;wreg free
  3123  001E1E  C014  F022         	movff	?___awmod,___wmul@multiplier
  3124  001E22  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  3125  001E26  ECBD  F018         	call	___wmul	;wreg free
  3126  001E2A  0E50               	movlw	low __npowers_
  3127  001E2C  2422               	addwf	?___wmul,w,c
  3128  001E2E  6EF6               	movwf	tblptrl,c
  3129  001E30  0E10               	movlw	high __npowers_
  3130  001E32  2023               	addwfc	?___wmul+1,w,c
  3131  001E34  6EF7               	movwf	tblptrh,c
  3132  001E36                     	if	1	;There are 3 active tblptr bytes
  3133  001E36  6AF8               	clrf	tblptru,c
  3134  001E38  0E00               	movlw	low (__mediumconst shr (0+16))
  3135  001E3A  22F8               	addwfc	tblptru,f,c
  3136  001E3C                     	endif
  3137  001E3C  0009               	tblrd		*+
  3138  001E3E  CFF5 F02B          	movff	tablat,___ftmul@f2
  3139  001E42  0009               	tblrd		*+
  3140  001E44  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  3141  001E48  000A               	tblrd		*-
  3142  001E4A  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  3143  001E4E  C066  F028         	movff	_fround$2472,___ftmul@f1
  3144  001E52  C067  F029         	movff	_fround$2472+1,___ftmul@f1+1
  3145  001E56  C068  F02A         	movff	_fround$2472+2,___ftmul@f1+2
  3146  001E5A  ECB8  F014         	call	___ftmul	;wreg free
  3147  001E5E  C028  F063         	movff	?___ftmul,_fround$2473
  3148  001E62  C029  F064         	movff	?___ftmul+1,_fround$2473+1
  3149  001E66  C02A  F065         	movff	?___ftmul+2,_fround$2473+2
  3150                           
  3151                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3152  001E6A  C063  F028         	movff	_fround$2473,___ftmul@f1
  3153  001E6E  C064  F029         	movff	_fround$2473+1,___ftmul@f1+1
  3154  001E72  C065  F02A         	movff	_fround$2473+2,___ftmul@f1+2
  3155  001E76  0E00               	movlw	0
  3156  001E78  6E2B               	movwf	___ftmul@f2,c
  3157  001E7A  0E00               	movlw	0
  3158  001E7C  6E2C               	movwf	___ftmul@f2+1,c
  3159  001E7E  0E3F               	movlw	63
  3160  001E80  6E2D               	movwf	___ftmul@f2+2,c
  3161  001E82  ECB8  F014         	call	___ftmul	;wreg free
  3162  001E86  C028  F060         	movff	?___ftmul,?_fround
  3163  001E8A  C029  F061         	movff	?___ftmul+1,?_fround+1
  3164  001E8E  C02A  F062         	movff	?___ftmul+2,?_fround+2
  3165  001E92  0012               	return	
  3166  001E94                     l4487:
  3167                           
  3168                           ;doprnt.c: 415: else if(prec > 10)
  3169  001E94  0E0A               	movlw	10
  3170  001E96  0100               	movlb	0	; () banked
  3171  001E98  6569               	cpfsgt	fround@prec& (0+255),b
  3172  001E9A  D063               	goto	l4495
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3176  001E9C  0E00               	movlw	0
  3177  001E9E  6E25               	movwf	___wmul@multiplicand+1,c
  3178  001EA0  0E03               	movlw	3
  3179  001EA2  6E24               	movwf	___wmul@multiplicand,c
  3180  001EA4  0E00               	movlw	0
  3181  001EA6  6E17               	movwf	___awmod@divisor+1,c
  3182  001EA8  0E0A               	movlw	10
  3183  001EAA  6E16               	movwf	___awmod@divisor,c
  3184  001EAC  C069  F014         	movff	fround@prec,___awmod@dividend
  3185  001EB0  6A15               	clrf	___awmod@dividend+1,c
  3186  001EB2  EC1C  F017         	call	___awmod	;wreg free
  3187  001EB6  C014  F022         	movff	?___awmod,___wmul@multiplier
  3188  001EBA  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  3189  001EBE  ECBD  F018         	call	___wmul	;wreg free
  3190  001EC2  0E50               	movlw	low __npowers_
  3191  001EC4  2422               	addwf	?___wmul,w,c
  3192  001EC6  6EF6               	movwf	tblptrl,c
  3193  001EC8  0E10               	movlw	high __npowers_
  3194  001ECA  2023               	addwfc	?___wmul+1,w,c
  3195  001ECC  6EF7               	movwf	tblptrh,c
  3196  001ECE                     	if	1	;There are 3 active tblptr bytes
  3197  001ECE  6AF8               	clrf	tblptru,c
  3198  001ED0  0E00               	movlw	low (__mediumconst shr (0+16))
  3199  001ED2  22F8               	addwfc	tblptru,f,c
  3200  001ED4                     	endif
  3201  001ED4  0009               	tblrd		*+
  3202  001ED6  CFF5 F02B          	movff	tablat,___ftmul@f2
  3203  001EDA  0009               	tblrd		*+
  3204  001EDC  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  3205  001EE0  000A               	tblrd		*-
  3206  001EE2  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  3207  001EE6  0E00               	movlw	0
  3208  001EE8  6E1D               	movwf	___awdiv@divisor+1,c
  3209  001EEA  0E0A               	movlw	10
  3210  001EEC  6E1C               	movwf	___awdiv@divisor,c
  3211  001EEE  C069  F01A         	movff	fround@prec,___awdiv@dividend
  3212  001EF2  6A1B               	clrf	___awdiv@dividend+1,c
  3213  001EF4  EC57  F016         	call	___awdiv	;wreg free
  3214  001EF8  0E09               	movlw	9
  3215  001EFA  241A               	addwf	?___awdiv,w,c
  3216  001EFC  6E22               	movwf	___wmul@multiplier,c
  3217  001EFE  0E00               	movlw	0
  3218  001F00  201B               	addwfc	?___awdiv+1,w,c
  3219  001F02  6E23               	movwf	___wmul@multiplier+1,c
  3220  001F04  0E00               	movlw	0
  3221  001F06  6E25               	movwf	___wmul@multiplicand+1,c
  3222  001F08  0E03               	movlw	3
  3223  001F0A  6E24               	movwf	___wmul@multiplicand,c
  3224  001F0C  ECBD  F018         	call	___wmul	;wreg free
  3225  001F10  0E50               	movlw	low __npowers_
  3226  001F12  2422               	addwf	?___wmul,w,c
  3227  001F14  6EF6               	movwf	tblptrl,c
  3228  001F16  0E10               	movlw	high __npowers_
  3229  001F18  2023               	addwfc	?___wmul+1,w,c
  3230  001F1A  6EF7               	movwf	tblptrh,c
  3231  001F1C                     	if	1	;There are 3 active tblptr bytes
  3232  001F1C  6AF8               	clrf	tblptru,c
  3233  001F1E  0E00               	movlw	low (__mediumconst shr (0+16))
  3234  001F20  22F8               	addwfc	tblptru,f,c
  3235  001F22                     	endif
  3236  001F22  0009               	tblrd		*+
  3237  001F24  CFF5 F028          	movff	tablat,___ftmul@f1
  3238  001F28  0009               	tblrd		*+
  3239  001F2A  CFF5 F029          	movff	tablat,___ftmul@f1+1
  3240  001F2E  000A               	tblrd		*-
  3241  001F30  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  3242  001F34  ECB8  F014         	call	___ftmul	;wreg free
  3243  001F38  C028  F066         	movff	?___ftmul,_fround$2472
  3244  001F3C  C029  F067         	movff	?___ftmul+1,_fround$2472+1
  3245  001F40  C02A  F068         	movff	?___ftmul+2,_fround$2472+2
  3246                           
  3247                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3248  001F44  C066  F028         	movff	_fround$2472,___ftmul@f1
  3249  001F48  C067  F029         	movff	_fround$2472+1,___ftmul@f1+1
  3250  001F4C  C068  F02A         	movff	_fround$2472+2,___ftmul@f1+2
  3251  001F50  0E00               	movlw	0
  3252  001F52  6E2B               	movwf	___ftmul@f2,c
  3253  001F54  0E00               	movlw	0
  3254  001F56  6E2C               	movwf	___ftmul@f2+1,c
  3255  001F58  0E3F               	movlw	63
  3256  001F5A  6E2D               	movwf	___ftmul@f2+2,c
  3257  001F5C  ECB8  F014         	call	___ftmul	;wreg free
  3258  001F60  D792               	goto	L5
  3259  001F62                     l4495:
  3260                           
  3261                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3262  001F62  0100               	movlb	0	; () banked
  3263  001F64  5169               	movf	fround@prec& (0+255),w,b
  3264  001F66  0D03               	mullw	3
  3265  001F68  0E50               	movlw	low __npowers_
  3266  001F6A  24F3               	addwf	prodl,w,c
  3267  001F6C  6EF6               	movwf	tblptrl,c
  3268  001F6E  0E10               	movlw	high __npowers_
  3269  001F70  20F4               	addwfc	prodh,w,c
  3270  001F72  6EF7               	movwf	tblptrh,c
  3271  001F74                     	if	1	;There are 3 active tblptr bytes
  3272  001F74  6AF8               	clrf	tblptru,c
  3273  001F76  0E00               	movlw	low (__mediumconst shr (0+16))
  3274  001F78  22F8               	addwfc	tblptru,f,c
  3275  001F7A                     	endif
  3276  001F7A  0009               	tblrd		*+
  3277  001F7C  CFF5 F028          	movff	tablat,___ftmul@f1
  3278  001F80  0009               	tblrd		*+
  3279  001F82  CFF5 F029          	movff	tablat,___ftmul@f1+1
  3280  001F86  000A               	tblrd		*-
  3281  001F88  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  3282  001F8C  0E00               	movlw	0
  3283  001F8E  6E2B               	movwf	___ftmul@f2,c
  3284  001F90  0E00               	movlw	0
  3285  001F92  6E2C               	movwf	___ftmul@f2+1,c
  3286  001F94  0E3F               	movlw	63
  3287  001F96  6E2D               	movwf	___ftmul@f2+2,c
  3288  001F98  ECB8  F014         	call	___ftmul	;wreg free
  3289  001F9C  C028  F060         	movff	?___ftmul,?_fround
  3290  001FA0  C029  F061         	movff	?___ftmul+1,?_fround+1
  3291  001FA4  C02A  F062         	movff	?___ftmul+2,?_fround+2
  3292  001FA8  0012               	return	
  3293  001FAA                     __end_of_fround:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           intcon	equ	0xFF2
  3302                           postinc0	equ	0xFEE
  3303                           wreg	equ	0xFE8
  3304                           indf2	equ	0xFDF
  3305                           postinc2	equ	0xFDE
  3306                           postdec2	equ	0xFDD
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function ___wmul *****************
  3312 ;; Defined at:
  3313 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  multiplier      2   33[COMRAM] unsigned int 
  3316 ;;  multiplicand    2   35[COMRAM] unsigned int 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  product         2   37[COMRAM] unsigned int 
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  2   33[COMRAM] unsigned int 
  3321 ;; Registers used:
  3322 ;;		wreg, status,2, status,0, prodl, prodh
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;Total ram usage:        6 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    3
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_fround
  3339 ;;		_scale
  3340 ;;		_sprintf
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text5
  3345  00317A                     __ptext5:
  3346                           	opt stack 0
  3347  00317A                     ___wmul:
  3348                           	opt stack 24
  3349                           
  3350                           ;incstack = 0
  3351  00317A  5022               	movf	___wmul@multiplier,w,c
  3352  00317C  0224               	mulwf	___wmul@multiplicand,c
  3353  00317E  CFF3 F026          	movff	prodl,___wmul@product
  3354  003182  CFF4 F027          	movff	prodh,___wmul@product+1
  3355  003186  5022               	movf	___wmul@multiplier,w,c
  3356  003188  0225               	mulwf	___wmul@multiplicand+1,c
  3357  00318A  50F3               	movf	prodl,w,c
  3358  00318C  2627               	addwf	___wmul@product+1,f,c
  3359  00318E  5023               	movf	___wmul@multiplier+1,w,c
  3360  003190  0224               	mulwf	___wmul@multiplicand,c
  3361  003192  50F3               	movf	prodl,w,c
  3362  003194  2627               	addwf	___wmul@product+1,f,c
  3363  003196  C026  F022         	movff	___wmul@product,?___wmul
  3364  00319A  C027  F023         	movff	___wmul@product+1,?___wmul+1
  3365  00319E  0012               	return	
  3366  0031A0                     __end_of___wmul:
  3367                           	opt stack 0
  3368                           tblptru	equ	0xFF8
  3369                           tblptrh	equ	0xFF7
  3370                           tblptrl	equ	0xFF6
  3371                           tablat	equ	0xFF5
  3372                           prodh	equ	0xFF4
  3373                           prodl	equ	0xFF3
  3374                           intcon	equ	0xFF2
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function ___ftmul *****************
  3385 ;; Defined at:
  3386 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  f1              3   39[COMRAM] float 
  3389 ;;  f2              3   42[COMRAM] float 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  3392 ;;  sign            1   53[COMRAM] unsigned char 
  3393 ;;  cntr            1   52[COMRAM] unsigned char 
  3394 ;;  exp             1   48[COMRAM] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  3   39[COMRAM] float 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:       15 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    4
  3411 ;; This function calls:
  3412 ;;		___ftpack
  3413 ;; This function is called by:
  3414 ;;		_fround
  3415 ;;		_scale
  3416 ;;		_sprintf
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text6
  3421  002970                     __ptext6:
  3422                           	opt stack 0
  3423  002970                     ___ftmul:
  3424                           	opt stack 23
  3425                           
  3426                           ;incstack = 0
  3427  002970  C02A  F02E         	movff	___ftmul@f1+2,??___ftmul
  3428  002974  6A2F               	clrf	(??___ftmul+1)& (0+255),c
  3429  002976  6A30               	clrf	(??___ftmul+2)& (0+255),c
  3430  002978  3429               	rlcf	___ftmul@f1+1,w,c
  3431  00297A  362E               	rlcf	??___ftmul& (0+255),f,c
  3432  00297C  E301               	bnc	u4091
  3433  00297E  802F               	bsf	(??___ftmul+1)& (0+255),0,c
  3434  002980                     u4091:
  3435  002980  502E               	movf	??___ftmul,w,c
  3436  002982  6E31               	movwf	___ftmul@exp,c
  3437  002984  5031               	movf	___ftmul@exp,w,c
  3438  002986  A4D8               	btfss	status,2,c
  3439  002988  D007               	goto	l4355
  3440  00298A  0E00               	movlw	0
  3441  00298C  6E28               	movwf	?___ftmul,c
  3442  00298E  0E00               	movlw	0
  3443  002990  6E29               	movwf	?___ftmul+1,c
  3444  002992  0E00               	movlw	0
  3445  002994  6E2A               	movwf	?___ftmul+2,c
  3446  002996  0012               	return	
  3447  002998                     l4355:
  3448  002998  C02D  F02E         	movff	___ftmul@f2+2,??___ftmul
  3449  00299C  6A2F               	clrf	(??___ftmul+1)& (0+255),c
  3450  00299E  6A30               	clrf	(??___ftmul+2)& (0+255),c
  3451  0029A0  342C               	rlcf	___ftmul@f2+1,w,c
  3452  0029A2  362E               	rlcf	??___ftmul& (0+255),f,c
  3453  0029A4  E301               	bnc	u4111
  3454  0029A6  802F               	bsf	(??___ftmul+1)& (0+255),0,c
  3455  0029A8                     u4111:
  3456  0029A8  502E               	movf	??___ftmul,w,c
  3457  0029AA  6E36               	movwf	___ftmul@sign,c
  3458  0029AC  5036               	movf	___ftmul@sign,w,c
  3459  0029AE  A4D8               	btfss	status,2,c
  3460  0029B0  D007               	goto	l4361
  3461  0029B2  0E00               	movlw	0
  3462  0029B4  6E28               	movwf	?___ftmul,c
  3463  0029B6  0E00               	movlw	0
  3464  0029B8  6E29               	movwf	?___ftmul+1,c
  3465  0029BA  0E00               	movlw	0
  3466  0029BC  6E2A               	movwf	?___ftmul+2,c
  3467  0029BE  0012               	return	
  3468  0029C0                     l4361:
  3469  0029C0  5036               	movf	___ftmul@sign,w,c
  3470  0029C2  0F7B               	addlw	123
  3471  0029C4  2631               	addwf	___ftmul@exp,f,c
  3472  0029C6  C02A  F036         	movff	___ftmul@f1+2,___ftmul@sign
  3473  0029CA  502D               	movf	___ftmul@f2+2,w,c
  3474  0029CC  1A36               	xorwf	___ftmul@sign,f,c
  3475  0029CE  0E80               	movlw	128
  3476  0029D0  1636               	andwf	___ftmul@sign,f,c
  3477  0029D2  8E29               	bsf	___ftmul@f1+1,7,c
  3478  0029D4  8E2C               	bsf	___ftmul@f2+1,7,c
  3479  0029D6  0EFF               	movlw	255
  3480  0029D8  162B               	andwf	___ftmul@f2,f,c
  3481  0029DA  0EFF               	movlw	255
  3482  0029DC  162C               	andwf	___ftmul@f2+1,f,c
  3483  0029DE  0E00               	movlw	0
  3484  0029E0  162D               	andwf	___ftmul@f2+2,f,c
  3485  0029E2  0E00               	movlw	0
  3486  0029E4  6E32               	movwf	___ftmul@f3_as_product,c
  3487  0029E6  0E00               	movlw	0
  3488  0029E8  6E33               	movwf	___ftmul@f3_as_product+1,c
  3489  0029EA  0E00               	movlw	0
  3490  0029EC  6E34               	movwf	___ftmul@f3_as_product+2,c
  3491  0029EE  0E07               	movlw	7
  3492  0029F0  6E35               	movwf	___ftmul@cntr,c
  3493  0029F2                     l4375:
  3494  0029F2  A028               	btfss	___ftmul@f1,0,c
  3495  0029F4  D006               	goto	l4379
  3496  0029F6  502B               	movf	___ftmul@f2,w,c
  3497  0029F8  2632               	addwf	___ftmul@f3_as_product,f,c
  3498  0029FA  502C               	movf	___ftmul@f2+1,w,c
  3499  0029FC  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  3500  0029FE  502D               	movf	___ftmul@f2+2,w,c
  3501  002A00  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  3502  002A02                     l4379:
  3503  002A02  90D8               	bcf	status,0,c
  3504  002A04  322A               	rrcf	___ftmul@f1+2,f,c
  3505  002A06  3229               	rrcf	___ftmul@f1+1,f,c
  3506  002A08  3228               	rrcf	___ftmul@f1,f,c
  3507  002A0A  90D8               	bcf	status,0,c
  3508  002A0C  362B               	rlcf	___ftmul@f2,f,c
  3509  002A0E  362C               	rlcf	___ftmul@f2+1,f,c
  3510  002A10  362D               	rlcf	___ftmul@f2+2,f,c
  3511  002A12  2E35               	decfsz	___ftmul@cntr,f,c
  3512  002A14  D7EE               	goto	l4375
  3513  002A16  0E09               	movlw	9
  3514  002A18  6E35               	movwf	___ftmul@cntr,c
  3515  002A1A                     l4385:
  3516  002A1A  A028               	btfss	___ftmul@f1,0,c
  3517  002A1C  D006               	goto	l4389
  3518  002A1E  502B               	movf	___ftmul@f2,w,c
  3519  002A20  2632               	addwf	___ftmul@f3_as_product,f,c
  3520  002A22  502C               	movf	___ftmul@f2+1,w,c
  3521  002A24  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  3522  002A26  502D               	movf	___ftmul@f2+2,w,c
  3523  002A28  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  3524  002A2A                     l4389:
  3525  002A2A  90D8               	bcf	status,0,c
  3526  002A2C  322A               	rrcf	___ftmul@f1+2,f,c
  3527  002A2E  3229               	rrcf	___ftmul@f1+1,f,c
  3528  002A30  3228               	rrcf	___ftmul@f1,f,c
  3529  002A32  90D8               	bcf	status,0,c
  3530  002A34  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  3531  002A36  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  3532  002A38  3232               	rrcf	___ftmul@f3_as_product,f,c
  3533  002A3A  2E35               	decfsz	___ftmul@cntr,f,c
  3534  002A3C  D7EE               	goto	l4385
  3535  002A3E  C032  F014         	movff	___ftmul@f3_as_product,___ftpack@arg
  3536  002A42  C033  F015         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3537  002A46  C034  F016         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3538  002A4A  C031  F017         	movff	___ftmul@exp,___ftpack@exp
  3539  002A4E  C036  F018         	movff	___ftmul@sign,___ftpack@sign
  3540  002A52  EC32  F015         	call	___ftpack	;wreg free
  3541  002A56  C014  F028         	movff	?___ftpack,?___ftmul
  3542  002A5A  C015  F029         	movff	?___ftpack+1,?___ftmul+1
  3543  002A5E  C016  F02A         	movff	?___ftpack+2,?___ftmul+2
  3544  002A62  0012               	return	
  3545  002A64                     __end_of___ftmul:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           intcon	equ	0xFF2
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           indf2	equ	0xFDF
  3557                           postinc2	equ	0xFDE
  3558                           postdec2	equ	0xFDD
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function ___awmod *****************
  3564 ;; Defined at:
  3565 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  dividend        2   19[COMRAM] int 
  3568 ;;  divisor         2   21[COMRAM] int 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  sign            1   24[COMRAM] unsigned char 
  3571 ;;  counter         1   23[COMRAM] unsigned char 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  2   19[COMRAM] int 
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;Total ram usage:        6 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    3
  3588 ;; This function calls:
  3589 ;;		Nothing
  3590 ;; This function is called by:
  3591 ;;		_fround
  3592 ;;		_scale
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text7
  3597  002E38                     __ptext7:
  3598                           	opt stack 0
  3599  002E38                     ___awmod:
  3600                           	opt stack 24
  3601                           
  3602                           ;incstack = 0
  3603  002E38  0E00               	movlw	0
  3604  002E3A  6E19               	movwf	___awmod@sign,c
  3605  002E3C  AE15               	btfss	___awmod@dividend+1,7,c
  3606  002E3E  D006               	goto	l4449
  3607  002E40  6C14               	negf	___awmod@dividend,c
  3608  002E42  1E15               	comf	___awmod@dividend+1,f,c
  3609  002E44  B0D8               	btfsc	status,0,c
  3610  002E46  2A15               	incf	___awmod@dividend+1,f,c
  3611  002E48  0E01               	movlw	1
  3612  002E4A  6E19               	movwf	___awmod@sign,c
  3613  002E4C                     l4449:
  3614  002E4C  AE17               	btfss	___awmod@divisor+1,7,c
  3615  002E4E  D004               	goto	l4453
  3616  002E50  6C16               	negf	___awmod@divisor,c
  3617  002E52  1E17               	comf	___awmod@divisor+1,f,c
  3618  002E54  B0D8               	btfsc	status,0,c
  3619  002E56  2A17               	incf	___awmod@divisor+1,f,c
  3620  002E58                     l4453:
  3621  002E58  5016               	movf	___awmod@divisor,w,c
  3622  002E5A  1017               	iorwf	___awmod@divisor+1,w,c
  3623  002E5C  B4D8               	btfsc	status,2,c
  3624  002E5E  D018               	goto	l4469
  3625  002E60  0E01               	movlw	1
  3626  002E62  6E18               	movwf	___awmod@counter,c
  3627  002E64  D004               	goto	l4459
  3628  002E66                     l4457:
  3629  002E66  90D8               	bcf	status,0,c
  3630  002E68  3616               	rlcf	___awmod@divisor,f,c
  3631  002E6A  3617               	rlcf	___awmod@divisor+1,f,c
  3632  002E6C  2A18               	incf	___awmod@counter,f,c
  3633  002E6E                     l4459:
  3634  002E6E  AE17               	btfss	___awmod@divisor+1,7,c
  3635  002E70  D7FA               	goto	l4457
  3636  002E72                     l4461:
  3637  002E72  5016               	movf	___awmod@divisor,w,c
  3638  002E74  5C14               	subwf	___awmod@dividend,w,c
  3639  002E76  5017               	movf	___awmod@divisor+1,w,c
  3640  002E78  5815               	subwfb	___awmod@dividend+1,w,c
  3641  002E7A  A0D8               	btfss	status,0,c
  3642  002E7C  D004               	goto	l4465
  3643  002E7E  5016               	movf	___awmod@divisor,w,c
  3644  002E80  5E14               	subwf	___awmod@dividend,f,c
  3645  002E82  5017               	movf	___awmod@divisor+1,w,c
  3646  002E84  5A15               	subwfb	___awmod@dividend+1,f,c
  3647  002E86                     l4465:
  3648  002E86  90D8               	bcf	status,0,c
  3649  002E88  3217               	rrcf	___awmod@divisor+1,f,c
  3650  002E8A  3216               	rrcf	___awmod@divisor,f,c
  3651  002E8C  2E18               	decfsz	___awmod@counter,f,c
  3652  002E8E  D7F1               	goto	l4461
  3653  002E90                     l4469:
  3654  002E90  5019               	movf	___awmod@sign,w,c
  3655  002E92  B4D8               	btfsc	status,2,c
  3656  002E94  D004               	goto	l4473
  3657  002E96  6C14               	negf	___awmod@dividend,c
  3658  002E98  1E15               	comf	___awmod@dividend+1,f,c
  3659  002E9A  B0D8               	btfsc	status,0,c
  3660  002E9C  2A15               	incf	___awmod@dividend+1,f,c
  3661  002E9E                     l4473:
  3662  002E9E  C014  F014         	movff	___awmod@dividend,?___awmod
  3663  002EA2  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
  3664  002EA6  0012               	return	
  3665  002EA8                     __end_of___awmod:
  3666                           	opt stack 0
  3667                           tblptru	equ	0xFF8
  3668                           tblptrh	equ	0xFF7
  3669                           tblptrl	equ	0xFF6
  3670                           tablat	equ	0xFF5
  3671                           prodh	equ	0xFF4
  3672                           prodl	equ	0xFF3
  3673                           intcon	equ	0xFF2
  3674                           postinc0	equ	0xFEE
  3675                           wreg	equ	0xFE8
  3676                           indf2	equ	0xFDF
  3677                           postinc2	equ	0xFDE
  3678                           postdec2	equ	0xFDD
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683 ;; *************** function ___awdiv *****************
  3684 ;; Defined at:
  3685 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  dividend        2   25[COMRAM] int 
  3688 ;;  divisor         2   27[COMRAM] int 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  quotient        2   31[COMRAM] int 
  3691 ;;  sign            1   30[COMRAM] unsigned char 
  3692 ;;  counter         1   29[COMRAM] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  2   25[COMRAM] int 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3702 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;Total ram usage:        8 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    3
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_fround
  3713 ;;		_scale
  3714 ;;		_sprintf
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text8
  3719  002CAE                     __ptext8:
  3720                           	opt stack 0
  3721  002CAE                     ___awdiv:
  3722                           	opt stack 24
  3723                           
  3724                           ;incstack = 0
  3725  002CAE  0E00               	movlw	0
  3726  002CB0  6E1F               	movwf	___awdiv@sign,c
  3727  002CB2  AE1D               	btfss	___awdiv@divisor+1,7,c
  3728  002CB4  D006               	goto	l4405
  3729  002CB6  6C1C               	negf	___awdiv@divisor,c
  3730  002CB8  1E1D               	comf	___awdiv@divisor+1,f,c
  3731  002CBA  B0D8               	btfsc	status,0,c
  3732  002CBC  2A1D               	incf	___awdiv@divisor+1,f,c
  3733  002CBE  0E01               	movlw	1
  3734  002CC0  6E1F               	movwf	___awdiv@sign,c
  3735  002CC2                     l4405:
  3736  002CC2  AE1B               	btfss	___awdiv@dividend+1,7,c
  3737  002CC4  D006               	goto	l4411
  3738  002CC6  6C1A               	negf	___awdiv@dividend,c
  3739  002CC8  1E1B               	comf	___awdiv@dividend+1,f,c
  3740  002CCA  B0D8               	btfsc	status,0,c
  3741  002CCC  2A1B               	incf	___awdiv@dividend+1,f,c
  3742  002CCE  0E01               	movlw	1
  3743  002CD0  1A1F               	xorwf	___awdiv@sign,f,c
  3744  002CD2                     l4411:
  3745  002CD2  0E00               	movlw	0
  3746  002CD4  6E21               	movwf	___awdiv@quotient+1,c
  3747  002CD6  0E00               	movlw	0
  3748  002CD8  6E20               	movwf	___awdiv@quotient,c
  3749  002CDA  501C               	movf	___awdiv@divisor,w,c
  3750  002CDC  101D               	iorwf	___awdiv@divisor+1,w,c
  3751  002CDE  B4D8               	btfsc	status,2,c
  3752  002CE0  D01C               	goto	l4433
  3753  002CE2  0E01               	movlw	1
  3754  002CE4  6E1E               	movwf	___awdiv@counter,c
  3755  002CE6  D004               	goto	l4419
  3756  002CE8                     l4417:
  3757  002CE8  90D8               	bcf	status,0,c
  3758  002CEA  361C               	rlcf	___awdiv@divisor,f,c
  3759  002CEC  361D               	rlcf	___awdiv@divisor+1,f,c
  3760  002CEE  2A1E               	incf	___awdiv@counter,f,c
  3761  002CF0                     l4419:
  3762  002CF0  AE1D               	btfss	___awdiv@divisor+1,7,c
  3763  002CF2  D7FA               	goto	l4417
  3764  002CF4                     l4421:
  3765  002CF4  90D8               	bcf	status,0,c
  3766  002CF6  3620               	rlcf	___awdiv@quotient,f,c
  3767  002CF8  3621               	rlcf	___awdiv@quotient+1,f,c
  3768  002CFA  501C               	movf	___awdiv@divisor,w,c
  3769  002CFC  5C1A               	subwf	___awdiv@dividend,w,c
  3770  002CFE  501D               	movf	___awdiv@divisor+1,w,c
  3771  002D00  581B               	subwfb	___awdiv@dividend+1,w,c
  3772  002D02  A0D8               	btfss	status,0,c
  3773  002D04  D005               	goto	l4429
  3774  002D06  501C               	movf	___awdiv@divisor,w,c
  3775  002D08  5E1A               	subwf	___awdiv@dividend,f,c
  3776  002D0A  501D               	movf	___awdiv@divisor+1,w,c
  3777  002D0C  5A1B               	subwfb	___awdiv@dividend+1,f,c
  3778  002D0E  8020               	bsf	___awdiv@quotient,0,c
  3779  002D10                     l4429:
  3780  002D10  90D8               	bcf	status,0,c
  3781  002D12  321D               	rrcf	___awdiv@divisor+1,f,c
  3782  002D14  321C               	rrcf	___awdiv@divisor,f,c
  3783  002D16  2E1E               	decfsz	___awdiv@counter,f,c
  3784  002D18  D7ED               	goto	l4421
  3785  002D1A                     l4433:
  3786  002D1A  501F               	movf	___awdiv@sign,w,c
  3787  002D1C  B4D8               	btfsc	status,2,c
  3788  002D1E  D004               	goto	l4437
  3789  002D20  6C20               	negf	___awdiv@quotient,c
  3790  002D22  1E21               	comf	___awdiv@quotient+1,f,c
  3791  002D24  B0D8               	btfsc	status,0,c
  3792  002D26  2A21               	incf	___awdiv@quotient+1,f,c
  3793  002D28                     l4437:
  3794  002D28  C020  F01A         	movff	___awdiv@quotient,?___awdiv
  3795  002D2C  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
  3796  002D30  0012               	return	
  3797  002D32                     __end_of___awdiv:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           indf2	equ	0xFDF
  3809                           postinc2	equ	0xFDE
  3810                           postdec2	equ	0xFDD
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function __tdiv_to_l_ *****************
  3816 ;; Defined at:
  3817 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  f1              3   19[COMRAM] float 
  3820 ;;  f2              3   22[COMRAM] float 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  quot            4   28[COMRAM] unsigned long 
  3823 ;;  exp1            1   33[COMRAM] unsigned char 
  3824 ;;  cntr            1   32[COMRAM] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  4   19[COMRAM] unsigned long 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:       15 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    3
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_sprintf
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text9
  3849  002716                     __ptext9:
  3850                           	opt stack 0
  3851  002716                     __tdiv_to_l_:
  3852                           	opt stack 25
  3853                           
  3854                           ;incstack = 0
  3855  002716  C016  F01A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3856  00271A  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3857  00271C  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3858  00271E  3415               	rlcf	__tdiv_to_l_@f1+1,w,c
  3859  002720  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3860  002722  E301               	bnc	u2531
  3861  002724  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3862  002726                     u2531:
  3863  002726  501A               	movf	??__tdiv_to_l_,w,c
  3864  002728  6E22               	movwf	__tdiv_to_l_@exp1,c
  3865  00272A  5022               	movf	__tdiv_to_l_@exp1,w,c
  3866  00272C  A4D8               	btfss	status,2,c
  3867  00272E  D009               	goto	l3257
  3868  002730  0E00               	movlw	0
  3869  002732  6E14               	movwf	?__tdiv_to_l_,c
  3870  002734  0E00               	movlw	0
  3871  002736  6E15               	movwf	?__tdiv_to_l_+1,c
  3872  002738  0E00               	movlw	0
  3873  00273A  6E16               	movwf	?__tdiv_to_l_+2,c
  3874  00273C  0E00               	movlw	0
  3875  00273E  6E17               	movwf	?__tdiv_to_l_+3,c
  3876  002740  0012               	return	
  3877  002742                     l3257:
  3878  002742  C019  F01A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3879  002746  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3880  002748  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3881  00274A  3418               	rlcf	__tdiv_to_l_@f2+1,w,c
  3882  00274C  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3883  00274E  E301               	bnc	u2551
  3884  002750  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3885  002752                     u2551:
  3886  002752  501A               	movf	??__tdiv_to_l_,w,c
  3887  002754  6E21               	movwf	__tdiv_to_l_@cntr,c
  3888  002756  5021               	movf	__tdiv_to_l_@cntr,w,c
  3889  002758  A4D8               	btfss	status,2,c
  3890  00275A  D009               	goto	l3263
  3891  00275C  0E00               	movlw	0
  3892  00275E  6E14               	movwf	?__tdiv_to_l_,c
  3893  002760  0E00               	movlw	0
  3894  002762  6E15               	movwf	?__tdiv_to_l_+1,c
  3895  002764  0E00               	movlw	0
  3896  002766  6E16               	movwf	?__tdiv_to_l_+2,c
  3897  002768  0E00               	movlw	0
  3898  00276A  6E17               	movwf	?__tdiv_to_l_+3,c
  3899  00276C  0012               	return	
  3900  00276E                     l3263:
  3901  00276E  8E15               	bsf	__tdiv_to_l_@f1+1,7,c
  3902  002770  0EFF               	movlw	255
  3903  002772  1614               	andwf	__tdiv_to_l_@f1,f,c
  3904  002774  0EFF               	movlw	255
  3905  002776  1615               	andwf	__tdiv_to_l_@f1+1,f,c
  3906  002778  0E00               	movlw	0
  3907  00277A  1616               	andwf	__tdiv_to_l_@f1+2,f,c
  3908  00277C  8E18               	bsf	__tdiv_to_l_@f2+1,7,c
  3909  00277E  0EFF               	movlw	255
  3910  002780  1617               	andwf	__tdiv_to_l_@f2,f,c
  3911  002782  0EFF               	movlw	255
  3912  002784  1618               	andwf	__tdiv_to_l_@f2+1,f,c
  3913  002786  0E00               	movlw	0
  3914  002788  1619               	andwf	__tdiv_to_l_@f2+2,f,c
  3915  00278A  0E00               	movlw	0
  3916  00278C  6E1D               	movwf	__tdiv_to_l_@quot,c
  3917  00278E  0E00               	movlw	0
  3918  002790  6E1E               	movwf	__tdiv_to_l_@quot+1,c
  3919  002792  0E00               	movlw	0
  3920  002794  6E1F               	movwf	__tdiv_to_l_@quot+2,c
  3921  002796  0E00               	movlw	0
  3922  002798  6E20               	movwf	__tdiv_to_l_@quot+3,c
  3923  00279A  0E7F               	movlw	127
  3924  00279C  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  3925  00279E  5021               	movf	__tdiv_to_l_@cntr,w,c
  3926  0027A0  0F98               	addlw	152
  3927  0027A2  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  3928  0027A4  0E18               	movlw	24
  3929  0027A6  6E21               	movwf	__tdiv_to_l_@cntr,c
  3930  0027A8                     l1048:
  3931  0027A8  90D8               	bcf	status,0,c
  3932  0027AA  361D               	rlcf	__tdiv_to_l_@quot,f,c
  3933  0027AC  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  3934  0027AE  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  3935  0027B0  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  3936  0027B2  5017               	movf	__tdiv_to_l_@f2,w,c
  3937  0027B4  5C14               	subwf	__tdiv_to_l_@f1,w,c
  3938  0027B6  5018               	movf	__tdiv_to_l_@f2+1,w,c
  3939  0027B8  5815               	subwfb	__tdiv_to_l_@f1+1,w,c
  3940  0027BA  5019               	movf	__tdiv_to_l_@f2+2,w,c
  3941  0027BC  5816               	subwfb	__tdiv_to_l_@f1+2,w,c
  3942  0027BE  A0D8               	btfss	status,0,c
  3943  0027C0  D007               	goto	l1049
  3944  0027C2  5017               	movf	__tdiv_to_l_@f2,w,c
  3945  0027C4  5E14               	subwf	__tdiv_to_l_@f1,f,c
  3946  0027C6  5018               	movf	__tdiv_to_l_@f2+1,w,c
  3947  0027C8  5A15               	subwfb	__tdiv_to_l_@f1+1,f,c
  3948  0027CA  5019               	movf	__tdiv_to_l_@f2+2,w,c
  3949  0027CC  5A16               	subwfb	__tdiv_to_l_@f1+2,f,c
  3950  0027CE  801D               	bsf	__tdiv_to_l_@quot,0,c
  3951  0027D0                     l1049:
  3952  0027D0  90D8               	bcf	status,0,c
  3953  0027D2  3614               	rlcf	__tdiv_to_l_@f1,f,c
  3954  0027D4  3615               	rlcf	__tdiv_to_l_@f1+1,f,c
  3955  0027D6  3616               	rlcf	__tdiv_to_l_@f1+2,f,c
  3956  0027D8  2E21               	decfsz	__tdiv_to_l_@cntr,f,c
  3957  0027DA  D7E6               	goto	l1048
  3958  0027DC  AE22               	btfss	__tdiv_to_l_@exp1,7,c
  3959  0027DE  D016               	goto	l3297
  3960  0027E0  5022               	movf	__tdiv_to_l_@exp1,w,c
  3961  0027E2  0A80               	xorlw	128
  3962  0027E4  0F97               	addlw	151
  3963  0027E6  B0D8               	btfsc	status,0,c
  3964  0027E8  D009               	goto	l3293
  3965  0027EA  0E00               	movlw	0
  3966  0027EC  6E14               	movwf	?__tdiv_to_l_,c
  3967  0027EE  0E00               	movlw	0
  3968  0027F0  6E15               	movwf	?__tdiv_to_l_+1,c
  3969  0027F2  0E00               	movlw	0
  3970  0027F4  6E16               	movwf	?__tdiv_to_l_+2,c
  3971  0027F6  0E00               	movlw	0
  3972  0027F8  6E17               	movwf	?__tdiv_to_l_+3,c
  3973  0027FA  0012               	return	
  3974  0027FC                     l3293:
  3975  0027FC  90D8               	bcf	status,0,c
  3976  0027FE  3220               	rrcf	__tdiv_to_l_@quot+3,f,c
  3977  002800  321F               	rrcf	__tdiv_to_l_@quot+2,f,c
  3978  002802  321E               	rrcf	__tdiv_to_l_@quot+1,f,c
  3979  002804  321D               	rrcf	__tdiv_to_l_@quot,f,c
  3980  002806  3E22               	incfsz	__tdiv_to_l_@exp1,f,c
  3981  002808  D7F9               	goto	l3293
  3982  00280A  D015               	goto	l1055
  3983  00280C                     l3297:
  3984  00280C  0E17               	movlw	23
  3985  00280E  6422               	cpfsgt	__tdiv_to_l_@exp1,c
  3986  002810  D00F               	goto	l3305
  3987  002812  0E00               	movlw	0
  3988  002814  6E14               	movwf	?__tdiv_to_l_,c
  3989  002816  0E00               	movlw	0
  3990  002818  6E15               	movwf	?__tdiv_to_l_+1,c
  3991  00281A  0E00               	movlw	0
  3992  00281C  6E16               	movwf	?__tdiv_to_l_+2,c
  3993  00281E  0E00               	movlw	0
  3994  002820  6E17               	movwf	?__tdiv_to_l_+3,c
  3995  002822  0012               	return	
  3996  002824                     l3303:
  3997  002824  90D8               	bcf	status,0,c
  3998  002826  361D               	rlcf	__tdiv_to_l_@quot,f,c
  3999  002828  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  4000  00282A  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  4001  00282C  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  4002  00282E  0622               	decf	__tdiv_to_l_@exp1,f,c
  4003  002830                     l3305:
  4004  002830  5022               	movf	__tdiv_to_l_@exp1,w,c
  4005  002832  A4D8               	btfss	status,2,c
  4006  002834  D7F7               	goto	l3303
  4007  002836                     l1055:
  4008  002836  C01D  F014         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4009  00283A  C01E  F015         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4010  00283E  C01F  F016         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4011  002842  C020  F017         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4012  002846  0012               	return		;funcret
  4013  002848                     __end_of__tdiv_to_l_:
  4014                           	opt stack 0
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           prodh	equ	0xFF4
  4020                           prodl	equ	0xFF3
  4021                           intcon	equ	0xFF2
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function __div_to_l_ *****************
  4032 ;; Defined at:
  4033 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  f1              3   19[COMRAM] unsigned long 
  4036 ;;  f2              3   22[COMRAM] unsigned long 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  quot            4   25[COMRAM] unsigned long 
  4039 ;;  exp1            1   30[COMRAM] unsigned char 
  4040 ;;  cntr            1   29[COMRAM] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  4   19[COMRAM] unsigned long 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4050 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;Total ram usage:       12 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    3
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_sprintf
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text10
  4065  002848                     __ptext10:
  4066                           	opt stack 0
  4067  002848                     __div_to_l_:
  4068                           	opt stack 25
  4069                           
  4070                           ;incstack = 0
  4071  002848  3416               	rlcf	__div_to_l_@f1+2,w,c
  4072  00284A  3417               	rlcf	__div_to_l_@f1+3,w,c
  4073  00284C  6E1F               	movwf	__div_to_l_@exp1,c
  4074  00284E  501F               	movf	__div_to_l_@exp1,w,c
  4075  002850  A4D8               	btfss	status,2,c
  4076  002852  D009               	goto	l3313
  4077  002854  0E00               	movlw	0
  4078  002856  6E14               	movwf	?__div_to_l_,c
  4079  002858  0E00               	movlw	0
  4080  00285A  6E15               	movwf	?__div_to_l_+1,c
  4081  00285C  0E00               	movlw	0
  4082  00285E  6E16               	movwf	?__div_to_l_+2,c
  4083  002860  0E00               	movlw	0
  4084  002862  6E17               	movwf	?__div_to_l_+3,c
  4085  002864  0012               	return	
  4086  002866                     l3313:
  4087  002866  3419               	rlcf	__div_to_l_@f2+2,w,c
  4088  002868  341A               	rlcf	__div_to_l_@f2+3,w,c
  4089  00286A  6E1E               	movwf	__div_to_l_@cntr,c
  4090  00286C  501E               	movf	__div_to_l_@cntr,w,c
  4091  00286E  A4D8               	btfss	status,2,c
  4092  002870  D009               	goto	l3319
  4093  002872  0E00               	movlw	0
  4094  002874  6E14               	movwf	?__div_to_l_,c
  4095  002876  0E00               	movlw	0
  4096  002878  6E15               	movwf	?__div_to_l_+1,c
  4097  00287A  0E00               	movlw	0
  4098  00287C  6E16               	movwf	?__div_to_l_+2,c
  4099  00287E  0E00               	movlw	0
  4100  002880  6E17               	movwf	?__div_to_l_+3,c
  4101  002882  0012               	return	
  4102  002884                     l3319:
  4103  002884  8E16               	bsf	__div_to_l_@f1+2,7,c
  4104  002886  0EFF               	movlw	255
  4105  002888  1614               	andwf	__div_to_l_@f1,f,c
  4106  00288A  0EFF               	movlw	255
  4107  00288C  1615               	andwf	__div_to_l_@f1+1,f,c
  4108  00288E  0EFF               	movlw	255
  4109  002890  1616               	andwf	__div_to_l_@f1+2,f,c
  4110  002892  0E00               	movlw	0
  4111  002894  1617               	andwf	__div_to_l_@f1+3,f,c
  4112  002896  8E19               	bsf	__div_to_l_@f2+2,7,c
  4113  002898  0EFF               	movlw	255
  4114  00289A  1617               	andwf	__div_to_l_@f2,f,c
  4115  00289C  0EFF               	movlw	255
  4116  00289E  1618               	andwf	__div_to_l_@f2+1,f,c
  4117  0028A0  0EFF               	movlw	255
  4118  0028A2  1619               	andwf	__div_to_l_@f2+2,f,c
  4119  0028A4  0E00               	movlw	0
  4120  0028A6  161A               	andwf	__div_to_l_@f2+3,f,c
  4121  0028A8  0E00               	movlw	0
  4122  0028AA  6E1A               	movwf	__div_to_l_@quot,c
  4123  0028AC  0E00               	movlw	0
  4124  0028AE  6E1B               	movwf	__div_to_l_@quot+1,c
  4125  0028B0  0E00               	movlw	0
  4126  0028B2  6E1C               	movwf	__div_to_l_@quot+2,c
  4127  0028B4  0E00               	movlw	0
  4128  0028B6  6E1D               	movwf	__div_to_l_@quot+3,c
  4129  0028B8  0E7F               	movlw	127
  4130  0028BA  5E1F               	subwf	__div_to_l_@exp1,f,c
  4131  0028BC  501E               	movf	__div_to_l_@cntr,w,c
  4132  0028BE  0FA0               	addlw	160
  4133  0028C0  5E1F               	subwf	__div_to_l_@exp1,f,c
  4134  0028C2  0E20               	movlw	32
  4135  0028C4  6E1E               	movwf	__div_to_l_@cntr,c
  4136  0028C6                     l3333:
  4137  0028C6  90D8               	bcf	status,0,c
  4138  0028C8  361A               	rlcf	__div_to_l_@quot,f,c
  4139  0028CA  361B               	rlcf	__div_to_l_@quot+1,f,c
  4140  0028CC  361C               	rlcf	__div_to_l_@quot+2,f,c
  4141  0028CE  361D               	rlcf	__div_to_l_@quot+3,f,c
  4142  0028D0  5017               	movf	__div_to_l_@f2,w,c
  4143  0028D2  5C14               	subwf	__div_to_l_@f1,w,c
  4144  0028D4  5018               	movf	__div_to_l_@f2+1,w,c
  4145  0028D6  5815               	subwfb	__div_to_l_@f1+1,w,c
  4146  0028D8  5019               	movf	__div_to_l_@f2+2,w,c
  4147  0028DA  5816               	subwfb	__div_to_l_@f1+2,w,c
  4148  0028DC  501A               	movf	__div_to_l_@f2+3,w,c
  4149  0028DE  5817               	subwfb	__div_to_l_@f1+3,w,c
  4150  0028E0  A0D8               	btfss	status,0,c
  4151  0028E2  D009               	goto	l3341
  4152  0028E4  5017               	movf	__div_to_l_@f2,w,c
  4153  0028E6  5E14               	subwf	__div_to_l_@f1,f,c
  4154  0028E8  5018               	movf	__div_to_l_@f2+1,w,c
  4155  0028EA  5A15               	subwfb	__div_to_l_@f1+1,f,c
  4156  0028EC  5019               	movf	__div_to_l_@f2+2,w,c
  4157  0028EE  5A16               	subwfb	__div_to_l_@f1+2,f,c
  4158  0028F0  501A               	movf	__div_to_l_@f2+3,w,c
  4159  0028F2  5A17               	subwfb	__div_to_l_@f1+3,f,c
  4160  0028F4  801A               	bsf	__div_to_l_@quot,0,c
  4161  0028F6                     l3341:
  4162  0028F6  90D8               	bcf	status,0,c
  4163  0028F8  3614               	rlcf	__div_to_l_@f1,f,c
  4164  0028FA  3615               	rlcf	__div_to_l_@f1+1,f,c
  4165  0028FC  3616               	rlcf	__div_to_l_@f1+2,f,c
  4166  0028FE  3617               	rlcf	__div_to_l_@f1+3,f,c
  4167  002900  2E1E               	decfsz	__div_to_l_@cntr,f,c
  4168  002902  D7E1               	goto	l3333
  4169  002904  AE1F               	btfss	__div_to_l_@exp1,7,c
  4170  002906  D016               	goto	l3357
  4171  002908  501F               	movf	__div_to_l_@exp1,w,c
  4172  00290A  0A80               	xorlw	128
  4173  00290C  0F9F               	addlw	159
  4174  00290E  B0D8               	btfsc	status,0,c
  4175  002910  D009               	goto	l3353
  4176  002912  0E00               	movlw	0
  4177  002914  6E14               	movwf	?__div_to_l_,c
  4178  002916  0E00               	movlw	0
  4179  002918  6E15               	movwf	?__div_to_l_+1,c
  4180  00291A  0E00               	movlw	0
  4181  00291C  6E16               	movwf	?__div_to_l_+2,c
  4182  00291E  0E00               	movlw	0
  4183  002920  6E17               	movwf	?__div_to_l_+3,c
  4184  002922  0012               	return	
  4185  002924                     l3353:
  4186  002924  90D8               	bcf	status,0,c
  4187  002926  321D               	rrcf	__div_to_l_@quot+3,f,c
  4188  002928  321C               	rrcf	__div_to_l_@quot+2,f,c
  4189  00292A  321B               	rrcf	__div_to_l_@quot+1,f,c
  4190  00292C  321A               	rrcf	__div_to_l_@quot,f,c
  4191  00292E  3E1F               	incfsz	__div_to_l_@exp1,f,c
  4192  002930  D7F9               	goto	l3353
  4193  002932  D015               	goto	l951
  4194  002934                     l3357:
  4195  002934  0E1F               	movlw	31
  4196  002936  641F               	cpfsgt	__div_to_l_@exp1,c
  4197  002938  D00F               	goto	l3365
  4198  00293A  0E00               	movlw	0
  4199  00293C  6E14               	movwf	?__div_to_l_,c
  4200  00293E  0E00               	movlw	0
  4201  002940  6E15               	movwf	?__div_to_l_+1,c
  4202  002942  0E00               	movlw	0
  4203  002944  6E16               	movwf	?__div_to_l_+2,c
  4204  002946  0E00               	movlw	0
  4205  002948  6E17               	movwf	?__div_to_l_+3,c
  4206  00294A  0012               	return	
  4207  00294C                     l3363:
  4208  00294C  90D8               	bcf	status,0,c
  4209  00294E  361A               	rlcf	__div_to_l_@quot,f,c
  4210  002950  361B               	rlcf	__div_to_l_@quot+1,f,c
  4211  002952  361C               	rlcf	__div_to_l_@quot+2,f,c
  4212  002954  361D               	rlcf	__div_to_l_@quot+3,f,c
  4213  002956  061F               	decf	__div_to_l_@exp1,f,c
  4214  002958                     l3365:
  4215  002958  501F               	movf	__div_to_l_@exp1,w,c
  4216  00295A  A4D8               	btfss	status,2,c
  4217  00295C  D7F7               	goto	l3363
  4218  00295E                     l951:
  4219  00295E  C01A  F014         	movff	__div_to_l_@quot,?__div_to_l_
  4220  002962  C01B  F015         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4221  002966  C01C  F016         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4222  00296A  C01D  F017         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4223  00296E  0012               	return		;funcret
  4224  002970                     __end_of__div_to_l_:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function ___lltoft *****************
  4243 ;; Defined at:
  4244 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  c               4   27[COMRAM] unsigned long 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  exp             1   35[COMRAM] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  3   27[COMRAM] float 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        9 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    4
  4265 ;; This function calls:
  4266 ;;		___ftpack
  4267 ;; This function is called by:
  4268 ;;		_sprintf
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text11
  4273  002F0E                     __ptext11:
  4274                           	opt stack 0
  4275  002F0E                     ___lltoft:
  4276                           	opt stack 24
  4277                           
  4278                           ;incstack = 0
  4279  002F0E  0E8E               	movlw	142
  4280  002F10  6E24               	movwf	___lltoft@exp,c
  4281  002F12  D006               	goto	l4595
  4282  002F14                     l4593:
  4283  002F14  90D8               	bcf	status,0,c
  4284  002F16  321F               	rrcf	___lltoft@c+3,f,c
  4285  002F18  321E               	rrcf	___lltoft@c+2,f,c
  4286  002F1A  321D               	rrcf	___lltoft@c+1,f,c
  4287  002F1C  321C               	rrcf	___lltoft@c,f,c
  4288  002F1E  2A24               	incf	___lltoft@exp,f,c
  4289  002F20                     l4595:
  4290  002F20  0E00               	movlw	0
  4291  002F22  141C               	andwf	___lltoft@c,w,c
  4292  002F24  6E20               	movwf	??___lltoft& (0+255),c
  4293  002F26  0E00               	movlw	0
  4294  002F28  141D               	andwf	___lltoft@c+1,w,c
  4295  002F2A  6E21               	movwf	(??___lltoft+1)& (0+255),c
  4296  002F2C  0E00               	movlw	0
  4297  002F2E  141E               	andwf	___lltoft@c+2,w,c
  4298  002F30  6E22               	movwf	(??___lltoft+2)& (0+255),c
  4299  002F32  0EFF               	movlw	255
  4300  002F34  141F               	andwf	___lltoft@c+3,w,c
  4301  002F36  6E23               	movwf	(??___lltoft+3)& (0+255),c
  4302  002F38  5020               	movf	??___lltoft,w,c
  4303  002F3A  1021               	iorwf	??___lltoft+1,w,c
  4304  002F3C  1022               	iorwf	??___lltoft+2,w,c
  4305  002F3E  1023               	iorwf	??___lltoft+3,w,c
  4306  002F40  A4D8               	btfss	status,2,c
  4307  002F42  D7E8               	goto	l4593
  4308  002F44  C01C  F014         	movff	___lltoft@c,___ftpack@arg
  4309  002F48  C01D  F015         	movff	___lltoft@c+1,___ftpack@arg+1
  4310  002F4C  C01E  F016         	movff	___lltoft@c+2,___ftpack@arg+2
  4311  002F50  C024  F017         	movff	___lltoft@exp,___ftpack@exp
  4312  002F54  0E00               	movlw	0
  4313  002F56  6E18               	movwf	___ftpack@sign,c
  4314  002F58  EC32  F015         	call	___ftpack	;wreg free
  4315  002F5C  C014  F01C         	movff	?___ftpack,?___lltoft
  4316  002F60  C015  F01D         	movff	?___ftpack+1,?___lltoft+1
  4317  002F64  C016  F01E         	movff	?___ftpack+2,?___lltoft+2
  4318  002F68  0012               	return	
  4319  002F6A                     __end_of___lltoft:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function ___llmod *****************
  4338 ;; Defined at:
  4339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  dividend        4   32[COMRAM] unsigned long 
  4342 ;;  divisor         4   36[COMRAM] unsigned long 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  counter         1   40[COMRAM] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  4   32[COMRAM] unsigned long 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        9 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    3
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_sprintf
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text12
  4369  002EA8                     __ptext12:
  4370                           	opt stack 0
  4371  002EA8                     ___llmod:
  4372                           	opt stack 25
  4373                           
  4374                           ;incstack = 0
  4375  002EA8  5025               	movf	___llmod@divisor,w,c
  4376  002EAA  1026               	iorwf	___llmod@divisor+1,w,c
  4377  002EAC  1027               	iorwf	___llmod@divisor+2,w,c
  4378  002EAE  1028               	iorwf	___llmod@divisor+3,w,c
  4379  002EB0  B4D8               	btfsc	status,2,c
  4380  002EB2  D024               	goto	l1135
  4381  002EB4  0E01               	movlw	1
  4382  002EB6  6E29               	movwf	___llmod@counter,c
  4383  002EB8  D006               	goto	l3471
  4384  002EBA                     l3469:
  4385  002EBA  90D8               	bcf	status,0,c
  4386  002EBC  3625               	rlcf	___llmod@divisor,f,c
  4387  002EBE  3626               	rlcf	___llmod@divisor+1,f,c
  4388  002EC0  3627               	rlcf	___llmod@divisor+2,f,c
  4389  002EC2  3628               	rlcf	___llmod@divisor+3,f,c
  4390  002EC4  2A29               	incf	___llmod@counter,f,c
  4391  002EC6                     l3471:
  4392  002EC6  AE28               	btfss	___llmod@divisor+3,7,c
  4393  002EC8  D7F8               	goto	l3469
  4394  002ECA                     l3473:
  4395  002ECA  5025               	movf	___llmod@divisor,w,c
  4396  002ECC  5C21               	subwf	___llmod@dividend,w,c
  4397  002ECE  5026               	movf	___llmod@divisor+1,w,c
  4398  002ED0  5822               	subwfb	___llmod@dividend+1,w,c
  4399  002ED2  5027               	movf	___llmod@divisor+2,w,c
  4400  002ED4  5823               	subwfb	___llmod@dividend+2,w,c
  4401  002ED6  5028               	movf	___llmod@divisor+3,w,c
  4402  002ED8  5824               	subwfb	___llmod@dividend+3,w,c
  4403  002EDA  A0D8               	btfss	status,0,c
  4404  002EDC  D008               	goto	l3477
  4405  002EDE  5025               	movf	___llmod@divisor,w,c
  4406  002EE0  5E21               	subwf	___llmod@dividend,f,c
  4407  002EE2  5026               	movf	___llmod@divisor+1,w,c
  4408  002EE4  5A22               	subwfb	___llmod@dividend+1,f,c
  4409  002EE6  5027               	movf	___llmod@divisor+2,w,c
  4410  002EE8  5A23               	subwfb	___llmod@dividend+2,f,c
  4411  002EEA  5028               	movf	___llmod@divisor+3,w,c
  4412  002EEC  5A24               	subwfb	___llmod@dividend+3,f,c
  4413  002EEE                     l3477:
  4414  002EEE  90D8               	bcf	status,0,c
  4415  002EF0  3228               	rrcf	___llmod@divisor+3,f,c
  4416  002EF2  3227               	rrcf	___llmod@divisor+2,f,c
  4417  002EF4  3226               	rrcf	___llmod@divisor+1,f,c
  4418  002EF6  3225               	rrcf	___llmod@divisor,f,c
  4419  002EF8  2E29               	decfsz	___llmod@counter,f,c
  4420  002EFA  D7E7               	goto	l3473
  4421  002EFC                     l1135:
  4422  002EFC  C021  F021         	movff	___llmod@dividend,?___llmod
  4423  002F00  C022  F022         	movff	___llmod@dividend+1,?___llmod+1
  4424  002F04  C023  F023         	movff	___llmod@dividend+2,?___llmod+2
  4425  002F08  C024  F024         	movff	___llmod@dividend+3,?___llmod+3
  4426  002F0C  0012               	return		;funcret
  4427  002F0E                     __end_of___llmod:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           prodh	equ	0xFF4
  4434                           prodl	equ	0xFF3
  4435                           intcon	equ	0xFF2
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           indf2	equ	0xFDF
  4439                           postinc2	equ	0xFDE
  4440                           postdec2	equ	0xFDD
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function ___lldiv *****************
  4446 ;; Defined at:
  4447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  dividend        4   19[COMRAM] unsigned long 
  4450 ;;  divisor         4   23[COMRAM] unsigned long 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  quotient        4   27[COMRAM] unsigned long 
  4453 ;;  counter         1   31[COMRAM] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  4   19[COMRAM] unsigned long 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:       13 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    3
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_sprintf
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text13
  4478  002DB6                     __ptext13:
  4479                           	opt stack 0
  4480  002DB6                     ___lldiv:
  4481                           	opt stack 25
  4482                           
  4483                           ;incstack = 0
  4484  002DB6  0E00               	movlw	0
  4485  002DB8  6E1C               	movwf	___lldiv@quotient,c
  4486  002DBA  0E00               	movlw	0
  4487  002DBC  6E1D               	movwf	___lldiv@quotient+1,c
  4488  002DBE  0E00               	movlw	0
  4489  002DC0  6E1E               	movwf	___lldiv@quotient+2,c
  4490  002DC2  0E00               	movlw	0
  4491  002DC4  6E1F               	movwf	___lldiv@quotient+3,c
  4492  002DC6  5018               	movf	___lldiv@divisor,w,c
  4493  002DC8  1019               	iorwf	___lldiv@divisor+1,w,c
  4494  002DCA  101A               	iorwf	___lldiv@divisor+2,w,c
  4495  002DCC  101B               	iorwf	___lldiv@divisor+3,w,c
  4496  002DCE  B4D8               	btfsc	status,2,c
  4497  002DD0  D02A               	goto	l1125
  4498  002DD2  0E01               	movlw	1
  4499  002DD4  6E20               	movwf	___lldiv@counter,c
  4500  002DD6  D006               	goto	l3451
  4501  002DD8                     l3449:
  4502  002DD8  90D8               	bcf	status,0,c
  4503  002DDA  3618               	rlcf	___lldiv@divisor,f,c
  4504  002DDC  3619               	rlcf	___lldiv@divisor+1,f,c
  4505  002DDE  361A               	rlcf	___lldiv@divisor+2,f,c
  4506  002DE0  361B               	rlcf	___lldiv@divisor+3,f,c
  4507  002DE2  2A20               	incf	___lldiv@counter,f,c
  4508  002DE4                     l3451:
  4509  002DE4  AE1B               	btfss	___lldiv@divisor+3,7,c
  4510  002DE6  D7F8               	goto	l3449
  4511  002DE8                     l3453:
  4512  002DE8  90D8               	bcf	status,0,c
  4513  002DEA  361C               	rlcf	___lldiv@quotient,f,c
  4514  002DEC  361D               	rlcf	___lldiv@quotient+1,f,c
  4515  002DEE  361E               	rlcf	___lldiv@quotient+2,f,c
  4516  002DF0  361F               	rlcf	___lldiv@quotient+3,f,c
  4517  002DF2  5018               	movf	___lldiv@divisor,w,c
  4518  002DF4  5C14               	subwf	___lldiv@dividend,w,c
  4519  002DF6  5019               	movf	___lldiv@divisor+1,w,c
  4520  002DF8  5815               	subwfb	___lldiv@dividend+1,w,c
  4521  002DFA  501A               	movf	___lldiv@divisor+2,w,c
  4522  002DFC  5816               	subwfb	___lldiv@dividend+2,w,c
  4523  002DFE  501B               	movf	___lldiv@divisor+3,w,c
  4524  002E00  5817               	subwfb	___lldiv@dividend+3,w,c
  4525  002E02  A0D8               	btfss	status,0,c
  4526  002E04  D009               	goto	l3461
  4527  002E06  5018               	movf	___lldiv@divisor,w,c
  4528  002E08  5E14               	subwf	___lldiv@dividend,f,c
  4529  002E0A  5019               	movf	___lldiv@divisor+1,w,c
  4530  002E0C  5A15               	subwfb	___lldiv@dividend+1,f,c
  4531  002E0E  501A               	movf	___lldiv@divisor+2,w,c
  4532  002E10  5A16               	subwfb	___lldiv@dividend+2,f,c
  4533  002E12  501B               	movf	___lldiv@divisor+3,w,c
  4534  002E14  5A17               	subwfb	___lldiv@dividend+3,f,c
  4535  002E16  801C               	bsf	___lldiv@quotient,0,c
  4536  002E18                     l3461:
  4537  002E18  90D8               	bcf	status,0,c
  4538  002E1A  321B               	rrcf	___lldiv@divisor+3,f,c
  4539  002E1C  321A               	rrcf	___lldiv@divisor+2,f,c
  4540  002E1E  3219               	rrcf	___lldiv@divisor+1,f,c
  4541  002E20  3218               	rrcf	___lldiv@divisor,f,c
  4542  002E22  2E20               	decfsz	___lldiv@counter,f,c
  4543  002E24  D7E1               	goto	l3453
  4544  002E26                     l1125:
  4545  002E26  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  4546  002E2A  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  4547  002E2E  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  4548  002E32  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  4549  002E36  0012               	return		;funcret
  4550  002E38                     __end_of___lldiv:
  4551                           	opt stack 0
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           intcon	equ	0xFF2
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function ___fttol *****************
  4569 ;; Defined at:
  4570 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  f1              3    7[BANK0 ] float 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  lval            4   17[BANK0 ] unsigned long 
  4575 ;;  exp1            1   21[BANK0 ] unsigned char 
  4576 ;;  sign1           1   16[BANK0 ] unsigned char 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  4    7[BANK0 ] long 
  4579 ;; Registers used:
  4580 ;;		wreg, status,2, status,0
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:       15 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    3
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_sprintf
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text14
  4601  0025D2                     __ptext14:
  4602                           	opt stack 0
  4603  0025D2                     ___fttol:
  4604                           	opt stack 25
  4605                           
  4606                           ;incstack = 0
  4607  0025D2  C069  F06B         	movff	___fttol@f1+2,??___fttol
  4608  0025D6  0100               	movlb	0	; () banked
  4609  0025D8  6B6C               	clrf	(??___fttol+1)& (0+255),b
  4610  0025DA  6B6D               	clrf	(??___fttol+2)& (0+255),b
  4611  0025DC  0100               	movlb	0	; () banked
  4612  0025DE  3568               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4613  0025E0  0100               	movlb	0	; () banked
  4614  0025E2  376B               	rlcf	??___fttol& (0+255),f,b
  4615  0025E4  E301               	bnc	u4351
  4616  0025E6  816C               	bsf	(??___fttol+1)& (0+255),0,b
  4617  0025E8                     u4351:
  4618  0025E8  0100               	movlb	0	; () banked
  4619  0025EA  516B               	movf	??___fttol& (0+255),w,b
  4620  0025EC  0100               	movlb	0	; () banked
  4621  0025EE  6F75               	movwf	___fttol@exp1& (0+255),b
  4622  0025F0  0100               	movlb	0	; () banked
  4623  0025F2  5175               	movf	___fttol@exp1& (0+255),w,b
  4624  0025F4  A4D8               	btfss	status,2,c
  4625  0025F6  D00A               	goto	l4551
  4626                           
  4627                           ; BSR set to: 0
  4628  0025F8  0E00               	movlw	0
  4629  0025FA  0100               	movlb	0	; () banked
  4630  0025FC  6F67               	movwf	?___fttol& (0+255),b
  4631  0025FE  0E00               	movlw	0
  4632  002600  6F68               	movwf	(?___fttol+1)& (0+255),b
  4633  002602  0E00               	movlw	0
  4634  002604  6F69               	movwf	(?___fttol+2)& (0+255),b
  4635  002606  0E00               	movlw	0
  4636  002608  6F6A               	movwf	(?___fttol+3)& (0+255),b
  4637                           
  4638                           ; BSR set to: 0
  4639  00260A  0012               	return	
  4640  00260C                     l4551:
  4641                           
  4642                           ; BSR set to: 0
  4643  00260C  0E17               	movlw	23
  4644  00260E  0100               	movlb	0	; () banked
  4645  002610  6F6B               	movwf	??___fttol& (0+255),b
  4646  002612  C067  F06C         	movff	___fttol@f1,??___fttol+1
  4647  002616  C068  F06D         	movff	___fttol@f1+1,??___fttol+2
  4648  00261A  C069  F06E         	movff	___fttol@f1+2,??___fttol+3
  4649  00261E  0100               	movlb	0	; () banked
  4650  002620  296B               	incf	??___fttol& (0+255),w,b
  4651  002622  0100               	movlb	0	; () banked
  4652  002624  6F6F               	movwf	(??___fttol+4)& (0+255),b
  4653  002626  D005               	goto	u4370
  4654  002628                     u4375:
  4655  002628  0100               	movlb	0	; () banked
  4656  00262A  90D8               	bcf	status,0,c
  4657  00262C  336E               	rrcf	(??___fttol+3)& (0+255),f,b
  4658  00262E  336D               	rrcf	(??___fttol+2)& (0+255),f,b
  4659  002630  336C               	rrcf	(??___fttol+1)& (0+255),f,b
  4660  002632                     u4370:
  4661  002632  0100               	movlb	0	; () banked
  4662  002634  2F6F               	decfsz	(??___fttol+4)& (0+255),f,b
  4663  002636  D7F8               	goto	u4375
  4664  002638  0100               	movlb	0	; () banked
  4665  00263A  516C               	movf	(??___fttol+1)& (0+255),w,b
  4666  00263C  0100               	movlb	0	; () banked
  4667  00263E  6F70               	movwf	___fttol@sign1& (0+255),b
  4668                           
  4669                           ; BSR set to: 0
  4670  002640  0100               	movlb	0	; () banked
  4671  002642  8F68               	bsf	(___fttol@f1+1)& (0+255),7,b
  4672                           
  4673                           ; BSR set to: 0
  4674  002644  0EFF               	movlw	255
  4675  002646  0100               	movlb	0	; () banked
  4676  002648  1767               	andwf	___fttol@f1& (0+255),f,b
  4677  00264A  0EFF               	movlw	255
  4678  00264C  0100               	movlb	0	; () banked
  4679  00264E  1768               	andwf	(___fttol@f1+1)& (0+255),f,b
  4680  002650  0E00               	movlw	0
  4681  002652  0100               	movlb	0	; () banked
  4682  002654  1769               	andwf	(___fttol@f1+2)& (0+255),f,b
  4683                           
  4684                           ; BSR set to: 0
  4685  002656  0100               	movlb	0	; () banked
  4686  002658  5167               	movf	___fttol@f1& (0+255),w,b
  4687  00265A  0100               	movlb	0	; () banked
  4688  00265C  6F71               	movwf	___fttol@lval& (0+255),b
  4689  00265E  0100               	movlb	0	; () banked
  4690  002660  5168               	movf	(___fttol@f1+1)& (0+255),w,b
  4691  002662  0100               	movlb	0	; () banked
  4692  002664  6F72               	movwf	(___fttol@lval+1)& (0+255),b
  4693  002666  0100               	movlb	0	; () banked
  4694  002668  5169               	movf	(___fttol@f1+2)& (0+255),w,b
  4695  00266A  0100               	movlb	0	; () banked
  4696  00266C  6F73               	movwf	(___fttol@lval+2)& (0+255),b
  4697  00266E  0100               	movlb	0	; () banked
  4698  002670  6B74               	clrf	(___fttol@lval+3)& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701  002672  0E8E               	movlw	142
  4702  002674  0100               	movlb	0	; () banked
  4703  002676  5F75               	subwf	___fttol@exp1& (0+255),f,b
  4704                           
  4705                           ; BSR set to: 0
  4706  002678  0100               	movlb	0	; () banked
  4707  00267A  AF75               	btfss	___fttol@exp1& (0+255),7,b
  4708  00267C  D01A               	goto	l4573
  4709                           
  4710                           ; BSR set to: 0
  4711  00267E  0100               	movlb	0	; () banked
  4712  002680  5175               	movf	___fttol@exp1& (0+255),w,b
  4713  002682  0A80               	xorlw	128
  4714  002684  0F8F               	addlw	143
  4715  002686  B0D8               	btfsc	status,0,c
  4716  002688  D00A               	goto	l4569
  4717                           
  4718                           ; BSR set to: 0
  4719  00268A  0E00               	movlw	0
  4720  00268C  0100               	movlb	0	; () banked
  4721  00268E  6F67               	movwf	?___fttol& (0+255),b
  4722  002690  0E00               	movlw	0
  4723  002692  6F68               	movwf	(?___fttol+1)& (0+255),b
  4724  002694  0E00               	movlw	0
  4725  002696  6F69               	movwf	(?___fttol+2)& (0+255),b
  4726  002698  0E00               	movlw	0
  4727  00269A  6F6A               	movwf	(?___fttol+3)& (0+255),b
  4728                           
  4729                           ; BSR set to: 0
  4730  00269C  0012               	return	
  4731  00269E                     l4569:
  4732                           
  4733                           ; BSR set to: 0
  4734  00269E  0100               	movlb	0	; () banked
  4735  0026A0  90D8               	bcf	status,0,c
  4736  0026A2  3374               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4737  0026A4  3373               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4738  0026A6  3372               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4739  0026A8  3371               	rrcf	___fttol@lval& (0+255),f,b
  4740                           
  4741                           ; BSR set to: 0
  4742  0026AA  0100               	movlb	0	; () banked
  4743  0026AC  3F75               	incfsz	___fttol@exp1& (0+255),f,b
  4744  0026AE  D7F7               	goto	l4569
  4745                           
  4746                           ; BSR set to: 0
  4747  0026B0  D01B               	goto	l4583
  4748  0026B2                     l4573:
  4749                           
  4750                           ; BSR set to: 0
  4751  0026B2  0E17               	movlw	23
  4752  0026B4  0100               	movlb	0	; () banked
  4753  0026B6  6575               	cpfsgt	___fttol@exp1& (0+255),b
  4754  0026B8  D012               	goto	l4581
  4755                           
  4756                           ; BSR set to: 0
  4757  0026BA  0E00               	movlw	0
  4758  0026BC  0100               	movlb	0	; () banked
  4759  0026BE  6F67               	movwf	?___fttol& (0+255),b
  4760  0026C0  0E00               	movlw	0
  4761  0026C2  6F68               	movwf	(?___fttol+1)& (0+255),b
  4762  0026C4  0E00               	movlw	0
  4763  0026C6  6F69               	movwf	(?___fttol+2)& (0+255),b
  4764  0026C8  0E00               	movlw	0
  4765  0026CA  6F6A               	movwf	(?___fttol+3)& (0+255),b
  4766                           
  4767                           ; BSR set to: 0
  4768  0026CC  0012               	return	
  4769  0026CE                     l4579:
  4770                           
  4771                           ; BSR set to: 0
  4772  0026CE  0100               	movlb	0	; () banked
  4773  0026D0  90D8               	bcf	status,0,c
  4774  0026D2  3771               	rlcf	___fttol@lval& (0+255),f,b
  4775  0026D4  3772               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4776  0026D6  3773               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4777  0026D8  3774               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4778  0026DA  0100               	movlb	0	; () banked
  4779  0026DC  0775               	decf	___fttol@exp1& (0+255),f,b
  4780  0026DE                     l4581:
  4781                           
  4782                           ; BSR set to: 0
  4783  0026DE  0100               	movlb	0	; () banked
  4784  0026E0  5175               	movf	___fttol@exp1& (0+255),w,b
  4785  0026E2  0100               	movlb	0	; () banked
  4786  0026E4  A4D8               	btfss	status,2,c
  4787  0026E6  D7F3               	goto	l4579
  4788  0026E8                     l4583:
  4789                           
  4790                           ; BSR set to: 0
  4791  0026E8  0100               	movlb	0	; () banked
  4792  0026EA  5170               	movf	___fttol@sign1& (0+255),w,b
  4793  0026EC  0100               	movlb	0	; () banked
  4794  0026EE  B4D8               	btfsc	status,2,c
  4795  0026F0  D009               	goto	l4587
  4796                           
  4797                           ; BSR set to: 0
  4798  0026F2  0100               	movlb	0	; () banked
  4799  0026F4  1F74               	comf	(___fttol@lval+3)& (0+255),f,b
  4800  0026F6  1F73               	comf	(___fttol@lval+2)& (0+255),f,b
  4801  0026F8  1F72               	comf	(___fttol@lval+1)& (0+255),f,b
  4802  0026FA  6D71               	negf	___fttol@lval& (0+255),b
  4803  0026FC  0E00               	movlw	0
  4804  0026FE  2372               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4805  002700  2373               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4806  002702  2374               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4807  002704                     l4587:
  4808                           
  4809                           ; BSR set to: 0
  4810  002704  C071  F067         	movff	___fttol@lval,?___fttol
  4811  002708  C072  F068         	movff	___fttol@lval+1,?___fttol+1
  4812  00270C  C073  F069         	movff	___fttol@lval+2,?___fttol+2
  4813  002710  C074  F06A         	movff	___fttol@lval+3,?___fttol+3
  4814  002714  0012               	return	
  4815  002716                     __end_of___fttol:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           intcon	equ	0xFF2
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           indf2	equ	0xFDF
  4827                           postinc2	equ	0xFDE
  4828                           postdec2	equ	0xFDD
  4829                           fsr2h	equ	0xFDA
  4830                           fsr2l	equ	0xFD9
  4831                           status	equ	0xFD8
  4832                           
  4833 ;; *************** function ___ftsub *****************
  4834 ;; Defined at:
  4835 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  f1              3   22[BANK0 ] float 
  4838 ;;  f2              3   25[BANK0 ] float 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  3   22[BANK0 ] float 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4850 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;Total ram usage:        6 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    5
  4857 ;; This function calls:
  4858 ;;		___ftadd
  4859 ;; This function is called by:
  4860 ;;		_sprintf
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text15
  4865  002FB8                     __ptext15:
  4866                           	opt stack 0
  4867  002FB8                     ___ftsub:
  4868                           	opt stack 23
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;incstack = 0
  4872  002FB8  0100               	movlb	0	; () banked
  4873  002FBA  5179               	movf	___ftsub@f2& (0+255),w,b
  4874  002FBC  0100               	movlb	0	; () banked
  4875  002FBE  117A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4876  002FC0  0100               	movlb	0	; () banked
  4877  002FC2  117B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4878  002FC4  B4D8               	btfsc	status,2,c
  4879  002FC6  D009               	goto	l4541
  4880                           
  4881                           ; BSR set to: 0
  4882  002FC8  0E00               	movlw	0
  4883  002FCA  0100               	movlb	0	; () banked
  4884  002FCC  1B79               	xorwf	___ftsub@f2& (0+255),f,b
  4885  002FCE  0E00               	movlw	0
  4886  002FD0  0100               	movlb	0	; () banked
  4887  002FD2  1B7A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4888  002FD4  0E80               	movlw	128
  4889  002FD6  0100               	movlb	0	; () banked
  4890  002FD8  1B7B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4891  002FDA                     l4541:
  4892                           
  4893                           ; BSR set to: 0
  4894  002FDA  C076  F06A         	movff	___ftsub@f1,___ftadd@f1
  4895  002FDE  C077  F06B         	movff	___ftsub@f1+1,___ftadd@f1+1
  4896  002FE2  C078  F06C         	movff	___ftsub@f1+2,___ftadd@f1+2
  4897  002FE6  C079  F06D         	movff	___ftsub@f2,___ftadd@f2
  4898  002FEA  C07A  F06E         	movff	___ftsub@f2+1,___ftadd@f2+1
  4899  002FEE  C07B  F06F         	movff	___ftsub@f2+2,___ftadd@f2+2
  4900  002FF2  ECD5  F00F         	call	___ftadd	;wreg free
  4901  002FF6  C06A  F076         	movff	?___ftadd,?___ftsub
  4902  002FFA  C06B  F077         	movff	?___ftadd+1,?___ftsub+1
  4903  002FFE  C06C  F078         	movff	?___ftadd+2,?___ftsub+2
  4904  003002  0012               	return	
  4905  003004                     __end_of___ftsub:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           postinc0	equ	0xFEE
  4915                           wreg	equ	0xFE8
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function ___ftadd *****************
  4924 ;; Defined at:
  4925 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  f1              3   10[BANK0 ] float 
  4928 ;;  f2              3   13[BANK0 ] float 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  exp1            1   21[BANK0 ] unsigned char 
  4931 ;;  exp2            1   20[BANK0 ] unsigned char 
  4932 ;;  sign            1   19[BANK0 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  3   10[BANK0 ] float 
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4942 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;Total ram usage:       12 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    4
  4949 ;; This function calls:
  4950 ;;		___ftpack
  4951 ;; This function is called by:
  4952 ;;		_sprintf
  4953 ;;		___ftsub
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text16
  4958  001FAA                     __ptext16:
  4959                           	opt stack 0
  4960  001FAA                     ___ftadd:
  4961                           	opt stack 23
  4962                           
  4963                           ;incstack = 0
  4964  001FAA  C06C  F070         	movff	___ftadd@f1+2,??___ftadd
  4965  001FAE  0100               	movlb	0	; () banked
  4966  001FB0  6B71               	clrf	(??___ftadd+1)& (0+255),b
  4967  001FB2  6B72               	clrf	(??___ftadd+2)& (0+255),b
  4968  001FB4  0100               	movlb	0	; () banked
  4969  001FB6  356B               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4970  001FB8  0100               	movlb	0	; () banked
  4971  001FBA  3770               	rlcf	??___ftadd& (0+255),f,b
  4972  001FBC  E301               	bnc	u3881
  4973  001FBE  8171               	bsf	(??___ftadd+1)& (0+255),0,b
  4974  001FC0                     u3881:
  4975  001FC0  0100               	movlb	0	; () banked
  4976  001FC2  5170               	movf	??___ftadd& (0+255),w,b
  4977  001FC4  0100               	movlb	0	; () banked
  4978  001FC6  6F75               	movwf	___ftadd@exp1& (0+255),b
  4979  001FC8  C06F  F070         	movff	___ftadd@f2+2,??___ftadd
  4980  001FCC  0100               	movlb	0	; () banked
  4981  001FCE  6B71               	clrf	(??___ftadd+1)& (0+255),b
  4982  001FD0  6B72               	clrf	(??___ftadd+2)& (0+255),b
  4983  001FD2  0100               	movlb	0	; () banked
  4984  001FD4  356E               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4985  001FD6  0100               	movlb	0	; () banked
  4986  001FD8  3770               	rlcf	??___ftadd& (0+255),f,b
  4987  001FDA  E301               	bnc	u3891
  4988  001FDC  8171               	bsf	(??___ftadd+1)& (0+255),0,b
  4989  001FDE                     u3891:
  4990  001FDE  0100               	movlb	0	; () banked
  4991  001FE0  5170               	movf	??___ftadd& (0+255),w,b
  4992  001FE2  0100               	movlb	0	; () banked
  4993  001FE4  6F74               	movwf	___ftadd@exp2& (0+255),b
  4994                           
  4995                           ; BSR set to: 0
  4996  001FE6  0100               	movlb	0	; () banked
  4997  001FE8  5175               	movf	___ftadd@exp1& (0+255),w,b
  4998  001FEA  0100               	movlb	0	; () banked
  4999  001FEC  B4D8               	btfsc	status,2,c
  5000  001FEE  D011               	goto	l1006
  5001                           
  5002                           ; BSR set to: 0
  5003  001FF0  0100               	movlb	0	; () banked
  5004  001FF2  5174               	movf	___ftadd@exp2& (0+255),w,b
  5005  001FF4  0100               	movlb	0	; () banked
  5006  001FF6  5D75               	subwf	___ftadd@exp1& (0+255),w,b
  5007  001FF8  B0D8               	btfsc	status,0,c
  5008  001FFA  D012               	goto	l4287
  5009                           
  5010                           ; BSR set to: 0
  5011  001FFC  0100               	movlb	0	; () banked
  5012  001FFE  5175               	movf	___ftadd@exp1& (0+255),w,b
  5013  002000  0800               	sublw	0
  5014  002002  0100               	movlb	0	; () banked
  5015  002004  2574               	addwf	___ftadd@exp2& (0+255),w,b
  5016  002006  0100               	movlb	0	; () banked
  5017  002008  6F70               	movwf	??___ftadd& (0+255),b
  5018  00200A  0E18               	movlw	24
  5019  00200C  0100               	movlb	0	; () banked
  5020  00200E  6570               	cpfsgt	??___ftadd& (0+255),b
  5021  002010  D007               	goto	l4287
  5022  002012                     l1006:
  5023                           
  5024                           ; BSR set to: 0
  5025  002012  C06D  F06A         	movff	___ftadd@f2,?___ftadd
  5026  002016  C06E  F06B         	movff	___ftadd@f2+1,?___ftadd+1
  5027  00201A  C06F  F06C         	movff	___ftadd@f2+2,?___ftadd+2
  5028  00201E  0012               	return	
  5029  002020                     l4287:
  5030                           
  5031                           ; BSR set to: 0
  5032  002020  0100               	movlb	0	; () banked
  5033  002022  5174               	movf	___ftadd@exp2& (0+255),w,b
  5034  002024  0100               	movlb	0	; () banked
  5035  002026  B4D8               	btfsc	status,2,c
  5036  002028  D011               	goto	l1010
  5037                           
  5038                           ; BSR set to: 0
  5039  00202A  0100               	movlb	0	; () banked
  5040  00202C  5175               	movf	___ftadd@exp1& (0+255),w,b
  5041  00202E  0100               	movlb	0	; () banked
  5042  002030  5D74               	subwf	___ftadd@exp2& (0+255),w,b
  5043  002032  B0D8               	btfsc	status,0,c
  5044  002034  D012               	goto	l4293
  5045                           
  5046                           ; BSR set to: 0
  5047  002036  0100               	movlb	0	; () banked
  5048  002038  5174               	movf	___ftadd@exp2& (0+255),w,b
  5049  00203A  0800               	sublw	0
  5050  00203C  0100               	movlb	0	; () banked
  5051  00203E  2575               	addwf	___ftadd@exp1& (0+255),w,b
  5052  002040  0100               	movlb	0	; () banked
  5053  002042  6F70               	movwf	??___ftadd& (0+255),b
  5054  002044  0E18               	movlw	24
  5055  002046  0100               	movlb	0	; () banked
  5056  002048  6570               	cpfsgt	??___ftadd& (0+255),b
  5057  00204A  D007               	goto	l4293
  5058  00204C                     l1010:
  5059                           
  5060                           ; BSR set to: 0
  5061  00204C  C06A  F06A         	movff	___ftadd@f1,?___ftadd
  5062  002050  C06B  F06B         	movff	___ftadd@f1+1,?___ftadd+1
  5063  002054  C06C  F06C         	movff	___ftadd@f1+2,?___ftadd+2
  5064  002058  0012               	return	
  5065  00205A                     l4293:
  5066                           
  5067                           ; BSR set to: 0
  5068  00205A  0E06               	movlw	6
  5069  00205C  0100               	movlb	0	; () banked
  5070  00205E  6F73               	movwf	___ftadd@sign& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073  002060  0100               	movlb	0	; () banked
  5074  002062  AF6C               	btfss	(___ftadd@f1+2)& (0+255),7,b
  5075  002064  D002               	goto	l4299
  5076                           
  5077                           ; BSR set to: 0
  5078  002066  0100               	movlb	0	; () banked
  5079  002068  8F73               	bsf	___ftadd@sign& (0+255),7,b
  5080  00206A                     l4299:
  5081                           
  5082                           ; BSR set to: 0
  5083  00206A  0100               	movlb	0	; () banked
  5084  00206C  AF6F               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5085  00206E  D002               	goto	l1012
  5086                           
  5087                           ; BSR set to: 0
  5088  002070  0100               	movlb	0	; () banked
  5089  002072  8D73               	bsf	___ftadd@sign& (0+255),6,b
  5090  002074                     l1012:
  5091                           
  5092                           ; BSR set to: 0
  5093  002074  0100               	movlb	0	; () banked
  5094  002076  8F6B               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5095                           
  5096                           ; BSR set to: 0
  5097  002078  0EFF               	movlw	255
  5098  00207A  0100               	movlb	0	; () banked
  5099  00207C  176A               	andwf	___ftadd@f1& (0+255),f,b
  5100  00207E  0EFF               	movlw	255
  5101  002080  0100               	movlb	0	; () banked
  5102  002082  176B               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5103  002084  0E00               	movlw	0
  5104  002086  0100               	movlb	0	; () banked
  5105  002088  176C               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5106  00208A  0100               	movlb	0	; () banked
  5107  00208C  8F6E               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5108                           
  5109                           ; BSR set to: 0
  5110  00208E  0EFF               	movlw	255
  5111  002090  0100               	movlb	0	; () banked
  5112  002092  176D               	andwf	___ftadd@f2& (0+255),f,b
  5113  002094  0EFF               	movlw	255
  5114  002096  0100               	movlb	0	; () banked
  5115  002098  176E               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5116  00209A  0E00               	movlw	0
  5117  00209C  0100               	movlb	0	; () banked
  5118  00209E  176F               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5119                           
  5120                           ; BSR set to: 0
  5121  0020A0  0100               	movlb	0	; () banked
  5122  0020A2  5174               	movf	___ftadd@exp2& (0+255),w,b
  5123  0020A4  0100               	movlb	0	; () banked
  5124  0020A6  5D75               	subwf	___ftadd@exp1& (0+255),w,b
  5125  0020A8  B0D8               	btfsc	status,0,c
  5126  0020AA  D025               	goto	l4319
  5127  0020AC                     l4309:
  5128                           
  5129                           ; BSR set to: 0
  5130  0020AC  0100               	movlb	0	; () banked
  5131  0020AE  90D8               	bcf	status,0,c
  5132  0020B0  376D               	rlcf	___ftadd@f2& (0+255),f,b
  5133  0020B2  376E               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5134  0020B4  376F               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5135  0020B6  0100               	movlb	0	; () banked
  5136  0020B8  0774               	decf	___ftadd@exp2& (0+255),f,b
  5137                           
  5138                           ; BSR set to: 0
  5139  0020BA  0100               	movlb	0	; () banked
  5140  0020BC  5175               	movf	___ftadd@exp1& (0+255),w,b
  5141  0020BE  0100               	movlb	0	; () banked
  5142  0020C0  1974               	xorwf	___ftadd@exp2& (0+255),w,b
  5143  0020C2  B4D8               	btfsc	status,2,c
  5144  0020C4  D011               	goto	l4317
  5145                           
  5146                           ; BSR set to: 0
  5147  0020C6  0100               	movlb	0	; () banked
  5148  0020C8  0773               	decf	___ftadd@sign& (0+255),f,b
  5149  0020CA  C073  F070         	movff	___ftadd@sign,??___ftadd
  5150  0020CE  0E07               	movlw	7
  5151  0020D0  0100               	movlb	0	; () banked
  5152  0020D2  1770               	andwf	??___ftadd& (0+255),f,b
  5153  0020D4  B4D8               	btfsc	status,2,c
  5154  0020D6  D008               	goto	l4317
  5155  0020D8  D7E9               	goto	l4309
  5156  0020DA                     l4315:
  5157                           
  5158                           ; BSR set to: 0
  5159  0020DA  0100               	movlb	0	; () banked
  5160  0020DC  90D8               	bcf	status,0,c
  5161  0020DE  336C               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5162  0020E0  336B               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5163  0020E2  336A               	rrcf	___ftadd@f1& (0+255),f,b
  5164  0020E4  0100               	movlb	0	; () banked
  5165  0020E6  2B75               	incf	___ftadd@exp1& (0+255),f,b
  5166  0020E8                     l4317:
  5167                           
  5168                           ; BSR set to: 0
  5169  0020E8  0100               	movlb	0	; () banked
  5170  0020EA  5174               	movf	___ftadd@exp2& (0+255),w,b
  5171  0020EC  0100               	movlb	0	; () banked
  5172  0020EE  1975               	xorwf	___ftadd@exp1& (0+255),w,b
  5173  0020F0  B4D8               	btfsc	status,2,c
  5174  0020F2  D02B               	goto	l1021
  5175  0020F4  D7F2               	goto	l4315
  5176  0020F6                     l4319:
  5177                           
  5178                           ; BSR set to: 0
  5179  0020F6  0100               	movlb	0	; () banked
  5180  0020F8  5175               	movf	___ftadd@exp1& (0+255),w,b
  5181  0020FA  0100               	movlb	0	; () banked
  5182  0020FC  5D74               	subwf	___ftadd@exp2& (0+255),w,b
  5183  0020FE  B0D8               	btfsc	status,0,c
  5184  002100  D024               	goto	l1021
  5185  002102                     l4321:
  5186                           
  5187                           ; BSR set to: 0
  5188  002102  0100               	movlb	0	; () banked
  5189  002104  90D8               	bcf	status,0,c
  5190  002106  376A               	rlcf	___ftadd@f1& (0+255),f,b
  5191  002108  376B               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5192  00210A  376C               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5193  00210C  0100               	movlb	0	; () banked
  5194  00210E  0775               	decf	___ftadd@exp1& (0+255),f,b
  5195                           
  5196                           ; BSR set to: 0
  5197  002110  0100               	movlb	0	; () banked
  5198  002112  5175               	movf	___ftadd@exp1& (0+255),w,b
  5199  002114  0100               	movlb	0	; () banked
  5200  002116  1974               	xorwf	___ftadd@exp2& (0+255),w,b
  5201  002118  B4D8               	btfsc	status,2,c
  5202  00211A  D011               	goto	l4329
  5203                           
  5204                           ; BSR set to: 0
  5205  00211C  0100               	movlb	0	; () banked
  5206  00211E  0773               	decf	___ftadd@sign& (0+255),f,b
  5207  002120  C073  F070         	movff	___ftadd@sign,??___ftadd
  5208  002124  0E07               	movlw	7
  5209  002126  0100               	movlb	0	; () banked
  5210  002128  1770               	andwf	??___ftadd& (0+255),f,b
  5211  00212A  B4D8               	btfsc	status,2,c
  5212  00212C  D008               	goto	l4329
  5213  00212E  D7E9               	goto	l4321
  5214  002130                     l4327:
  5215                           
  5216                           ; BSR set to: 0
  5217  002130  0100               	movlb	0	; () banked
  5218  002132  90D8               	bcf	status,0,c
  5219  002134  336F               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5220  002136  336E               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5221  002138  336D               	rrcf	___ftadd@f2& (0+255),f,b
  5222  00213A  0100               	movlb	0	; () banked
  5223  00213C  2B74               	incf	___ftadd@exp2& (0+255),f,b
  5224  00213E                     l4329:
  5225                           
  5226                           ; BSR set to: 0
  5227  00213E  0100               	movlb	0	; () banked
  5228  002140  5174               	movf	___ftadd@exp2& (0+255),w,b
  5229  002142  0100               	movlb	0	; () banked
  5230  002144  1975               	xorwf	___ftadd@exp1& (0+255),w,b
  5231  002146  A4D8               	btfss	status,2,c
  5232  002148  D7F3               	goto	l4327
  5233  00214A                     l1021:
  5234                           
  5235                           ; BSR set to: 0
  5236  00214A  0100               	movlb	0	; () banked
  5237  00214C  AF73               	btfss	___ftadd@sign& (0+255),7,b
  5238  00214E  D012               	goto	l1030
  5239                           
  5240                           ; BSR set to: 0
  5241  002150  0EFF               	movlw	255
  5242  002152  0100               	movlb	0	; () banked
  5243  002154  1B6A               	xorwf	___ftadd@f1& (0+255),f,b
  5244  002156  0EFF               	movlw	255
  5245  002158  0100               	movlb	0	; () banked
  5246  00215A  1B6B               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5247  00215C  0EFF               	movlw	255
  5248  00215E  0100               	movlb	0	; () banked
  5249  002160  1B6C               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5250  002162  0E01               	movlw	1
  5251  002164  0100               	movlb	0	; () banked
  5252  002166  276A               	addwf	___ftadd@f1& (0+255),f,b
  5253  002168  0E00               	movlw	0
  5254  00216A  0100               	movlb	0	; () banked
  5255  00216C  236B               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5256  00216E  0E00               	movlw	0
  5257  002170  0100               	movlb	0	; () banked
  5258  002172  236C               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5259  002174                     l1030:
  5260                           
  5261                           ; BSR set to: 0
  5262  002174  0100               	movlb	0	; () banked
  5263  002176  AD73               	btfss	___ftadd@sign& (0+255),6,b
  5264  002178  D012               	goto	l4335
  5265                           
  5266                           ; BSR set to: 0
  5267  00217A  0EFF               	movlw	255
  5268  00217C  0100               	movlb	0	; () banked
  5269  00217E  1B6D               	xorwf	___ftadd@f2& (0+255),f,b
  5270  002180  0EFF               	movlw	255
  5271  002182  0100               	movlb	0	; () banked
  5272  002184  1B6E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5273  002186  0EFF               	movlw	255
  5274  002188  0100               	movlb	0	; () banked
  5275  00218A  1B6F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5276  00218C  0E01               	movlw	1
  5277  00218E  0100               	movlb	0	; () banked
  5278  002190  276D               	addwf	___ftadd@f2& (0+255),f,b
  5279  002192  0E00               	movlw	0
  5280  002194  0100               	movlb	0	; () banked
  5281  002196  236E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5282  002198  0E00               	movlw	0
  5283  00219A  0100               	movlb	0	; () banked
  5284  00219C  236F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5285  00219E                     l4335:
  5286                           
  5287                           ; BSR set to: 0
  5288  00219E  0E00               	movlw	0
  5289  0021A0  0100               	movlb	0	; () banked
  5290  0021A2  6F73               	movwf	___ftadd@sign& (0+255),b
  5291                           
  5292                           ; BSR set to: 0
  5293  0021A4  0100               	movlb	0	; () banked
  5294  0021A6  516A               	movf	___ftadd@f1& (0+255),w,b
  5295  0021A8  0100               	movlb	0	; () banked
  5296  0021AA  276D               	addwf	___ftadd@f2& (0+255),f,b
  5297  0021AC  0100               	movlb	0	; () banked
  5298  0021AE  516B               	movf	(___ftadd@f1+1)& (0+255),w,b
  5299  0021B0  0100               	movlb	0	; () banked
  5300  0021B2  236E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5301  0021B4  0100               	movlb	0	; () banked
  5302  0021B6  516C               	movf	(___ftadd@f1+2)& (0+255),w,b
  5303  0021B8  0100               	movlb	0	; () banked
  5304  0021BA  236F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5305                           
  5306                           ; BSR set to: 0
  5307  0021BC  0100               	movlb	0	; () banked
  5308  0021BE  AF6F               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5309  0021C0  D015               	goto	l4345
  5310                           
  5311                           ; BSR set to: 0
  5312  0021C2  0EFF               	movlw	255
  5313  0021C4  0100               	movlb	0	; () banked
  5314  0021C6  1B6D               	xorwf	___ftadd@f2& (0+255),f,b
  5315  0021C8  0EFF               	movlw	255
  5316  0021CA  0100               	movlb	0	; () banked
  5317  0021CC  1B6E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5318  0021CE  0EFF               	movlw	255
  5319  0021D0  0100               	movlb	0	; () banked
  5320  0021D2  1B6F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5321  0021D4  0E01               	movlw	1
  5322  0021D6  0100               	movlb	0	; () banked
  5323  0021D8  276D               	addwf	___ftadd@f2& (0+255),f,b
  5324  0021DA  0E00               	movlw	0
  5325  0021DC  0100               	movlb	0	; () banked
  5326  0021DE  236E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5327  0021E0  0E00               	movlw	0
  5328  0021E2  0100               	movlb	0	; () banked
  5329  0021E4  236F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5330                           
  5331                           ; BSR set to: 0
  5332  0021E6  0E01               	movlw	1
  5333  0021E8  0100               	movlb	0	; () banked
  5334  0021EA  6F73               	movwf	___ftadd@sign& (0+255),b
  5335  0021EC                     l4345:
  5336                           
  5337                           ; BSR set to: 0
  5338  0021EC  C06D  F014         	movff	___ftadd@f2,___ftpack@arg
  5339  0021F0  C06E  F015         	movff	___ftadd@f2+1,___ftpack@arg+1
  5340  0021F4  C06F  F016         	movff	___ftadd@f2+2,___ftpack@arg+2
  5341  0021F8  C075  F017         	movff	___ftadd@exp1,___ftpack@exp
  5342  0021FC  C073  F018         	movff	___ftadd@sign,___ftpack@sign
  5343  002200  EC32  F015         	call	___ftpack	;wreg free
  5344  002204  C014  F06A         	movff	?___ftpack,?___ftadd
  5345  002208  C015  F06B         	movff	?___ftpack+1,?___ftadd+1
  5346  00220C  C016  F06C         	movff	?___ftpack+2,?___ftadd+2
  5347  002210  0012               	return	
  5348  002212                     __end_of___ftadd:
  5349                           	opt stack 0
  5350                           tblptru	equ	0xFF8
  5351                           tblptrh	equ	0xFF7
  5352                           tblptrl	equ	0xFF6
  5353                           tablat	equ	0xFF5
  5354                           prodh	equ	0xFF4
  5355                           prodl	equ	0xFF3
  5356                           intcon	equ	0xFF2
  5357                           postinc0	equ	0xFEE
  5358                           wreg	equ	0xFE8
  5359                           indf2	equ	0xFDF
  5360                           postinc2	equ	0xFDE
  5361                           postdec2	equ	0xFDD
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function ___ftpack *****************
  5367 ;; Defined at:
  5368 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;  arg             3   19[COMRAM] unsigned um
  5371 ;;  exp             1   22[COMRAM] unsigned char 
  5372 ;;  sign            1   23[COMRAM] unsigned char 
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  3   19[COMRAM] float 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5384 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;Total ram usage:        8 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    3
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		___ftadd
  5395 ;;		___ftmul
  5396 ;;		___lltoft
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text17
  5401  002A64                     __ptext17:
  5402                           	opt stack 0
  5403  002A64                     ___ftpack:
  5404                           	opt stack 23
  5405                           
  5406                           ;incstack = 0
  5407  002A64  5017               	movf	___ftpack@exp,w,c
  5408  002A66  B4D8               	btfsc	status,2,c
  5409  002A68  D005               	goto	l4241
  5410  002A6A  5014               	movf	___ftpack@arg,w,c
  5411  002A6C  1015               	iorwf	___ftpack@arg+1,w,c
  5412  002A6E  1016               	iorwf	___ftpack@arg+2,w,c
  5413  002A70  A4D8               	btfss	status,2,c
  5414  002A72  D00C               	goto	l4247
  5415  002A74                     l4241:
  5416  002A74  0E00               	movlw	0
  5417  002A76  6E14               	movwf	?___ftpack,c
  5418  002A78  0E00               	movlw	0
  5419  002A7A  6E15               	movwf	?___ftpack+1,c
  5420  002A7C  0E00               	movlw	0
  5421  002A7E  6E16               	movwf	?___ftpack+2,c
  5422  002A80  0012               	return	
  5423  002A82                     l4245:
  5424  002A82  2A17               	incf	___ftpack@exp,f,c
  5425  002A84  90D8               	bcf	status,0,c
  5426  002A86  3216               	rrcf	___ftpack@arg+2,f,c
  5427  002A88  3215               	rrcf	___ftpack@arg+1,f,c
  5428  002A8A  3214               	rrcf	___ftpack@arg,f,c
  5429  002A8C                     l4247:
  5430  002A8C  0E00               	movlw	0
  5431  002A8E  1414               	andwf	___ftpack@arg,w,c
  5432  002A90  6E19               	movwf	??___ftpack& (0+255),c
  5433  002A92  0E00               	movlw	0
  5434  002A94  1415               	andwf	___ftpack@arg+1,w,c
  5435  002A96  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  5436  002A98  0EFE               	movlw	254
  5437  002A9A  1416               	andwf	___ftpack@arg+2,w,c
  5438  002A9C  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  5439  002A9E  5019               	movf	??___ftpack,w,c
  5440  002AA0  101A               	iorwf	??___ftpack+1,w,c
  5441  002AA2  101B               	iorwf	??___ftpack+2,w,c
  5442  002AA4  B4D8               	btfsc	status,2,c
  5443  002AA6  D00C               	goto	l4253
  5444  002AA8  D7EC               	goto	l4245
  5445  002AAA                     l4249:
  5446  002AAA  2A17               	incf	___ftpack@exp,f,c
  5447  002AAC  0E01               	movlw	1
  5448  002AAE  2614               	addwf	___ftpack@arg,f,c
  5449  002AB0  0E00               	movlw	0
  5450  002AB2  2215               	addwfc	___ftpack@arg+1,f,c
  5451  002AB4  0E00               	movlw	0
  5452  002AB6  2216               	addwfc	___ftpack@arg+2,f,c
  5453  002AB8  90D8               	bcf	status,0,c
  5454  002ABA  3216               	rrcf	___ftpack@arg+2,f,c
  5455  002ABC  3215               	rrcf	___ftpack@arg+1,f,c
  5456  002ABE  3214               	rrcf	___ftpack@arg,f,c
  5457  002AC0                     l4253:
  5458  002AC0  0E00               	movlw	0
  5459  002AC2  1414               	andwf	___ftpack@arg,w,c
  5460  002AC4  6E19               	movwf	??___ftpack& (0+255),c
  5461  002AC6  0E00               	movlw	0
  5462  002AC8  1415               	andwf	___ftpack@arg+1,w,c
  5463  002ACA  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  5464  002ACC  0EFF               	movlw	255
  5465  002ACE  1416               	andwf	___ftpack@arg+2,w,c
  5466  002AD0  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  5467  002AD2  5019               	movf	??___ftpack,w,c
  5468  002AD4  101A               	iorwf	??___ftpack+1,w,c
  5469  002AD6  101B               	iorwf	??___ftpack+2,w,c
  5470  002AD8  B4D8               	btfsc	status,2,c
  5471  002ADA  D006               	goto	l4257
  5472  002ADC  D7E6               	goto	l4249
  5473  002ADE                     l4255:
  5474  002ADE  0617               	decf	___ftpack@exp,f,c
  5475  002AE0  90D8               	bcf	status,0,c
  5476  002AE2  3614               	rlcf	___ftpack@arg,f,c
  5477  002AE4  3615               	rlcf	___ftpack@arg+1,f,c
  5478  002AE6  3616               	rlcf	___ftpack@arg+2,f,c
  5479  002AE8                     l4257:
  5480  002AE8  BE15               	btfsc	___ftpack@arg+1,7,c
  5481  002AEA  D003               	goto	l983
  5482  002AEC  0E02               	movlw	2
  5483  002AEE  6017               	cpfslt	___ftpack@exp,c
  5484  002AF0  D7F6               	goto	l4255
  5485  002AF2                     l983:
  5486  002AF2  A017               	btfss	___ftpack@exp,0,c
  5487  002AF4  9E15               	bcf	___ftpack@arg+1,7,c
  5488  002AF6  90D8               	bcf	status,0,c
  5489  002AF8  3217               	rrcf	___ftpack@exp,f,c
  5490  002AFA  5017               	movf	___ftpack@exp,w,c
  5491  002AFC  1216               	iorwf	___ftpack@arg+2,f,c
  5492  002AFE  5018               	movf	___ftpack@sign,w,c
  5493  002B00  A4D8               	btfss	status,2,c
  5494  002B02  8E16               	bsf	___ftpack@arg+2,7,c
  5495  002B04  C014  F014         	movff	___ftpack@arg,?___ftpack
  5496  002B08  C015  F015         	movff	___ftpack@arg+1,?___ftpack+1
  5497  002B0C  C016  F016         	movff	___ftpack@arg+2,?___ftpack+2
  5498  002B10  0012               	return	
  5499  002B12                     __end_of___ftpack:
  5500                           	opt stack 0
  5501                           tblptru	equ	0xFF8
  5502                           tblptrh	equ	0xFF7
  5503                           tblptrl	equ	0xFF6
  5504                           tablat	equ	0xFF5
  5505                           prodh	equ	0xFF4
  5506                           prodl	equ	0xFF3
  5507                           intcon	equ	0xFF2
  5508                           postinc0	equ	0xFEE
  5509                           wreg	equ	0xFE8
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function ___ftneg *****************
  5518 ;; Defined at:
  5519 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  f1              3   19[COMRAM] float 
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  3   19[COMRAM] float 
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5533 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;Total ram usage:        3 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    3
  5540 ;; This function calls:
  5541 ;;		Nothing
  5542 ;; This function is called by:
  5543 ;;		_sprintf
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           	psect	text18
  5548  0031EC                     __ptext18:
  5549                           	opt stack 0
  5550  0031EC                     ___ftneg:
  5551                           	opt stack 25
  5552                           
  5553                           ;incstack = 0
  5554  0031EC  5014               	movf	___ftneg@f1,w,c
  5555  0031EE  1015               	iorwf	___ftneg@f1+1,w,c
  5556  0031F0  1016               	iorwf	___ftneg@f1+2,w,c
  5557  0031F2  B4D8               	btfsc	status,2,c
  5558  0031F4  D006               	goto	l1080
  5559  0031F6  0E00               	movlw	0
  5560  0031F8  1A14               	xorwf	___ftneg@f1,f,c
  5561  0031FA  0E00               	movlw	0
  5562  0031FC  1A15               	xorwf	___ftneg@f1+1,f,c
  5563  0031FE  0E80               	movlw	128
  5564  003200  1A16               	xorwf	___ftneg@f1+2,f,c
  5565  003202                     l1080:
  5566  003202  C014  F014         	movff	___ftneg@f1,?___ftneg
  5567  003206  C015  F015         	movff	___ftneg@f1+1,?___ftneg+1
  5568  00320A  C016  F016         	movff	___ftneg@f1+2,?___ftneg+2
  5569  00320E  0012               	return		;funcret
  5570  003210                     __end_of___ftneg:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           postinc0	equ	0xFEE
  5580                           wreg	equ	0xFE8
  5581                           indf2	equ	0xFDF
  5582                           postinc2	equ	0xFDE
  5583                           postdec2	equ	0xFDD
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8
  5587                           
  5588 ;; *************** function ___ftge *****************
  5589 ;; Defined at:
  5590 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  ff1             3   19[COMRAM] float 
  5593 ;;  ff2             3   22[COMRAM] float 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;		None               void
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5605 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;Total ram usage:        9 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    3
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_sprintf
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text19
  5620  002B12                     __ptext19:
  5621                           	opt stack 0
  5622  002B12                     ___ftge:
  5623                           	opt stack 25
  5624                           
  5625                           ;incstack = 0
  5626  002B12  AE16               	btfss	___ftge@ff1+2,7,c
  5627  002B14  D016               	goto	l3379
  5628  002B16  C014  F01A         	movff	___ftge@ff1,??___ftge
  5629  002B1A  C015  F01B         	movff	___ftge@ff1+1,??___ftge+1
  5630  002B1E  C016  F01C         	movff	___ftge@ff1+2,??___ftge+2
  5631  002B22  1E1A               	comf	??___ftge,f,c
  5632  002B24  1E1B               	comf	??___ftge+1,f,c
  5633  002B26  1E1C               	comf	??___ftge+2,f,c
  5634  002B28  2A1A               	incf	??___ftge,f,c
  5635  002B2A  0E00               	movlw	0
  5636  002B2C  221B               	addwfc	??___ftge+1,f,c
  5637  002B2E  221C               	addwfc	??___ftge+2,f,c
  5638  002B30  0E00               	movlw	0
  5639  002B32  241A               	addwf	??___ftge,w,c
  5640  002B34  6E14               	movwf	___ftge@ff1,c
  5641  002B36  0E00               	movlw	0
  5642  002B38  201B               	addwfc	??___ftge+1,w,c
  5643  002B3A  6E15               	movwf	___ftge@ff1+1,c
  5644  002B3C  0E80               	movlw	128
  5645  002B3E  201C               	addwfc	??___ftge+2,w,c
  5646  002B40  6E16               	movwf	___ftge@ff1+2,c
  5647  002B42                     l3379:
  5648  002B42  AE19               	btfss	___ftge@ff2+2,7,c
  5649  002B44  D016               	goto	l3383
  5650  002B46  C017  F01A         	movff	___ftge@ff2,??___ftge
  5651  002B4A  C018  F01B         	movff	___ftge@ff2+1,??___ftge+1
  5652  002B4E  C019  F01C         	movff	___ftge@ff2+2,??___ftge+2
  5653  002B52  1E1A               	comf	??___ftge,f,c
  5654  002B54  1E1B               	comf	??___ftge+1,f,c
  5655  002B56  1E1C               	comf	??___ftge+2,f,c
  5656  002B58  2A1A               	incf	??___ftge,f,c
  5657  002B5A  0E00               	movlw	0
  5658  002B5C  221B               	addwfc	??___ftge+1,f,c
  5659  002B5E  221C               	addwfc	??___ftge+2,f,c
  5660  002B60  0E00               	movlw	0
  5661  002B62  241A               	addwf	??___ftge,w,c
  5662  002B64  6E17               	movwf	___ftge@ff2,c
  5663  002B66  0E00               	movlw	0
  5664  002B68  201B               	addwfc	??___ftge+1,w,c
  5665  002B6A  6E18               	movwf	___ftge@ff2+1,c
  5666  002B6C  0E80               	movlw	128
  5667  002B6E  201C               	addwfc	??___ftge+2,w,c
  5668  002B70  6E19               	movwf	___ftge@ff2+2,c
  5669  002B72                     l3383:
  5670  002B72  0E00               	movlw	0
  5671  002B74  1A14               	xorwf	___ftge@ff1,f,c
  5672  002B76  0E00               	movlw	0
  5673  002B78  1A15               	xorwf	___ftge@ff1+1,f,c
  5674  002B7A  0E80               	movlw	128
  5675  002B7C  1A16               	xorwf	___ftge@ff1+2,f,c
  5676  002B7E  0E00               	movlw	0
  5677  002B80  1A17               	xorwf	___ftge@ff2,f,c
  5678  002B82  0E00               	movlw	0
  5679  002B84  1A18               	xorwf	___ftge@ff2+1,f,c
  5680  002B86  0E80               	movlw	128
  5681  002B88  1A19               	xorwf	___ftge@ff2+2,f,c
  5682  002B8A  5017               	movf	___ftge@ff2,w,c
  5683  002B8C  5C14               	subwf	___ftge@ff1,w,c
  5684  002B8E  5018               	movf	___ftge@ff2+1,w,c
  5685  002B90  5815               	subwfb	___ftge@ff1+1,w,c
  5686  002B92  5019               	movf	___ftge@ff2+2,w,c
  5687  002B94  5816               	subwfb	___ftge@ff1+2,w,c
  5688  002B96  B0D8               	btfsc	status,0,c
  5689  002B98  D002               	goto	l3389
  5690  002B9A  90D8               	bcf	status,0,c
  5691  002B9C  0012               	return	
  5692  002B9E                     l3389:
  5693  002B9E  80D8               	bsf	status,0,c
  5694  002BA0  0012               	return	
  5695  002BA2                     __end_of___ftge:
  5696                           	opt stack 0
  5697                           tblptru	equ	0xFF8
  5698                           tblptrh	equ	0xFF7
  5699                           tblptrl	equ	0xFF6
  5700                           tablat	equ	0xFF5
  5701                           prodh	equ	0xFF4
  5702                           prodl	equ	0xFF3
  5703                           intcon	equ	0xFF2
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           indf2	equ	0xFDF
  5707                           postinc2	equ	0xFDE
  5708                           postdec2	equ	0xFDD
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _lcd_msg *****************
  5714 ;; Defined at:
  5715 ;;		line 58 in file "DriverLCD16x2.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  c               2   22[COMRAM] PTR unsigned char 
  5718 ;;		 -> lcd_msg_float@aux(5), lcd_msg_int@aux(10), 
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  1    wreg      void 
  5723 ;; Registers used:
  5724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;Total ram usage:        2 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    6
  5737 ;; This function calls:
  5738 ;;		_lcd_dwr
  5739 ;; This function is called by:
  5740 ;;		_lcd_msg_float
  5741 ;;		_lcd_msg_int
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text20
  5746  003210                     __ptext20:
  5747                           	opt stack 0
  5748  003210                     _lcd_msg:
  5749                           	opt stack 23
  5750                           
  5751                           ;DriverLCD16x2.c: 60: while (*c != 0)
  5752                           
  5753                           ;incstack = 0
  5754  003210  D009               	goto	l3703
  5755  003212                     l3699:
  5756                           
  5757                           ;DriverLCD16x2.c: 61: {
  5758                           ;DriverLCD16x2.c: 62: lcd_dwr(*c++);
  5759  003212  C017  FFD9         	movff	lcd_msg@c,fsr2l
  5760  003216  C018  FFDA         	movff	lcd_msg@c+1,fsr2h
  5761  00321A  50DF               	movf	indf2,w,c
  5762  00321C  EC1A  F019         	call	_lcd_dwr
  5763  003220  4A17               	infsnz	lcd_msg@c,f,c
  5764  003222  2A18               	incf	lcd_msg@c+1,f,c
  5765  003224                     l3703:
  5766  003224  C017  FFD9         	movff	lcd_msg@c,fsr2l
  5767  003228  C018  FFDA         	movff	lcd_msg@c+1,fsr2h
  5768  00322C  50DF               	movf	indf2,w,c
  5769  00322E  B4D8               	btfsc	status,2,c
  5770  003230  0012               	return	
  5771  003232  D7EF               	goto	l3699
  5772  003234                     __end_of_lcd_msg:
  5773                           	opt stack 0
  5774                           tblptru	equ	0xFF8
  5775                           tblptrh	equ	0xFF7
  5776                           tblptrl	equ	0xFF6
  5777                           tablat	equ	0xFF5
  5778                           prodh	equ	0xFF4
  5779                           prodl	equ	0xFF3
  5780                           intcon	equ	0xFF2
  5781                           postinc0	equ	0xFEE
  5782                           wreg	equ	0xFE8
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           postdec2	equ	0xFDD
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _lcd_dwr *****************
  5791 ;; Defined at:
  5792 ;;		line 45 in file "DriverLCD16x2.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  x               1    wreg     unsigned char 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  x               1   21[COMRAM] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0, cstack
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;Total ram usage:        1 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    5
  5813 ;; This function calls:
  5814 ;;		_lcd_lat
  5815 ;; This function is called by:
  5816 ;;		_lcd_msg
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text21
  5821  003234                     __ptext21:
  5822                           	opt stack 0
  5823  003234                     _lcd_dwr:
  5824                           	opt stack 23
  5825                           
  5826                           ;incstack = 0
  5827                           ;lcd_dwr@x stored from wreg
  5828  003234  6E16               	movwf	lcd_dwr@x,c
  5829                           
  5830                           ;DriverLCD16x2.c: 47: PORTBbits.RB6 = 1;
  5831  003236  8C81               	bsf	3969,6,c	;volatile
  5832                           
  5833                           ;DriverLCD16x2.c: 48: PORTB &= 0xF0;
  5834  003238  0EF0               	movlw	240
  5835  00323A  1681               	andwf	3969,f,c	;volatile
  5836                           
  5837                           ;DriverLCD16x2.c: 49: PORTB |= ((x & 0xF0)>>4);
  5838  00323C  3816               	swapf	lcd_dwr@x,w,c
  5839  00323E  0B0F               	andlw	15
  5840  003240  0B0F               	andlw	15
  5841  003242  1281               	iorwf	3969,f,c	;volatile
  5842                           
  5843                           ;DriverLCD16x2.c: 50: lcd_lat();
  5844  003244  EC9B  F019         	call	_lcd_lat	;wreg free
  5845                           
  5846                           ;DriverLCD16x2.c: 52: PORTB &= 0xF0;
  5847  003248  0EF0               	movlw	240
  5848  00324A  1681               	andwf	3969,f,c	;volatile
  5849                           
  5850                           ;DriverLCD16x2.c: 53: PORTB |= ((x & 0x0F));
  5851  00324C  5016               	movf	lcd_dwr@x,w,c
  5852  00324E  0B0F               	andlw	15
  5853  003250  1281               	iorwf	3969,f,c	;volatile
  5854                           
  5855                           ;DriverLCD16x2.c: 54: lcd_lat();
  5856  003252  EC9B  F019         	call	_lcd_lat	;wreg free
  5857  003256  0012               	return		;funcret
  5858  003258                     __end_of_lcd_dwr:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _lcd_init *****************
  5877 ;; Defined at:
  5878 ;;		line 80 in file "DriverLCD16x2.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      void 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;Total ram usage:        0 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    6
  5899 ;; This function calls:
  5900 ;;		_Delay
  5901 ;;		_lcd_cmd
  5902 ;;		_lcd_cmd_hf
  5903 ;; This function is called by:
  5904 ;;		_main
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text22
  5909  002D32                     __ptext22:
  5910                           	opt stack 0
  5911  002D32                     _lcd_init:
  5912                           	opt stack 24
  5913                           
  5914                           ;DriverLCD16x2.c: 82: PORTBbits.RB5 = 0;
  5915                           
  5916                           ;incstack = 0
  5917  002D32  9A81               	bcf	3969,5,c	;volatile
  5918                           
  5919                           ;DriverLCD16x2.c: 83: PORTBbits.RB4 = 1;
  5920  002D34  8881               	bsf	3969,4,c	;volatile
  5921                           
  5922                           ;DriverLCD16x2.c: 84: lcd_cmd_hf(0x30);
  5923  002D36  0E30               	movlw	48
  5924  002D38  EC7B  F019         	call	_lcd_cmd_hf
  5925                           
  5926                           ;DriverLCD16x2.c: 85: Delay(10);
  5927  002D3C  0E00               	movlw	0
  5928  002D3E  6E15               	movwf	Delay@DelayCount+1,c
  5929  002D40  0E0A               	movlw	10
  5930  002D42  6E14               	movwf	Delay@DelayCount,c
  5931  002D44  EC92  F018         	call	_Delay	;wreg free
  5932                           
  5933                           ;DriverLCD16x2.c: 86: lcd_cmd_hf(0x20);
  5934  002D48  0E20               	movlw	32
  5935  002D4A  EC7B  F019         	call	_lcd_cmd_hf
  5936                           
  5937                           ;DriverLCD16x2.c: 87: Delay(1);
  5938  002D4E  0E00               	movlw	0
  5939  002D50  6E15               	movwf	Delay@DelayCount+1,c
  5940  002D52  0E01               	movlw	1
  5941  002D54  6E14               	movwf	Delay@DelayCount,c
  5942  002D56  EC92  F018         	call	_Delay	;wreg free
  5943                           
  5944                           ;DriverLCD16x2.c: 88: lcd_cmd(0x28);
  5945  002D5A  0E28               	movlw	40
  5946  002D5C  EC2C  F019         	call	_lcd_cmd
  5947                           
  5948                           ;DriverLCD16x2.c: 89: Delay(1);
  5949  002D60  0E00               	movlw	0
  5950  002D62  6E15               	movwf	Delay@DelayCount+1,c
  5951  002D64  0E01               	movlw	1
  5952  002D66  6E14               	movwf	Delay@DelayCount,c
  5953  002D68  EC92  F018         	call	_Delay	;wreg free
  5954                           
  5955                           ;DriverLCD16x2.c: 90: lcd_cmd(0x0E);
  5956  002D6C  0E0E               	movlw	14
  5957  002D6E  EC2C  F019         	call	_lcd_cmd
  5958                           
  5959                           ;DriverLCD16x2.c: 91: Delay(1);
  5960  002D72  0E00               	movlw	0
  5961  002D74  6E15               	movwf	Delay@DelayCount+1,c
  5962  002D76  0E01               	movlw	1
  5963  002D78  6E14               	movwf	Delay@DelayCount,c
  5964  002D7A  EC92  F018         	call	_Delay	;wreg free
  5965                           
  5966                           ;DriverLCD16x2.c: 92: lcd_cmd(0x01);
  5967  002D7E  0E01               	movlw	1
  5968  002D80  EC2C  F019         	call	_lcd_cmd
  5969                           
  5970                           ;DriverLCD16x2.c: 93: Delay(1);
  5971  002D84  0E00               	movlw	0
  5972  002D86  6E15               	movwf	Delay@DelayCount+1,c
  5973  002D88  0E01               	movlw	1
  5974  002D8A  6E14               	movwf	Delay@DelayCount,c
  5975  002D8C  EC92  F018         	call	_Delay	;wreg free
  5976                           
  5977                           ;DriverLCD16x2.c: 94: lcd_cmd(0x06);
  5978  002D90  0E06               	movlw	6
  5979  002D92  EC2C  F019         	call	_lcd_cmd
  5980                           
  5981                           ;DriverLCD16x2.c: 95: Delay(1);
  5982  002D96  0E00               	movlw	0
  5983  002D98  6E15               	movwf	Delay@DelayCount+1,c
  5984  002D9A  0E01               	movlw	1
  5985  002D9C  6E14               	movwf	Delay@DelayCount,c
  5986  002D9E  EC92  F018         	call	_Delay	;wreg free
  5987                           
  5988                           ;DriverLCD16x2.c: 96: lcd_cmd(0x80);
  5989  002DA2  0E80               	movlw	128
  5990  002DA4  EC2C  F019         	call	_lcd_cmd
  5991                           
  5992                           ;DriverLCD16x2.c: 97: Delay(1);
  5993  002DA8  0E00               	movlw	0
  5994  002DAA  6E15               	movwf	Delay@DelayCount+1,c
  5995  002DAC  0E01               	movlw	1
  5996  002DAE  6E14               	movwf	Delay@DelayCount,c
  5997  002DB0  EC92  F018         	call	_Delay	;wreg free
  5998  002DB4  0012               	return		;funcret
  5999  002DB6                     __end_of_lcd_init:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           intcon	equ	0xFF2
  6008                           postinc0	equ	0xFEE
  6009                           wreg	equ	0xFE8
  6010                           indf2	equ	0xFDF
  6011                           postinc2	equ	0xFDE
  6012                           postdec2	equ	0xFDD
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8
  6016                           
  6017 ;; *************** function _lcd_cmd_hf *****************
  6018 ;; Defined at:
  6019 ;;		line 37 in file "DriverLCD16x2.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  x               1    wreg     unsigned char 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  x               1   21[COMRAM] unsigned char 
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      void 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;Total ram usage:        1 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    5
  6040 ;; This function calls:
  6041 ;;		_lcd_lat
  6042 ;; This function is called by:
  6043 ;;		_lcd_init
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text23
  6048  0032F6                     __ptext23:
  6049                           	opt stack 0
  6050  0032F6                     _lcd_cmd_hf:
  6051                           	opt stack 24
  6052                           
  6053                           ;incstack = 0
  6054                           ;lcd_cmd_hf@x stored from wreg
  6055  0032F6  6E16               	movwf	lcd_cmd_hf@x,c
  6056                           
  6057                           ;DriverLCD16x2.c: 39: PORTBbits.RB6 = 0;
  6058  0032F8  9C81               	bcf	3969,6,c	;volatile
  6059                           
  6060                           ;DriverLCD16x2.c: 40: PORTB &= 0xF0;
  6061  0032FA  0EF0               	movlw	240
  6062  0032FC  1681               	andwf	3969,f,c	;volatile
  6063                           
  6064                           ;DriverLCD16x2.c: 41: PORTB |= ((x & 0xF0)>>4);
  6065  0032FE  3816               	swapf	lcd_cmd_hf@x,w,c
  6066  003300  0B0F               	andlw	15
  6067  003302  0B0F               	andlw	15
  6068  003304  1281               	iorwf	3969,f,c	;volatile
  6069                           
  6070                           ;DriverLCD16x2.c: 42: lcd_lat();
  6071  003306  EC9B  F019         	call	_lcd_lat	;wreg free
  6072  00330A  0012               	return		;funcret
  6073  00330C                     __end_of_lcd_cmd_hf:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _SYSTEM_Initialize *****************
  6092 ;; Defined at:
  6093 ;;		line 111 in file "mcc_generated_files/mcc.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2, status,0, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;Total ram usage:        0 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    5
  6114 ;; This function calls:
  6115 ;;		_EUSART1_Initialize
  6116 ;;		_I2C1_Initialize
  6117 ;;		_INTERRUPT_Initialize
  6118 ;;		_OSCILLATOR_Initialize
  6119 ;;		_PIN_MANAGER_Initialize
  6120 ;;		_PWM4_Initialize
  6121 ;;		_TMR2_Initialize
  6122 ;;		_TMR4_Initialize
  6123 ;; This function is called by:
  6124 ;;		_main
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text24
  6129  00327C                     __ptext24:
  6130                           	opt stack 0
  6131  00327C                     _SYSTEM_Initialize:
  6132                           	opt stack 25
  6133                           
  6134                           ;mcc.c: 114: INTERRUPT_Initialize();
  6135                           
  6136                           ;incstack = 0
  6137  00327C  ECCB  F019         	call	_INTERRUPT_Initialize	;wreg free
  6138                           
  6139                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6140  003280  ECB5  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  6141                           
  6142                           ;mcc.c: 116: OSCILLATOR_Initialize();
  6143  003284  ECA4  F019         	call	_OSCILLATOR_Initialize	;wreg free
  6144                           
  6145                           ;mcc.c: 117: I2C1_Initialize();
  6146  003288  EC7B  F018         	call	_I2C1_Initialize	;wreg free
  6147                           
  6148                           ;mcc.c: 118: TMR4_Initialize();
  6149  00328C  ECA9  F018         	call	_TMR4_Initialize	;wreg free
  6150                           
  6151                           ;mcc.c: 119: PWM4_Initialize();
  6152  003290  EC60  F019         	call	_PWM4_Initialize	;wreg free
  6153                           
  6154                           ;mcc.c: 120: TMR2_Initialize();
  6155  003294  EC4F  F019         	call	_TMR2_Initialize	;wreg free
  6156                           
  6157                           ;mcc.c: 121: EUSART1_Initialize();
  6158  003298  EC86  F019         	call	_EUSART1_Initialize	;wreg free
  6159  00329C  0012               	return		;funcret
  6160  00329E                     __end_of_SYSTEM_Initialize:
  6161                           	opt stack 0
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           postinc0	equ	0xFEE
  6170                           wreg	equ	0xFE8
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function _TMR4_Initialize *****************
  6179 ;; Defined at:
  6180 ;;		line 63 in file "mcc_generated_files/tmr4.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0, cstack
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;Total ram usage:        0 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    4
  6201 ;; This function calls:
  6202 ;;		_TMR4_SetInterruptHandler
  6203 ;;		_TMR4_StartTimer
  6204 ;; This function is called by:
  6205 ;;		_SYSTEM_Initialize
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text25
  6210  003152                     __ptext25:
  6211                           	opt stack 0
  6212  003152                     _TMR4_Initialize:
  6213                           	opt stack 25
  6214                           
  6215                           ;tmr4.c: 68: T4CON = 0x02;
  6216                           
  6217                           ;incstack = 0
  6218  003152  0E02               	movlw	2
  6219  003154  010F               	movlb	15	; () banked
  6220  003156  6F51               	movwf	81,b	;volatile
  6221                           
  6222                           ;tmr4.c: 71: PR4 = 0x7C;
  6223  003158  0E7C               	movlw	124
  6224  00315A  010F               	movlb	15	; () banked
  6225  00315C  6F52               	movwf	82,b	;volatile
  6226                           
  6227                           ;tmr4.c: 74: TMR4 = 0x00;
  6228  00315E  0E00               	movlw	0
  6229  003160  010F               	movlb	15	; () banked
  6230  003162  6F53               	movwf	83,b	;volatile
  6231                           
  6232                           ; BSR set to: 15
  6233                           ;tmr4.c: 77: PIR5bits.TMR4IF = 0;
  6234  003164  907E               	bcf	3966,0,c	;volatile
  6235                           
  6236                           ; BSR set to: 15
  6237                           ;tmr4.c: 80: PIE5bits.TMR4IE = 1;
  6238  003166  807D               	bsf	3965,0,c	;volatile
  6239                           
  6240                           ; BSR set to: 15
  6241                           ;tmr4.c: 83: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  6242  003168  0E9C               	movlw	low _TMR4_DefaultInterruptHandler
  6243  00316A  6E14               	movwf	TMR4_SetInterruptHandler@InterruptHandler,c
  6244  00316C  0E33               	movlw	high _TMR4_DefaultInterruptHandler
  6245  00316E  6E15               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1,c
  6246  003170  ECB7  F019         	call	_TMR4_SetInterruptHandler	;wreg free
  6247                           
  6248                           ;tmr4.c: 86: TMR4_StartTimer();
  6249  003174  ECC6  F019         	call	_TMR4_StartTimer	;wreg free
  6250  003178  0012               	return		;funcret
  6251  00317A                     __end_of_TMR4_Initialize:
  6252                           	opt stack 0
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           intcon	equ	0xFF2
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           fsr2h	equ	0xFDA
  6266                           fsr2l	equ	0xFD9
  6267                           status	equ	0xFD8
  6268                           
  6269 ;; *************** function _TMR4_StartTimer *****************
  6270 ;; Defined at:
  6271 ;;		line 89 in file "mcc_generated_files/tmr4.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;		None
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;		None
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      void 
  6278 ;; Registers used:
  6279 ;;		None
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;Total ram usage:        0 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    3
  6292 ;; This function calls:
  6293 ;;		Nothing
  6294 ;; This function is called by:
  6295 ;;		_TMR4_Initialize
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text26
  6300  00338C                     __ptext26:
  6301                           	opt stack 0
  6302  00338C                     _TMR4_StartTimer:
  6303                           	opt stack 25
  6304                           
  6305                           ;tmr4.c: 92: T4CONbits.TMR4ON = 1;
  6306                           
  6307                           ;incstack = 0
  6308  00338C  010F               	movlb	15	; () banked
  6309  00338E  8551               	bsf	81,2,b	;volatile
  6310                           
  6311                           ; BSR set to: 15
  6312  003390  0012               	return		;funcret
  6313  003392                     __end_of_TMR4_StartTimer:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           postinc0	equ	0xFEE
  6323                           wreg	equ	0xFE8
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _TMR4_SetInterruptHandler *****************
  6332 ;; Defined at:
  6333 ;;		line 134 in file "mcc_generated_files/tmr4.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  InterruptHan    2   19[COMRAM] PTR void 
  6336 ;;		 -> TMR4_Interrupt(1), TMR4_DefaultInterruptHandler(1), 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;Total ram usage:        2 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    3
  6355 ;; This function calls:
  6356 ;;		Nothing
  6357 ;; This function is called by:
  6358 ;;		_TMR4_Initialize
  6359 ;;		_main
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text27
  6364  00336E                     __ptext27:
  6365                           	opt stack 0
  6366  00336E                     _TMR4_SetInterruptHandler:
  6367                           	opt stack 27
  6368                           
  6369                           ;tmr4.c: 135: TMR4_InterruptHandler = InterruptHandler;
  6370                           
  6371                           ; BSR set to: 15
  6372                           ;incstack = 0
  6373  00336E  C014  F0BC         	movff	TMR4_SetInterruptHandler@InterruptHandler,_TMR4_InterruptHandler
  6374  003372  C015  F0BD         	movff	TMR4_SetInterruptHandler@InterruptHandler+1,_TMR4_InterruptHandler+1
  6375  003376  0012               	return		;funcret
  6376  003378                     __end_of_TMR4_SetInterruptHandler:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           tblptrh	equ	0xFF7
  6380                           tblptrl	equ	0xFF6
  6381                           tablat	equ	0xFF5
  6382                           prodh	equ	0xFF4
  6383                           prodl	equ	0xFF3
  6384                           intcon	equ	0xFF2
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           indf2	equ	0xFDF
  6388                           postinc2	equ	0xFDE
  6389                           postdec2	equ	0xFDD
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;; *************** function _TMR2_Initialize *****************
  6395 ;; Defined at:
  6396 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;		None
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;		None
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  1    wreg      void 
  6403 ;; Registers used:
  6404 ;;		wreg, status,2, status,0, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;Total ram usage:        0 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    4
  6417 ;; This function calls:
  6418 ;;		_TMR2_SetInterruptHandler
  6419 ;;		_TMR2_StartTimer
  6420 ;; This function is called by:
  6421 ;;		_SYSTEM_Initialize
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text28
  6426  00329E                     __ptext28:
  6427                           	opt stack 0
  6428  00329E                     _TMR2_Initialize:
  6429                           	opt stack 25
  6430                           
  6431                           ;tmr2.c: 68: T2CON = 0x02;
  6432                           
  6433                           ;incstack = 0
  6434  00329E  0E02               	movlw	2
  6435  0032A0  6EBA               	movwf	4026,c	;volatile
  6436                           
  6437                           ;tmr2.c: 71: PR2 = 0x0C;
  6438  0032A2  0E0C               	movlw	12
  6439  0032A4  6EBB               	movwf	4027,c	;volatile
  6440                           
  6441                           ;tmr2.c: 74: TMR2 = 0x00;
  6442  0032A6  0E00               	movlw	0
  6443  0032A8  6EBC               	movwf	4028,c	;volatile
  6444                           
  6445                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  6446  0032AA  929E               	bcf	3998,1,c	;volatile
  6447                           
  6448                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  6449  0032AC  829D               	bsf	3997,1,c	;volatile
  6450                           
  6451                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  6452  0032AE  0E9E               	movlw	low _TMR2_DefaultInterruptHandler
  6453  0032B0  6E14               	movwf	TMR2_SetInterruptHandler@InterruptHandler,c
  6454  0032B2  0E33               	movlw	high _TMR2_DefaultInterruptHandler
  6455  0032B4  6E15               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1,c
  6456  0032B6  ECBC  F019         	call	_TMR2_SetInterruptHandler	;wreg free
  6457                           
  6458                           ;tmr2.c: 86: TMR2_StartTimer();
  6459  0032BA  ECC9  F019         	call	_TMR2_StartTimer	;wreg free
  6460  0032BE  0012               	return		;funcret
  6461  0032C0                     __end_of_TMR2_Initialize:
  6462                           	opt stack 0
  6463                           tblptru	equ	0xFF8
  6464                           tblptrh	equ	0xFF7
  6465                           tblptrl	equ	0xFF6
  6466                           tablat	equ	0xFF5
  6467                           prodh	equ	0xFF4
  6468                           prodl	equ	0xFF3
  6469                           intcon	equ	0xFF2
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           indf2	equ	0xFDF
  6473                           postinc2	equ	0xFDE
  6474                           postdec2	equ	0xFDD
  6475                           fsr2h	equ	0xFDA
  6476                           fsr2l	equ	0xFD9
  6477                           status	equ	0xFD8
  6478                           
  6479 ;; *************** function _TMR2_StartTimer *****************
  6480 ;; Defined at:
  6481 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		None
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    3
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_TMR2_Initialize
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text29
  6510  003392                     __ptext29:
  6511                           	opt stack 0
  6512  003392                     _TMR2_StartTimer:
  6513                           	opt stack 25
  6514                           
  6515                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  6516                           
  6517                           ;incstack = 0
  6518  003392  84BA               	bsf	4026,2,c	;volatile
  6519  003394  0012               	return		;funcret
  6520  003396                     __end_of_TMR2_StartTimer:
  6521                           	opt stack 0
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           intcon	equ	0xFF2
  6529                           postinc0	equ	0xFEE
  6530                           wreg	equ	0xFE8
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function _TMR2_SetInterruptHandler *****************
  6539 ;; Defined at:
  6540 ;;		line 134 in file "mcc_generated_files/tmr2.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  InterruptHan    2   19[COMRAM] PTR void 
  6543 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6555 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;Total ram usage:        2 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    3
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		_TMR2_Initialize
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text30
  6570  003378                     __ptext30:
  6571                           	opt stack 0
  6572  003378                     _TMR2_SetInterruptHandler:
  6573                           	opt stack 25
  6574                           
  6575                           ;tmr2.c: 135: TMR2_InterruptHandler = InterruptHandler;
  6576                           
  6577                           ;incstack = 0
  6578  003378  C014  F0BE         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
  6579  00337C  C015  F0BF         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
  6580  003380  0012               	return		;funcret
  6581  003382                     __end_of_TMR2_SetInterruptHandler:
  6582                           	opt stack 0
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           intcon	equ	0xFF2
  6590                           postinc0	equ	0xFEE
  6591                           wreg	equ	0xFE8
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _PWM4_Initialize *****************
  6600 ;; Defined at:
  6601 ;;		line 63 in file "mcc_generated_files/pwm4.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, status,2
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;Total ram usage:        0 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    3
  6622 ;; This function calls:
  6623 ;;		Nothing
  6624 ;; This function is called by:
  6625 ;;		_SYSTEM_Initialize
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text31
  6630  0032C0                     __ptext31:
  6631                           	opt stack 0
  6632  0032C0                     _PWM4_Initialize:
  6633                           	opt stack 26
  6634                           
  6635                           ;pwm4.c: 68: CCP4CON = 0x0C;
  6636                           
  6637                           ;incstack = 0
  6638  0032C0  0E0C               	movlw	12
  6639  0032C2  010F               	movlb	15	; () banked
  6640  0032C4  6F57               	movwf	87,b	;volatile
  6641                           
  6642                           ;pwm4.c: 71: CCPR4L = 0x00;
  6643  0032C6  0E00               	movlw	0
  6644  0032C8  010F               	movlb	15	; () banked
  6645  0032CA  6F58               	movwf	88,b	;volatile
  6646                           
  6647                           ;pwm4.c: 74: CCPR4H = 0x00;
  6648  0032CC  0E00               	movlw	0
  6649  0032CE  010F               	movlb	15	; () banked
  6650  0032D0  6F59               	movwf	89,b	;volatile
  6651                           
  6652                           ;pwm4.c: 77: CCPTMRS1bits.C4TSEL = 0x1;
  6653  0032D2  010F               	movlb	15	; () banked
  6654  0032D4  5148               	movf	72,w,b	;volatile
  6655  0032D6  0BFC               	andlw	-4
  6656  0032D8  0901               	iorlw	1
  6657  0032DA  6F48               	movwf	72,b	;volatile
  6658                           
  6659                           ; BSR set to: 15
  6660  0032DC  0012               	return		;funcret
  6661  0032DE                     __end_of_PWM4_Initialize:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           postinc0	equ	0xFEE
  6671                           wreg	equ	0xFE8
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function _PIN_MANAGER_Initialize *****************
  6680 ;; Defined at:
  6681 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      void 
  6688 ;; Registers used:
  6689 ;;		wreg, status,2
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:        0 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    3
  6702 ;; This function calls:
  6703 ;;		Nothing
  6704 ;; This function is called by:
  6705 ;;		_SYSTEM_Initialize
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text32
  6710  002F6A                     __ptext32:
  6711                           	opt stack 0
  6712  002F6A                     _PIN_MANAGER_Initialize:
  6713                           	opt stack 26
  6714                           
  6715                           ;pin_manager.c: 56: LATE = 0x00;
  6716                           
  6717                           ; BSR set to: 15
  6718                           ;incstack = 0
  6719  002F6A  0E00               	movlw	0
  6720  002F6C  6E8D               	movwf	3981,c	;volatile
  6721                           
  6722                           ;pin_manager.c: 57: LATD = 0x00;
  6723  002F6E  0E00               	movlw	0
  6724  002F70  6E8C               	movwf	3980,c	;volatile
  6725                           
  6726                           ;pin_manager.c: 58: LATA = 0x00;
  6727  002F72  0E00               	movlw	0
  6728  002F74  6E89               	movwf	3977,c	;volatile
  6729                           
  6730                           ;pin_manager.c: 59: LATB = 0x00;
  6731  002F76  0E00               	movlw	0
  6732  002F78  6E8A               	movwf	3978,c	;volatile
  6733                           
  6734                           ;pin_manager.c: 60: LATC = 0x00;
  6735  002F7A  0E00               	movlw	0
  6736  002F7C  6E8B               	movwf	3979,c	;volatile
  6737                           
  6738                           ;pin_manager.c: 65: TRISE = 0x07;
  6739  002F7E  0E07               	movlw	7
  6740  002F80  6E96               	movwf	3990,c	;volatile
  6741                           
  6742                           ;pin_manager.c: 66: TRISA = 0xF0;
  6743  002F82  0EF0               	movlw	240
  6744  002F84  6E92               	movwf	3986,c	;volatile
  6745                           
  6746                           ;pin_manager.c: 67: TRISB = 0x00;
  6747  002F86  0E00               	movlw	0
  6748  002F88  6E93               	movwf	3987,c	;volatile
  6749                           
  6750                           ;pin_manager.c: 68: TRISC = 0x9B;
  6751  002F8A  0E9B               	movlw	155
  6752  002F8C  6E94               	movwf	3988,c	;volatile
  6753                           
  6754                           ;pin_manager.c: 69: TRISD = 0x08;
  6755  002F8E  0E08               	movlw	8
  6756  002F90  6E95               	movwf	3989,c	;volatile
  6757                           
  6758                           ;pin_manager.c: 74: ANSELC = 0x24;
  6759  002F92  0E24               	movlw	36
  6760  002F94  010F               	movlb	15	; () banked
  6761  002F96  6F3A               	movwf	58,b	;volatile
  6762                           
  6763                           ;pin_manager.c: 75: ANSELB = 0x00;
  6764  002F98  0E00               	movlw	0
  6765  002F9A  010F               	movlb	15	; () banked
  6766  002F9C  6F39               	movwf	57,b	;volatile
  6767                           
  6768                           ;pin_manager.c: 76: ANSELD = 0xFC;
  6769  002F9E  0EFC               	movlw	252
  6770  002FA0  010F               	movlb	15	; () banked
  6771  002FA2  6F3B               	movwf	59,b	;volatile
  6772                           
  6773                           ;pin_manager.c: 77: ANSELE = 0x07;
  6774  002FA4  0E07               	movlw	7
  6775  002FA6  010F               	movlb	15	; () banked
  6776  002FA8  6F3C               	movwf	60,b	;volatile
  6777                           
  6778                           ;pin_manager.c: 78: ANSELA = 0x00;
  6779  002FAA  0E00               	movlw	0
  6780  002FAC  010F               	movlb	15	; () banked
  6781  002FAE  6F38               	movwf	56,b	;volatile
  6782                           
  6783                           ;pin_manager.c: 83: WPUB = 0x00;
  6784  002FB0  0E00               	movlw	0
  6785  002FB2  6E61               	movwf	3937,c	;volatile
  6786                           
  6787                           ; BSR set to: 15
  6788                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
  6789  002FB4  9EF1               	bcf	intcon2,7,c	;volatile
  6790                           
  6791                           ; BSR set to: 15
  6792  002FB6  0012               	return		;funcret
  6793  002FB8                     __end_of_PIN_MANAGER_Initialize:
  6794                           	opt stack 0
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           intcon	equ	0xFF2
  6802                           intcon2	equ	0xFF1
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           indf2	equ	0xFDF
  6806                           postinc2	equ	0xFDE
  6807                           postdec2	equ	0xFDD
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _OSCILLATOR_Initialize *****************
  6813 ;; Defined at:
  6814 ;;		line 124 in file "mcc_generated_files/mcc.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;Total ram usage:        0 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    3
  6835 ;; This function calls:
  6836 ;;		Nothing
  6837 ;; This function is called by:
  6838 ;;		_SYSTEM_Initialize
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text33
  6843  003348                     __ptext33:
  6844                           	opt stack 0
  6845  003348                     _OSCILLATOR_Initialize:
  6846                           	opt stack 26
  6847                           
  6848                           ;mcc.c: 127: OSCCON = 0x60;
  6849                           
  6850                           ; BSR set to: 15
  6851                           ;incstack = 0
  6852  003348  0E60               	movlw	96
  6853  00334A  6ED3               	movwf	4051,c	;volatile
  6854                           
  6855                           ;mcc.c: 129: OSCCON2 = 0x04;
  6856  00334C  0E04               	movlw	4
  6857  00334E  6ED2               	movwf	4050,c	;volatile
  6858                           
  6859                           ;mcc.c: 131: OSCTUNE = 0x00;
  6860  003350  0E00               	movlw	0
  6861  003352  6E9B               	movwf	3995,c	;volatile
  6862  003354  0012               	return		;funcret
  6863  003356                     __end_of_OSCILLATOR_Initialize:
  6864                           	opt stack 0
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           intcon2	equ	0xFF1
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           indf2	equ	0xFDF
  6876                           postinc2	equ	0xFDE
  6877                           postdec2	equ	0xFDD
  6878                           fsr2h	equ	0xFDA
  6879                           fsr2l	equ	0xFD9
  6880                           status	equ	0xFD8
  6881                           
  6882 ;; *************** function _INTERRUPT_Initialize *****************
  6883 ;; Defined at:
  6884 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;		None
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  1    wreg      void 
  6891 ;; Registers used:
  6892 ;;		None
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;Total ram usage:        0 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; Hardware stack levels required when called:    3
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		_SYSTEM_Initialize
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text34
  6913  003396                     __ptext34:
  6914                           	opt stack 0
  6915  003396                     _INTERRUPT_Initialize:
  6916                           	opt stack 26
  6917                           
  6918                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6919                           
  6920                           ;incstack = 0
  6921  003396  9ED0               	bcf	4048,7,c	;volatile
  6922  003398  0012               	return		;funcret
  6923  00339A                     __end_of_INTERRUPT_Initialize:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon	equ	0xFF2
  6932                           intcon2	equ	0xFF1
  6933                           postinc0	equ	0xFEE
  6934                           wreg	equ	0xFE8
  6935                           indf2	equ	0xFDF
  6936                           postinc2	equ	0xFDE
  6937                           postdec2	equ	0xFDD
  6938                           fsr2h	equ	0xFDA
  6939                           fsr2l	equ	0xFD9
  6940                           status	equ	0xFD8
  6941                           
  6942 ;; *************** function _I2C1_Initialize *****************
  6943 ;; Defined at:
  6944 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      void 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    3
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		_SYSTEM_Initialize
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text35
  6973  0030F6                     __ptext35:
  6974                           	opt stack 0
  6975  0030F6                     _I2C1_Initialize:
  6976                           	opt stack 26
  6977                           
  6978                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  6979                           
  6980                           ;incstack = 0
  6981  0030F6  0EB6               	movlw	low _i2c1_tr_queue
  6982  0030F8  6E39               	movwf	_i2c1_object+2,c
  6983  0030FA  0E00               	movlw	high _i2c1_tr_queue
  6984  0030FC  6E3A               	movwf	_i2c1_object+3,c
  6985                           
  6986                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  6987  0030FE  0EB6               	movlw	low _i2c1_tr_queue
  6988  003100  6E37               	movwf	_i2c1_object,c
  6989  003102  0E00               	movlw	high _i2c1_tr_queue
  6990  003104  6E38               	movwf	_i2c1_object+1,c
  6991                           
  6992                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  6993  003106  823B               	bsf	_i2c1_object+4,1,c
  6994                           
  6995                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  6996  003108  903B               	bcf	_i2c1_object+4,0,c
  6997                           
  6998                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  6999  00310A  0E00               	movlw	0
  7000  00310C  6E3D               	movwf	_i2c1_object+6,c
  7001                           
  7002                           ;i2c1.c: 208: SSP1STAT = 0x00;
  7003  00310E  0E00               	movlw	0
  7004  003110  6EC7               	movwf	4039,c	;volatile
  7005                           
  7006                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  7007  003112  0E28               	movlw	40
  7008  003114  6EC6               	movwf	4038,c	;volatile
  7009                           
  7010                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  7011  003116  0E00               	movlw	0
  7012  003118  6ECB               	movwf	4043,c	;volatile
  7013                           
  7014                           ;i2c1.c: 214: SSP1ADD = 0x03;
  7015  00311A  0E03               	movlw	3
  7016  00311C  6EC8               	movwf	4040,c	;volatile
  7017                           
  7018                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  7019  00311E  969E               	bcf	3998,3,c	;volatile
  7020                           
  7021                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  7022  003120  869D               	bsf	3997,3,c	;volatile
  7023  003122  0012               	return		;funcret
  7024  003124                     __end_of_I2C1_Initialize:
  7025                           	opt stack 0
  7026                           tblptru	equ	0xFF8
  7027                           tblptrh	equ	0xFF7
  7028                           tblptrl	equ	0xFF6
  7029                           tablat	equ	0xFF5
  7030                           prodh	equ	0xFF4
  7031                           prodl	equ	0xFF3
  7032                           intcon	equ	0xFF2
  7033                           intcon2	equ	0xFF1
  7034                           postinc0	equ	0xFEE
  7035                           wreg	equ	0xFE8
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _EUSART1_Initialize *****************
  7044 ;; Defined at:
  7045 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;Total ram usage:        0 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    3
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_SYSTEM_Initialize
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text36
  7074  00330C                     __ptext36:
  7075                           	opt stack 0
  7076  00330C                     _EUSART1_Initialize:
  7077                           	opt stack 26
  7078                           
  7079                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  7080                           
  7081                           ;incstack = 0
  7082  00330C  0E08               	movlw	8
  7083  00330E  6EB8               	movwf	4024,c	;volatile
  7084                           
  7085                           ;eusart1.c: 63: RCSTA1 = 0x90;
  7086  003310  0E90               	movlw	144
  7087  003312  6EAB               	movwf	4011,c	;volatile
  7088                           
  7089                           ;eusart1.c: 66: TXSTA1 = 0x24;
  7090  003314  0E24               	movlw	36
  7091  003316  6EAC               	movwf	4012,c	;volatile
  7092                           
  7093                           ;eusart1.c: 69: SPBRG1 = 0xCF;
  7094  003318  0ECF               	movlw	207
  7095  00331A  6EAF               	movwf	4015,c	;volatile
  7096                           
  7097                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  7098  00331C  0E00               	movlw	0
  7099  00331E  6EB0               	movwf	4016,c	;volatile
  7100  003320  0012               	return		;funcret
  7101  003322                     __end_of_EUSART1_Initialize:
  7102                           	opt stack 0
  7103                           tblptru	equ	0xFF8
  7104                           tblptrh	equ	0xFF7
  7105                           tblptrl	equ	0xFF6
  7106                           tablat	equ	0xFF5
  7107                           prodh	equ	0xFF4
  7108                           prodl	equ	0xFF3
  7109                           intcon	equ	0xFF2
  7110                           intcon2	equ	0xFF1
  7111                           postinc0	equ	0xFEE
  7112                           wreg	equ	0xFE8
  7113                           indf2	equ	0xFDF
  7114                           postinc2	equ	0xFDE
  7115                           postdec2	equ	0xFDD
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _KeyPadInit *****************
  7121 ;; Defined at:
  7122 ;;		line 7 in file "DriverTeclado.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		None
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;Total ram usage:        0 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    3
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_main
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text37
  7151  003382                     __ptext37:
  7152                           	opt stack 0
  7153  003382                     _KeyPadInit:
  7154                           	opt stack 27
  7155                           
  7156                           ;incstack = 0
  7157                           ;DriverTeclado.c: 9: do { LATAbits.LATA0 = 0; } while(0);
  7158  003382  9089               	bcf	3977,0,c	;volatile
  7159                           
  7160                           ;DriverTeclado.c: 10: do { LATAbits.LATA1 = 0; } while(0);
  7161  003384  9289               	bcf	3977,1,c	;volatile
  7162                           
  7163                           ;DriverTeclado.c: 11: do { LATAbits.LATA2 = 0; } while(0);
  7164  003386  9489               	bcf	3977,2,c	;volatile
  7165                           
  7166                           ;DriverTeclado.c: 12: do { LATAbits.LATA3 = 0; } while(0);
  7167  003388  9689               	bcf	3977,3,c	;volatile
  7168  00338A  0012               	return	
  7169  00338C                     __end_of_KeyPadInit:
  7170                           	opt stack 0
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           intcon2	equ	0xFF1
  7179                           postinc0	equ	0xFEE
  7180                           wreg	equ	0xFE8
  7181                           indf2	equ	0xFDF
  7182                           postinc2	equ	0xFDE
  7183                           postdec2	equ	0xFDD
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188 ;; *************** function _KeyPadAcquire *****************
  7189 ;; Defined at:
  7190 ;;		line 189 in file "DriverTeclado.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;		None
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  KeyAcquire      1   24[COMRAM] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  2   22[COMRAM] int 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, status,0, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;Total ram usage:        3 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    5
  7211 ;; This function calls:
  7212 ;;		_Delay
  7213 ;;		_KeyPadScan
  7214 ;; This function is called by:
  7215 ;;		_main
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text38
  7220  003004                     __ptext38:
  7221                           	opt stack 0
  7222  003004                     _KeyPadAcquire:
  7223                           	opt stack 25
  7224                           
  7225                           ;DriverTeclado.c: 191: char KeyAcquire = 0xFF;
  7226                           
  7227                           ;incstack = 0
  7228  003004  6819               	setf	KeyPadAcquire@KeyAcquire,c
  7229                           
  7230                           ;DriverTeclado.c: 192: while (KeyPressed==1)
  7231  003006  D011               	goto	l4107
  7232  003008                     l4099:
  7233                           
  7234                           ;DriverTeclado.c: 193: {
  7235                           ;DriverTeclado.c: 194: KeyAcquire = KeyPadScan();
  7236  003008  EC28  F012         	call	_KeyPadScan	;wreg free
  7237  00300C  6E19               	movwf	KeyPadAcquire@KeyAcquire,c
  7238                           
  7239                           ;DriverTeclado.c: 195: if (KeyAcquire!=0xFF)KeyPressed=0;
  7240  00300E  2819               	incf	KeyPadAcquire@KeyAcquire,w,c
  7241  003010  B4D8               	btfsc	status,2,c
  7242  003012  D005               	goto	l4105
  7243  003014  0E00               	movlw	0
  7244  003016  0100               	movlb	0	; () banked
  7245  003018  6FC1               	movwf	(_KeyPressed+1)& (0+255),b
  7246  00301A  0E00               	movlw	0
  7247  00301C  6FC0               	movwf	_KeyPressed& (0+255),b
  7248  00301E                     l4105:
  7249                           
  7250                           ;DriverTeclado.c: 196: Delay(150);
  7251  00301E  0E00               	movlw	0
  7252  003020  6E15               	movwf	Delay@DelayCount+1,c
  7253  003022  0E96               	movlw	150
  7254  003024  6E14               	movwf	Delay@DelayCount,c
  7255  003026  EC92  F018         	call	_Delay	;wreg free
  7256  00302A                     l4107:
  7257  00302A  0100               	movlb	0	; () banked
  7258  00302C  05C0               	decf	_KeyPressed& (0+255),w,b
  7259  00302E  0100               	movlb	0	; () banked
  7260  003030  11C1               	iorwf	(_KeyPressed+1)& (0+255),w,b
  7261  003032  B4D8               	btfsc	status,2,c
  7262  003034  D7E9               	goto	l4099
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;DriverTeclado.c: 197: }
  7266                           ;DriverTeclado.c: 198: KeyPressed=1;
  7267                           
  7268                           ; BSR set to: 0
  7269  003036  0E00               	movlw	0
  7270  003038  0100               	movlb	0	; () banked
  7271  00303A  6FC1               	movwf	(_KeyPressed+1)& (0+255),b
  7272  00303C  0E01               	movlw	1
  7273  00303E  6FC0               	movwf	_KeyPressed& (0+255),b
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;DriverTeclado.c: 199: return(KeyAcquire);
  7277  003040  C019  F017         	movff	KeyPadAcquire@KeyAcquire,?_KeyPadAcquire
  7278  003044  6A18               	clrf	?_KeyPadAcquire+1,c
  7279  003046  0012               	return	
  7280  003048                     __end_of_KeyPadAcquire:
  7281                           	opt stack 0
  7282                           tblptru	equ	0xFF8
  7283                           tblptrh	equ	0xFF7
  7284                           tblptrl	equ	0xFF6
  7285                           tablat	equ	0xFF5
  7286                           prodh	equ	0xFF4
  7287                           prodl	equ	0xFF3
  7288                           intcon	equ	0xFF2
  7289                           intcon2	equ	0xFF1
  7290                           postinc0	equ	0xFEE
  7291                           wreg	equ	0xFE8
  7292                           indf2	equ	0xFDF
  7293                           postinc2	equ	0xFDE
  7294                           postdec2	equ	0xFDD
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function _KeyPadScan *****************
  7300 ;; Defined at:
  7301 ;;		line 16 in file "DriverTeclado.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;		None
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  KeyPadKey       1   21[COMRAM] unsigned char 
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      unsigned char 
  7308 ;; Registers used:
  7309 ;;		wreg, status,2, status,0, cstack
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;Total ram usage:        1 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    4
  7322 ;; This function calls:
  7323 ;;		_Delay
  7324 ;; This function is called by:
  7325 ;;		_KeyPadAcquire
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           	psect	text39
  7330  002450                     __ptext39:
  7331                           	opt stack 0
  7332  002450                     _KeyPadScan:
  7333                           	opt stack 25
  7334                           
  7335                           ;DriverTeclado.c: 18: char KeyPadKey = 0xFF;
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;incstack = 0
  7339  002450  6816               	setf	KeyPadScan@KeyPadKey,c
  7340                           
  7341                           ;DriverTeclado.c: 19: static uint8_t Push = 0;
  7342                           ;DriverTeclado.c: 21: do { LATAbits.LATA3 = 0; } while(0);
  7343  002452  9689               	bcf	3977,3,c	;volatile
  7344                           
  7345                           ;DriverTeclado.c: 22: do { LATAbits.LATA2 = 1; } while(0);
  7346  002454  8489               	bsf	3977,2,c	;volatile
  7347                           
  7348                           ;DriverTeclado.c: 23: do { LATAbits.LATA1 = 1; } while(0);
  7349  002456  8289               	bsf	3977,1,c	;volatile
  7350                           
  7351                           ;DriverTeclado.c: 24: do { LATAbits.LATA0 = 1; } while(0);
  7352  002458  8089               	bsf	3977,0,c	;volatile
  7353                           
  7354                           ;DriverTeclado.c: 26: Push = PORTAbits.RA4;
  7355  00245A  0E00               	movlw	0
  7356  00245C  B880               	btfsc	3968,4,c	;volatile
  7357  00245E  0E01               	movlw	1
  7358  002460  6E44               	movwf	KeyPadScan@Push,c
  7359                           
  7360                           ;DriverTeclado.c: 27: if (Push==0)
  7361  002462  5044               	movf	KeyPadScan@Push,w,c
  7362  002464  A4D8               	btfss	status,2,c
  7363  002466  D002               	goto	l3555
  7364                           
  7365                           ;DriverTeclado.c: 28: {
  7366                           ;DriverTeclado.c: 29: KeyPadKey = '*';
  7367  002468  0E2A               	movlw	42
  7368  00246A  D01A               	goto	L8
  7369  00246C                     l3555:
  7370                           
  7371                           ;DriverTeclado.c: 32: else
  7372                           ;DriverTeclado.c: 33: {
  7373                           ;DriverTeclado.c: 34: Push = PORTAbits.RA5;
  7374  00246C  0E00               	movlw	0
  7375  00246E  BA80               	btfsc	3968,5,c	;volatile
  7376  002470  0E01               	movlw	1
  7377  002472  6E44               	movwf	KeyPadScan@Push,c
  7378                           
  7379                           ;DriverTeclado.c: 35: if (Push==0)
  7380  002474  5044               	movf	KeyPadScan@Push,w,c
  7381  002476  A4D8               	btfss	status,2,c
  7382  002478  D002               	goto	l3561
  7383                           
  7384                           ;DriverTeclado.c: 36: {
  7385                           ;DriverTeclado.c: 37: KeyPadKey = '0';
  7386  00247A  0E30               	movlw	48
  7387  00247C  D011               	goto	L8
  7388  00247E                     l3561:
  7389                           
  7390                           ;DriverTeclado.c: 40: else
  7391                           ;DriverTeclado.c: 41: {
  7392                           ;DriverTeclado.c: 42: Push = PORTAbits.RA6;
  7393  00247E  0E00               	movlw	0
  7394  002480  BC80               	btfsc	3968,6,c	;volatile
  7395  002482  0E01               	movlw	1
  7396  002484  6E44               	movwf	KeyPadScan@Push,c
  7397                           
  7398                           ;DriverTeclado.c: 43: if (Push==0)
  7399  002486  5044               	movf	KeyPadScan@Push,w,c
  7400  002488  A4D8               	btfss	status,2,c
  7401  00248A  D002               	goto	l3567
  7402                           
  7403                           ;DriverTeclado.c: 44: {
  7404                           ;DriverTeclado.c: 45: KeyPadKey = '#';
  7405  00248C  0E23               	movlw	35
  7406  00248E  D008               	goto	L8
  7407  002490                     l3567:
  7408                           
  7409                           ;DriverTeclado.c: 48: else
  7410                           ;DriverTeclado.c: 49: {
  7411                           ;DriverTeclado.c: 50: Push = PORTAbits.RA7;
  7412  002490  0E00               	movlw	0
  7413  002492  BE80               	btfsc	3968,7,c	;volatile
  7414  002494  0E01               	movlw	1
  7415  002496  6E44               	movwf	KeyPadScan@Push,c
  7416                           
  7417                           ;DriverTeclado.c: 51: if (Push==0)
  7418  002498  5044               	movf	KeyPadScan@Push,w,c
  7419  00249A  A4D8               	btfss	status,2,c
  7420  00249C  D004               	goto	l3573
  7421                           
  7422                           ;DriverTeclado.c: 52: {
  7423                           ;DriverTeclado.c: 53: KeyPadKey = 'D';
  7424  00249E  0E44               	movlw	68
  7425  0024A0                     L8:
  7426  0024A0  6E16               	movwf	KeyPadScan@KeyPadKey,c
  7427                           
  7428                           ;DriverTeclado.c: 54: Push = 1;
  7429  0024A2  0E01               	movlw	1
  7430  0024A4  6E44               	movwf	KeyPadScan@Push,c
  7431  0024A6                     l3573:
  7432                           
  7433                           ;DriverTeclado.c: 55: }
  7434                           ;DriverTeclado.c: 56: }
  7435                           ;DriverTeclado.c: 57: }
  7436                           ;DriverTeclado.c: 58: }
  7437                           ;DriverTeclado.c: 60: Delay(5);
  7438  0024A6  0E00               	movlw	0
  7439  0024A8  6E15               	movwf	Delay@DelayCount+1,c
  7440  0024AA  0E05               	movlw	5
  7441  0024AC  6E14               	movwf	Delay@DelayCount,c
  7442  0024AE  EC92  F018         	call	_Delay	;wreg free
  7443                           
  7444                           ;DriverTeclado.c: 62: do { LATAbits.LATA3 = 1; } while(0);
  7445  0024B2  8689               	bsf	3977,3,c	;volatile
  7446                           
  7447                           ;DriverTeclado.c: 63: do { LATAbits.LATA2 = 0; } while(0);
  7448  0024B4  9489               	bcf	3977,2,c	;volatile
  7449                           
  7450                           ;DriverTeclado.c: 65: Push = PORTAbits.RA4;
  7451  0024B6  0E00               	movlw	0
  7452  0024B8  B880               	btfsc	3968,4,c	;volatile
  7453  0024BA  0E01               	movlw	1
  7454  0024BC  6E44               	movwf	KeyPadScan@Push,c
  7455                           
  7456                           ;DriverTeclado.c: 66: if (Push==0)
  7457  0024BE  5044               	movf	KeyPadScan@Push,w,c
  7458  0024C0  A4D8               	btfss	status,2,c
  7459  0024C2  D002               	goto	l3585
  7460                           
  7461                           ;DriverTeclado.c: 67: {
  7462                           ;DriverTeclado.c: 68: KeyPadKey = '7';
  7463  0024C4  0E37               	movlw	55
  7464  0024C6  D01A               	goto	L11
  7465  0024C8                     l3585:
  7466                           
  7467                           ;DriverTeclado.c: 71: else
  7468                           ;DriverTeclado.c: 72: {
  7469                           ;DriverTeclado.c: 73: Push = PORTAbits.RA5;
  7470  0024C8  0E00               	movlw	0
  7471  0024CA  BA80               	btfsc	3968,5,c	;volatile
  7472  0024CC  0E01               	movlw	1
  7473  0024CE  6E44               	movwf	KeyPadScan@Push,c
  7474                           
  7475                           ;DriverTeclado.c: 74: if (Push==0)
  7476  0024D0  5044               	movf	KeyPadScan@Push,w,c
  7477  0024D2  A4D8               	btfss	status,2,c
  7478  0024D4  D002               	goto	l3591
  7479                           
  7480                           ;DriverTeclado.c: 75: {
  7481                           ;DriverTeclado.c: 76: KeyPadKey = '8';
  7482  0024D6  0E38               	movlw	56
  7483  0024D8  D011               	goto	L11
  7484  0024DA                     l3591:
  7485                           
  7486                           ;DriverTeclado.c: 79: else
  7487                           ;DriverTeclado.c: 80: {
  7488                           ;DriverTeclado.c: 81: Push = PORTAbits.RA6;
  7489  0024DA  0E00               	movlw	0
  7490  0024DC  BC80               	btfsc	3968,6,c	;volatile
  7491  0024DE  0E01               	movlw	1
  7492  0024E0  6E44               	movwf	KeyPadScan@Push,c
  7493                           
  7494                           ;DriverTeclado.c: 82: if (Push==0)
  7495  0024E2  5044               	movf	KeyPadScan@Push,w,c
  7496  0024E4  A4D8               	btfss	status,2,c
  7497  0024E6  D002               	goto	l3597
  7498                           
  7499                           ;DriverTeclado.c: 83: {
  7500                           ;DriverTeclado.c: 84: KeyPadKey = '9';
  7501  0024E8  0E39               	movlw	57
  7502  0024EA  D008               	goto	L11
  7503  0024EC                     l3597:
  7504                           
  7505                           ;DriverTeclado.c: 87: else
  7506                           ;DriverTeclado.c: 88: {
  7507                           ;DriverTeclado.c: 89: Push = PORTAbits.RA7;
  7508  0024EC  0E00               	movlw	0
  7509  0024EE  BE80               	btfsc	3968,7,c	;volatile
  7510  0024F0  0E01               	movlw	1
  7511  0024F2  6E44               	movwf	KeyPadScan@Push,c
  7512                           
  7513                           ;DriverTeclado.c: 90: if (Push==0)
  7514  0024F4  5044               	movf	KeyPadScan@Push,w,c
  7515  0024F6  A4D8               	btfss	status,2,c
  7516  0024F8  D004               	goto	l3603
  7517                           
  7518                           ;DriverTeclado.c: 91: {
  7519                           ;DriverTeclado.c: 92: KeyPadKey = 'C';
  7520  0024FA  0E43               	movlw	67
  7521  0024FC                     L11:
  7522  0024FC  6E16               	movwf	KeyPadScan@KeyPadKey,c
  7523                           
  7524                           ;DriverTeclado.c: 93: Push = 1;
  7525  0024FE  0E01               	movlw	1
  7526  002500  6E44               	movwf	KeyPadScan@Push,c
  7527  002502                     l3603:
  7528                           
  7529                           ;DriverTeclado.c: 94: }
  7530                           ;DriverTeclado.c: 95: }
  7531                           ;DriverTeclado.c: 96: }
  7532                           ;DriverTeclado.c: 97: }
  7533                           ;DriverTeclado.c: 99: Delay(5);
  7534  002502  0E00               	movlw	0
  7535  002504  6E15               	movwf	Delay@DelayCount+1,c
  7536  002506  0E05               	movlw	5
  7537  002508  6E14               	movwf	Delay@DelayCount,c
  7538  00250A  EC92  F018         	call	_Delay	;wreg free
  7539                           
  7540                           ;DriverTeclado.c: 101: do { LATAbits.LATA2 = 1; } while(0);
  7541  00250E  8489               	bsf	3977,2,c	;volatile
  7542                           
  7543                           ;DriverTeclado.c: 102: do { LATAbits.LATA1 = 0; } while(0);
  7544  002510  9289               	bcf	3977,1,c	;volatile
  7545                           
  7546                           ;DriverTeclado.c: 104: Push = PORTAbits.RA4;
  7547  002512  0E00               	movlw	0
  7548  002514  B880               	btfsc	3968,4,c	;volatile
  7549  002516  0E01               	movlw	1
  7550  002518  6E44               	movwf	KeyPadScan@Push,c
  7551                           
  7552                           ;DriverTeclado.c: 105: if (Push==0)
  7553  00251A  5044               	movf	KeyPadScan@Push,w,c
  7554  00251C  A4D8               	btfss	status,2,c
  7555  00251E  D002               	goto	l3615
  7556                           
  7557                           ;DriverTeclado.c: 106: {
  7558                           ;DriverTeclado.c: 107: KeyPadKey = '4';
  7559  002520  0E34               	movlw	52
  7560  002522  D01A               	goto	L14
  7561  002524                     l3615:
  7562                           
  7563                           ;DriverTeclado.c: 110: else
  7564                           ;DriverTeclado.c: 111: {
  7565                           ;DriverTeclado.c: 112: Push = PORTAbits.RA5;
  7566  002524  0E00               	movlw	0
  7567  002526  BA80               	btfsc	3968,5,c	;volatile
  7568  002528  0E01               	movlw	1
  7569  00252A  6E44               	movwf	KeyPadScan@Push,c
  7570                           
  7571                           ;DriverTeclado.c: 113: if (Push==0)
  7572  00252C  5044               	movf	KeyPadScan@Push,w,c
  7573  00252E  A4D8               	btfss	status,2,c
  7574  002530  D002               	goto	l3621
  7575                           
  7576                           ;DriverTeclado.c: 114: {
  7577                           ;DriverTeclado.c: 115: KeyPadKey = '5';
  7578  002532  0E35               	movlw	53
  7579  002534  D011               	goto	L14
  7580  002536                     l3621:
  7581                           
  7582                           ;DriverTeclado.c: 118: else
  7583                           ;DriverTeclado.c: 119: {
  7584                           ;DriverTeclado.c: 120: Push = PORTAbits.RA6;
  7585  002536  0E00               	movlw	0
  7586  002538  BC80               	btfsc	3968,6,c	;volatile
  7587  00253A  0E01               	movlw	1
  7588  00253C  6E44               	movwf	KeyPadScan@Push,c
  7589                           
  7590                           ;DriverTeclado.c: 121: if (Push==0)
  7591  00253E  5044               	movf	KeyPadScan@Push,w,c
  7592  002540  A4D8               	btfss	status,2,c
  7593  002542  D002               	goto	l3627
  7594                           
  7595                           ;DriverTeclado.c: 122: {
  7596                           ;DriverTeclado.c: 123: KeyPadKey = '6';
  7597  002544  0E36               	movlw	54
  7598  002546  D008               	goto	L14
  7599  002548                     l3627:
  7600                           
  7601                           ;DriverTeclado.c: 126: else
  7602                           ;DriverTeclado.c: 127: {
  7603                           ;DriverTeclado.c: 128: Push = PORTAbits.RA7;
  7604  002548  0E00               	movlw	0
  7605  00254A  BE80               	btfsc	3968,7,c	;volatile
  7606  00254C  0E01               	movlw	1
  7607  00254E  6E44               	movwf	KeyPadScan@Push,c
  7608                           
  7609                           ;DriverTeclado.c: 129: if (Push==0)
  7610  002550  5044               	movf	KeyPadScan@Push,w,c
  7611  002552  A4D8               	btfss	status,2,c
  7612  002554  D004               	goto	l3633
  7613                           
  7614                           ;DriverTeclado.c: 130: {
  7615                           ;DriverTeclado.c: 131: KeyPadKey = 'B';
  7616  002556  0E42               	movlw	66
  7617  002558                     L14:
  7618  002558  6E16               	movwf	KeyPadScan@KeyPadKey,c
  7619                           
  7620                           ;DriverTeclado.c: 132: Push = 1;
  7621  00255A  0E01               	movlw	1
  7622  00255C  6E44               	movwf	KeyPadScan@Push,c
  7623  00255E                     l3633:
  7624                           
  7625                           ;DriverTeclado.c: 133: }
  7626                           ;DriverTeclado.c: 134: }
  7627                           ;DriverTeclado.c: 135: }
  7628                           ;DriverTeclado.c: 136: }
  7629                           ;DriverTeclado.c: 138: Delay(5);
  7630  00255E  0E00               	movlw	0
  7631  002560  6E15               	movwf	Delay@DelayCount+1,c
  7632  002562  0E05               	movlw	5
  7633  002564  6E14               	movwf	Delay@DelayCount,c
  7634  002566  EC92  F018         	call	_Delay	;wreg free
  7635                           
  7636                           ;DriverTeclado.c: 140: do { LATAbits.LATA1 = 1; } while(0);
  7637  00256A  8289               	bsf	3977,1,c	;volatile
  7638                           
  7639                           ;DriverTeclado.c: 141: do { LATAbits.LATA0 = 0; } while(0);
  7640  00256C  9089               	bcf	3977,0,c	;volatile
  7641                           
  7642                           ;DriverTeclado.c: 143: Push = PORTAbits.RA4;
  7643  00256E  0E00               	movlw	0
  7644  002570  B880               	btfsc	3968,4,c	;volatile
  7645  002572  0E01               	movlw	1
  7646  002574  6E44               	movwf	KeyPadScan@Push,c
  7647                           
  7648                           ;DriverTeclado.c: 144: if (Push==0)
  7649  002576  5044               	movf	KeyPadScan@Push,w,c
  7650  002578  A4D8               	btfss	status,2,c
  7651  00257A  D002               	goto	l3645
  7652                           
  7653                           ;DriverTeclado.c: 145: {
  7654                           ;DriverTeclado.c: 146: KeyPadKey = '1';
  7655  00257C  0E31               	movlw	49
  7656  00257E  D01A               	goto	L17
  7657  002580                     l3645:
  7658                           
  7659                           ;DriverTeclado.c: 149: else
  7660                           ;DriverTeclado.c: 150: {
  7661                           ;DriverTeclado.c: 151: Push = PORTAbits.RA5;
  7662  002580  0E00               	movlw	0
  7663  002582  BA80               	btfsc	3968,5,c	;volatile
  7664  002584  0E01               	movlw	1
  7665  002586  6E44               	movwf	KeyPadScan@Push,c
  7666                           
  7667                           ;DriverTeclado.c: 152: if (Push==0)
  7668  002588  5044               	movf	KeyPadScan@Push,w,c
  7669  00258A  A4D8               	btfss	status,2,c
  7670  00258C  D002               	goto	l3651
  7671                           
  7672                           ;DriverTeclado.c: 153: {
  7673                           ;DriverTeclado.c: 154: KeyPadKey = '2';
  7674  00258E  0E32               	movlw	50
  7675  002590  D011               	goto	L17
  7676  002592                     l3651:
  7677                           
  7678                           ;DriverTeclado.c: 157: else
  7679                           ;DriverTeclado.c: 158: {
  7680                           ;DriverTeclado.c: 159: Push = PORTAbits.RA6;
  7681  002592  0E00               	movlw	0
  7682  002594  BC80               	btfsc	3968,6,c	;volatile
  7683  002596  0E01               	movlw	1
  7684  002598  6E44               	movwf	KeyPadScan@Push,c
  7685                           
  7686                           ;DriverTeclado.c: 160: if (Push==0)
  7687  00259A  5044               	movf	KeyPadScan@Push,w,c
  7688  00259C  A4D8               	btfss	status,2,c
  7689  00259E  D002               	goto	l3657
  7690                           
  7691                           ;DriverTeclado.c: 161: {
  7692                           ;DriverTeclado.c: 162: KeyPadKey = '3';
  7693  0025A0  0E33               	movlw	51
  7694  0025A2  D008               	goto	L17
  7695  0025A4                     l3657:
  7696                           
  7697                           ;DriverTeclado.c: 165: else
  7698                           ;DriverTeclado.c: 166: {
  7699                           ;DriverTeclado.c: 167: Push = PORTAbits.RA7;
  7700  0025A4  0E00               	movlw	0
  7701  0025A6  BE80               	btfsc	3968,7,c	;volatile
  7702  0025A8  0E01               	movlw	1
  7703  0025AA  6E44               	movwf	KeyPadScan@Push,c
  7704                           
  7705                           ;DriverTeclado.c: 168: if (Push==0)
  7706  0025AC  5044               	movf	KeyPadScan@Push,w,c
  7707  0025AE  A4D8               	btfss	status,2,c
  7708  0025B0  D004               	goto	l3663
  7709                           
  7710                           ;DriverTeclado.c: 169: {
  7711                           ;DriverTeclado.c: 170: KeyPadKey = 'A';
  7712  0025B2  0E41               	movlw	65
  7713  0025B4                     L17:
  7714  0025B4  6E16               	movwf	KeyPadScan@KeyPadKey,c
  7715                           
  7716                           ;DriverTeclado.c: 171: Push = 1;
  7717  0025B6  0E01               	movlw	1
  7718  0025B8  6E44               	movwf	KeyPadScan@Push,c
  7719  0025BA                     l3663:
  7720                           
  7721                           ;DriverTeclado.c: 172: }
  7722                           ;DriverTeclado.c: 173: }
  7723                           ;DriverTeclado.c: 174: }
  7724                           ;DriverTeclado.c: 175: }
  7725                           ;DriverTeclado.c: 177: Delay(5);
  7726  0025BA  0E00               	movlw	0
  7727  0025BC  6E15               	movwf	Delay@DelayCount+1,c
  7728  0025BE  0E05               	movlw	5
  7729  0025C0  6E14               	movwf	Delay@DelayCount,c
  7730  0025C2  EC92  F018         	call	_Delay	;wreg free
  7731                           
  7732                           ;DriverTeclado.c: 179: do { LATAbits.LATA0 = 0; } while(0);
  7733  0025C6  9089               	bcf	3977,0,c	;volatile
  7734                           
  7735                           ;DriverTeclado.c: 180: do { LATAbits.LATA1 = 0; } while(0);
  7736  0025C8  9289               	bcf	3977,1,c	;volatile
  7737                           
  7738                           ;DriverTeclado.c: 181: do { LATAbits.LATA2 = 0; } while(0);
  7739  0025CA  9489               	bcf	3977,2,c	;volatile
  7740                           
  7741                           ;DriverTeclado.c: 182: do { LATAbits.LATA3 = 0; } while(0);
  7742  0025CC  9689               	bcf	3977,3,c	;volatile
  7743                           
  7744                           ;DriverTeclado.c: 184: return(KeyPadKey);
  7745  0025CE  5016               	movf	KeyPadScan@KeyPadKey,w,c
  7746  0025D0  0012               	return	
  7747  0025D2                     __end_of_KeyPadScan:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodh	equ	0xFF4
  7754                           prodl	equ	0xFF3
  7755                           intcon	equ	0xFF2
  7756                           intcon2	equ	0xFF1
  7757                           postinc0	equ	0xFEE
  7758                           wreg	equ	0xFE8
  7759                           indf2	equ	0xFDF
  7760                           postinc2	equ	0xFDE
  7761                           postdec2	equ	0xFDD
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _EUSART1_Write *****************
  7767 ;; Defined at:
  7768 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;  txData          1    wreg     unsigned char 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  txData          1   19[COMRAM] unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;Total ram usage:        1 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    3
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_main
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text40
  7797  003356                     __ptext40:
  7798                           	opt stack 0
  7799  003356                     _EUSART1_Write:
  7800                           	opt stack 27
  7801                           
  7802                           ;incstack = 0
  7803                           ;EUSART1_Write@txData stored from wreg
  7804  003356  6E14               	movwf	EUSART1_Write@txData,c
  7805  003358                     l452:
  7806  003358  A89E               	btfss	3998,4,c	;volatile
  7807  00335A  D7FE               	goto	l452
  7808                           
  7809                           ;eusart1.c: 100: }
  7810                           ;eusart1.c: 102: TXREG1 = txData;
  7811  00335C  C014  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  7812  003360  0012               	return		;funcret
  7813  003362                     __end_of_EUSART1_Write:
  7814                           	opt stack 0
  7815                           tblptru	equ	0xFF8
  7816                           tblptrh	equ	0xFF7
  7817                           tblptrl	equ	0xFF6
  7818                           tablat	equ	0xFF5
  7819                           prodh	equ	0xFF4
  7820                           prodl	equ	0xFF3
  7821                           intcon	equ	0xFF2
  7822                           intcon2	equ	0xFF1
  7823                           postinc0	equ	0xFEE
  7824                           wreg	equ	0xFE8
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _DisplayONCursorONToggleON *****************
  7833 ;; Defined at:
  7834 ;;		line 112 in file "DriverLCD16x2.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        0 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    6
  7855 ;; This function calls:
  7856 ;;		_Delay
  7857 ;;		_lcd_cmd
  7858 ;; This function is called by:
  7859 ;;		_main
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text41
  7864  003322                     __ptext41:
  7865                           	opt stack 0
  7866  003322                     _DisplayONCursorONToggleON:
  7867                           	opt stack 24
  7868                           
  7869                           ;DriverLCD16x2.c: 114: lcd_cmd(0b00001111);
  7870                           
  7871                           ;incstack = 0
  7872  003322  0E0F               	movlw	15
  7873  003324  EC2C  F019         	call	_lcd_cmd
  7874                           
  7875                           ;DriverLCD16x2.c: 115: Delay(1);
  7876  003328  0E00               	movlw	0
  7877  00332A  6E15               	movwf	Delay@DelayCount+1,c
  7878  00332C  0E01               	movlw	1
  7879  00332E  6E14               	movwf	Delay@DelayCount,c
  7880  003330  EC92  F018         	call	_Delay	;wreg free
  7881  003334  0012               	return		;funcret
  7882  003336                     __end_of_DisplayONCursorONToggleON:
  7883                           	opt stack 0
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           intcon	equ	0xFF2
  7891                           intcon2	equ	0xFF1
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _CursorGOTOxy *****************
  7902 ;; Defined at:
  7903 ;;		line 130 in file "DriverLCD16x2.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  x               2   22[COMRAM] int 
  7906 ;;  y               2   24[COMRAM] int 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  i               2   31[COMRAM] int 
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  1    wreg      void 
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;Total ram usage:       11 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    6
  7925 ;; This function calls:
  7926 ;;		_Delay
  7927 ;;		_lcd_cmd
  7928 ;; This function is called by:
  7929 ;;		_main
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           	psect	text42
  7934  002C28                     __ptext42:
  7935                           	opt stack 0
  7936  002C28                     _CursorGOTOxy:
  7937                           	opt stack 24
  7938                           
  7939                           ;DriverLCD16x2.c: 132: int i;
  7940                           ;DriverLCD16x2.c: 133: if (y==1)
  7941                           
  7942                           ;incstack = 0
  7943  002C28  0419               	decf	CursorGOTOxy@y,w,c
  7944  002C2A  101A               	iorwf	CursorGOTOxy@y+1,w,c
  7945  002C2C  A4D8               	btfss	status,2,c
  7946  002C2E  D00A               	goto	l4081
  7947                           
  7948                           ;DriverLCD16x2.c: 134: {
  7949                           ;DriverLCD16x2.c: 135: lcd_cmd(0b10000000);
  7950  002C30  0E80               	movlw	128
  7951  002C32  EC2C  F019         	call	_lcd_cmd
  7952                           
  7953                           ;DriverLCD16x2.c: 136: Delay(1);
  7954  002C36  0E00               	movlw	0
  7955  002C38  6E15               	movwf	Delay@DelayCount+1,c
  7956  002C3A  0E01               	movlw	1
  7957  002C3C  6E14               	movwf	Delay@DelayCount,c
  7958  002C3E  EC92  F018         	call	_Delay	;wreg free
  7959                           
  7960                           ;DriverLCD16x2.c: 137: }
  7961  002C42  D00E               	goto	l4085
  7962  002C44                     l4081:
  7963                           
  7964                           ;DriverLCD16x2.c: 138: else if(y==2)
  7965  002C44  0E02               	movlw	2
  7966  002C46  1819               	xorwf	CursorGOTOxy@y,w,c
  7967  002C48  101A               	iorwf	CursorGOTOxy@y+1,w,c
  7968  002C4A  A4D8               	btfss	status,2,c
  7969  002C4C  D009               	goto	l4085
  7970                           
  7971                           ;DriverLCD16x2.c: 139: {
  7972                           ;DriverLCD16x2.c: 140: lcd_cmd(0b11000000);
  7973  002C4E  0EC0               	movlw	192
  7974  002C50  EC2C  F019         	call	_lcd_cmd
  7975                           
  7976                           ;DriverLCD16x2.c: 141: Delay(1);
  7977  002C54  0E00               	movlw	0
  7978  002C56  6E15               	movwf	Delay@DelayCount+1,c
  7979  002C58  0E01               	movlw	1
  7980  002C5A  6E14               	movwf	Delay@DelayCount,c
  7981  002C5C  EC92  F018         	call	_Delay	;wreg free
  7982  002C60                     l4085:
  7983                           
  7984                           ;DriverLCD16x2.c: 142: }
  7985                           ;DriverLCD16x2.c: 143: for (i=0;i<x-1;i++)
  7986  002C60  0E00               	movlw	0
  7987  002C62  6E21               	movwf	CursorGOTOxy@i+1,c
  7988  002C64  0E00               	movlw	0
  7989  002C66  6E20               	movwf	CursorGOTOxy@i,c
  7990  002C68  D00B               	goto	l4091
  7991  002C6A                     l4087:
  7992                           
  7993                           ;DriverLCD16x2.c: 144: {
  7994                           ;DriverLCD16x2.c: 145: lcd_cmd(0b00010100);
  7995  002C6A  0E14               	movlw	20
  7996  002C6C  EC2C  F019         	call	_lcd_cmd
  7997                           
  7998                           ;DriverLCD16x2.c: 146: Delay(1);
  7999  002C70  0E00               	movlw	0
  8000  002C72  6E15               	movwf	Delay@DelayCount+1,c
  8001  002C74  0E01               	movlw	1
  8002  002C76  6E14               	movwf	Delay@DelayCount,c
  8003  002C78  EC92  F018         	call	_Delay	;wreg free
  8004  002C7C  4A20               	infsnz	CursorGOTOxy@i,f,c
  8005  002C7E  2A21               	incf	CursorGOTOxy@i+1,f,c
  8006  002C80                     l4091:
  8007  002C80  0EFF               	movlw	255
  8008  002C82  6E1B               	movwf	??_CursorGOTOxy& (0+255),c
  8009  002C84  0EFF               	movlw	255
  8010  002C86  6E1C               	movwf	(??_CursorGOTOxy+1)& (0+255),c
  8011  002C88  C017  F01D         	movff	CursorGOTOxy@x,??_CursorGOTOxy+2
  8012  002C8C  C018  F01E         	movff	CursorGOTOxy@x+1,??_CursorGOTOxy+3
  8013  002C90  501B               	movf	??_CursorGOTOxy,w,c
  8014  002C92  261D               	addwf	??_CursorGOTOxy+2,f,c
  8015  002C94  501C               	movf	??_CursorGOTOxy+1,w,c
  8016  002C96  221E               	addwfc	??_CursorGOTOxy+3,f,c
  8017  002C98  501D               	movf	??_CursorGOTOxy+2,w,c
  8018  002C9A  5C20               	subwf	CursorGOTOxy@i,w,c
  8019  002C9C  5021               	movf	CursorGOTOxy@i+1,w,c
  8020  002C9E  0A80               	xorlw	128
  8021  002CA0  6E1F               	movwf	(??_CursorGOTOxy+4)& (0+255),c
  8022  002CA2  501E               	movf	??_CursorGOTOxy+3,w,c
  8023  002CA4  0A80               	xorlw	128
  8024  002CA6  581F               	subwfb	(??_CursorGOTOxy+4)& (0+255),w,c
  8025  002CA8  B0D8               	btfsc	status,0,c
  8026  002CAA  0012               	return	
  8027  002CAC  D7DE               	goto	l4087
  8028  002CAE                     __end_of_CursorGOTOxy:
  8029                           	opt stack 0
  8030                           tblptru	equ	0xFF8
  8031                           tblptrh	equ	0xFF7
  8032                           tblptrl	equ	0xFF6
  8033                           tablat	equ	0xFF5
  8034                           prodh	equ	0xFF4
  8035                           prodl	equ	0xFF3
  8036                           intcon	equ	0xFF2
  8037                           intcon2	equ	0xFF1
  8038                           postinc0	equ	0xFEE
  8039                           wreg	equ	0xFE8
  8040                           indf2	equ	0xFDF
  8041                           postinc2	equ	0xFDE
  8042                           postdec2	equ	0xFDD
  8043                           fsr2h	equ	0xFDA
  8044                           fsr2l	equ	0xFD9
  8045                           status	equ	0xFD8
  8046                           
  8047 ;; *************** function _lcd_cmd *****************
  8048 ;; Defined at:
  8049 ;;		line 25 in file "DriverLCD16x2.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;  x               1    wreg     unsigned char 
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;  x               1   21[COMRAM] unsigned char 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      void 
  8056 ;; Registers used:
  8057 ;;		wreg, status,2, status,0, cstack
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;Total ram usage:        1 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    5
  8070 ;; This function calls:
  8071 ;;		_lcd_lat
  8072 ;; This function is called by:
  8073 ;;		_lcd_init
  8074 ;;		_DisplayONCursorONToggleON
  8075 ;;		_CursorGOTOxy
  8076 ;;		_DisplayClear
  8077 ;;		_HomeReturn
  8078 ;;		_DisplayONCursorOFFToggleOFF
  8079 ;;		_DisplayOFF
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           	psect	text43
  8084  003258                     __ptext43:
  8085                           	opt stack 0
  8086  003258                     _lcd_cmd:
  8087                           	opt stack 24
  8088                           
  8089                           ;incstack = 0
  8090                           ;lcd_cmd@x stored from wreg
  8091  003258  6E16               	movwf	lcd_cmd@x,c
  8092                           
  8093                           ;DriverLCD16x2.c: 27: PORTBbits.RB6 = 0;
  8094  00325A  9C81               	bcf	3969,6,c	;volatile
  8095                           
  8096                           ;DriverLCD16x2.c: 28: PORTB &= 0xF0;
  8097  00325C  0EF0               	movlw	240
  8098  00325E  1681               	andwf	3969,f,c	;volatile
  8099                           
  8100                           ;DriverLCD16x2.c: 29: PORTB |= ((x & 0xF0)>>4);
  8101  003260  3816               	swapf	lcd_cmd@x,w,c
  8102  003262  0B0F               	andlw	15
  8103  003264  0B0F               	andlw	15
  8104  003266  1281               	iorwf	3969,f,c	;volatile
  8105                           
  8106                           ;DriverLCD16x2.c: 30: lcd_lat();
  8107  003268  EC9B  F019         	call	_lcd_lat	;wreg free
  8108                           
  8109                           ;DriverLCD16x2.c: 32: PORTB &= 0xF0;
  8110  00326C  0EF0               	movlw	240
  8111  00326E  1681               	andwf	3969,f,c	;volatile
  8112                           
  8113                           ;DriverLCD16x2.c: 33: PORTB |= ((x & 0x0F));
  8114  003270  5016               	movf	lcd_cmd@x,w,c
  8115  003272  0B0F               	andlw	15
  8116  003274  1281               	iorwf	3969,f,c	;volatile
  8117                           
  8118                           ;DriverLCD16x2.c: 34: lcd_lat();
  8119  003276  EC9B  F019         	call	_lcd_lat	;wreg free
  8120  00327A  0012               	return		;funcret
  8121  00327C                     __end_of_lcd_cmd:
  8122                           	opt stack 0
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           intcon2	equ	0xFF1
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function _lcd_lat *****************
  8141 ;; Defined at:
  8142 ;;		line 17 in file "DriverLCD16x2.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, status,2, status,0, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;Total ram usage:        0 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    4
  8163 ;; This function calls:
  8164 ;;		_Delay
  8165 ;; This function is called by:
  8166 ;;		_lcd_cmd
  8167 ;;		_lcd_cmd_hf
  8168 ;;		_lcd_dwr
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text44
  8173  003336                     __ptext44:
  8174                           	opt stack 0
  8175  003336                     _lcd_lat:
  8176                           	opt stack 23
  8177                           
  8178                           ;DriverLCD16x2.c: 20: PORTBbits.RB7 = 1;
  8179                           
  8180                           ;incstack = 0
  8181  003336  8E81               	bsf	3969,7,c	;volatile
  8182                           
  8183                           ;DriverLCD16x2.c: 21: Delay(1);
  8184  003338  0E00               	movlw	0
  8185  00333A  6E15               	movwf	Delay@DelayCount+1,c
  8186  00333C  0E01               	movlw	1
  8187  00333E  6E14               	movwf	Delay@DelayCount,c
  8188  003340  EC92  F018         	call	_Delay	;wreg free
  8189                           
  8190                           ;DriverLCD16x2.c: 22: PORTBbits.RB7 = 0;
  8191  003344  9E81               	bcf	3969,7,c	;volatile
  8192  003346  0012               	return		;funcret
  8193  003348                     __end_of_lcd_lat:
  8194                           	opt stack 0
  8195                           tblptru	equ	0xFF8
  8196                           tblptrh	equ	0xFF7
  8197                           tblptrl	equ	0xFF6
  8198                           tablat	equ	0xFF5
  8199                           prodh	equ	0xFF4
  8200                           prodl	equ	0xFF3
  8201                           intcon	equ	0xFF2
  8202                           intcon2	equ	0xFF1
  8203                           postinc0	equ	0xFEE
  8204                           wreg	equ	0xFE8
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function _Delay *****************
  8213 ;; Defined at:
  8214 ;;		line 7 in file "devices.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  DelayCount      2   19[COMRAM] unsigned int 
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg, status,2, status,0
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;Total ram usage:        2 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    3
  8235 ;; This function calls:
  8236 ;;		Nothing
  8237 ;; This function is called by:
  8238 ;;		_main
  8239 ;;		_KeyPadScan
  8240 ;;		_KeyPadAcquire
  8241 ;;		_lcd_lat
  8242 ;;		_lcd_init
  8243 ;;		_DisplayONCursorONToggleON
  8244 ;;		_CursorGOTOxy
  8245 ;;		_DisplayClear
  8246 ;;		_HomeReturn
  8247 ;;		_DisplayONCursorOFFToggleOFF
  8248 ;;		_DisplayOFF
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text45
  8253  003124                     __ptext45:
  8254                           	opt stack 0
  8255  003124                     _Delay:
  8256                           	opt stack 0
  8257                           
  8258                           ;incstack = 0
  8259  003124  D00C               	goto	l2925
  8260  003126                     l2921:
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;devices.c: 11: {
  8264                           ;devices.c: 12: if (TMR4_Ticked==1)
  8265  003126  0100               	movlb	0	; () banked
  8266  003128  05A8               	decf	_TMR4_Ticked& (0+255),w,b
  8267  00312A  0100               	movlb	0	; () banked
  8268  00312C  11A9               	iorwf	(_TMR4_Ticked+1)& (0+255),w,b
  8269  00312E  A4D8               	btfss	status,2,c
  8270  003130  D00B               	goto	l2927
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;devices.c: 13: {
  8274                           ;devices.c: 15: DelayCount=DelayCount-1;
  8275  003132  0EFF               	movlw	255
  8276  003134  2414               	addwf	Delay@DelayCount,w,c
  8277  003136  6E14               	movwf	Delay@DelayCount,c
  8278  003138  0EFF               	movlw	255
  8279  00313A  2015               	addwfc	Delay@DelayCount+1,w,c
  8280  00313C  6E15               	movwf	Delay@DelayCount+1,c
  8281  00313E                     l2925:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;devices.c: 16: TMR4_Ticked=0;
  8285  00313E  0E00               	movlw	0
  8286  003140  0100               	movlb	0	; () banked
  8287  003142  6FA9               	movwf	(_TMR4_Ticked+1)& (0+255),b
  8288  003144  0E00               	movlw	0
  8289  003146  6FA8               	movwf	_TMR4_Ticked& (0+255),b
  8290  003148                     l2927:
  8291                           
  8292                           ; BSR set to: 0
  8293  003148  5014               	movf	Delay@DelayCount,w,c
  8294  00314A  1015               	iorwf	Delay@DelayCount+1,w,c
  8295  00314C  B4D8               	btfsc	status,2,c
  8296  00314E  0012               	return	
  8297  003150  D7EA               	goto	l2921
  8298  003152                     __end_of_Delay:
  8299                           	opt stack 0
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           intcon	equ	0xFF2
  8307                           intcon2	equ	0xFF1
  8308                           postinc0	equ	0xFEE
  8309                           wreg	equ	0xFE8
  8310                           indf2	equ	0xFDF
  8311                           postinc2	equ	0xFDE
  8312                           postdec2	equ	0xFDD
  8313                           fsr2h	equ	0xFDA
  8314                           fsr2l	equ	0xFD9
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function _INTERRUPT_InterruptManager *****************
  8318 ;; Defined at:
  8319 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;		None
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8337 ;;Total ram usage:       14 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    2
  8340 ;; This function calls:
  8341 ;;		_I2C1_BusCollisionISR
  8342 ;;		_I2C1_ISR
  8343 ;;		_TMR2_ISR
  8344 ;;		_TMR4_ISR
  8345 ;; This function is called by:
  8346 ;;		Interrupt level 2
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	intcode
  8351  000008                     __pintcode:
  8352                           	opt stack 0
  8353  000008                     _INTERRUPT_InterruptManager:
  8354                           	opt stack 23
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;incstack = 0
  8358  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8359  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
  8360  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8361  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8362  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8363  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8364  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8365  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8366  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8367  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8368  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8369  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8370  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8371  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8372  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8373                           
  8374                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bits.BC
      +                          L1IF == 1)
  8375  000042  BCF2               	btfsc	intcon,6,c	;volatile
  8376  000044  A6A0               	btfss	4000,3,c	;volatile
  8377  000046  D003               	goto	i2l4169
  8378  000048  B6A1               	btfsc	4001,3,c	;volatile
  8379                           
  8380                           ;interrupt_manager.c: 61: {
  8381                           ;interrupt_manager.c: 62: I2C1_BusCollisionISR();
  8382  00004A  ECD0  F019         	call	_I2C1_BusCollisionISR	;wreg free
  8383  00004E                     i2l4169:
  8384                           
  8385                           ;interrupt_manager.c: 63: }
  8386                           ;interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bits.SS
      +                          P1IF == 1)
  8387  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  8388  000050  A69D               	btfss	3997,3,c	;volatile
  8389  000052  D003               	goto	i2l4177
  8390  000054  B69E               	btfsc	3998,3,c	;volatile
  8391                           
  8392                           ;interrupt_manager.c: 65: {
  8393                           ;interrupt_manager.c: 66: I2C1_ISR();
  8394  000056  EC09  F011         	call	_I2C1_ISR	;wreg free
  8395  00005A                     i2l4177:
  8396                           
  8397                           ;interrupt_manager.c: 67: }
  8398                           ;interrupt_manager.c: 68: if(INTCONbits.PEIE == 1 && PIE5bits.TMR4IE == 1 && PIR5bits.TM
      +                          R4IF == 1)
  8399  00005A  BCF2               	btfsc	intcon,6,c	;volatile
  8400  00005C  A07D               	btfss	3965,0,c	;volatile
  8401  00005E  D003               	goto	i2l4185
  8402  000060  B07E               	btfsc	3966,0,c	;volatile
  8403                           
  8404                           ;interrupt_manager.c: 69: {
  8405                           ;interrupt_manager.c: 70: TMR4_ISR();
  8406  000062  ECD0  F018         	call	_TMR4_ISR	;wreg free
  8407  000066                     i2l4185:
  8408                           
  8409                           ;interrupt_manager.c: 71: }
  8410                           ;interrupt_manager.c: 72: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
  8411  000066  BCF2               	btfsc	intcon,6,c	;volatile
  8412  000068  A29D               	btfss	3997,1,c	;volatile
  8413  00006A  D003               	goto	i2l407
  8414  00006C  B29E               	btfsc	3998,1,c	;volatile
  8415                           
  8416                           ;interrupt_manager.c: 73: {
  8417                           ;interrupt_manager.c: 74: TMR2_ISR();
  8418  00006E  ECE3  F018         	call	_TMR2_ISR	;wreg free
  8419  000072                     i2l407:
  8420  000072  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8421  000076  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8422  00007A  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8423  00007E  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8424  000082  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8425  000086  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8426  00008A  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8427  00008E  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8428  000092  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8429  000096  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8430  00009A  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8431  00009E  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8432  0000A2  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8433  0000A6  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8434  0000AA  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8435  0000AC  0011               	retfie		f
  8436  0000AE                     __end_of_INTERRUPT_InterruptManager:
  8437                           	opt stack 0
  8438                           pclatu	equ	0xFFB
  8439                           pclath	equ	0xFFA
  8440                           tblptru	equ	0xFF8
  8441                           tblptrh	equ	0xFF7
  8442                           tblptrl	equ	0xFF6
  8443                           tablat	equ	0xFF5
  8444                           prodh	equ	0xFF4
  8445                           prodl	equ	0xFF3
  8446                           intcon	equ	0xFF2
  8447                           intcon2	equ	0xFF1
  8448                           postinc0	equ	0xFEE
  8449                           fsr0h	equ	0xFEA
  8450                           fsr0l	equ	0xFE9
  8451                           wreg	equ	0xFE8
  8452                           fsr1h	equ	0xFE2
  8453                           fsr1l	equ	0xFE1
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function _TMR4_ISR *****************
  8462 ;; Defined at:
  8463 ;;		line 121 in file "mcc_generated_files/tmr4.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:        0 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    1
  8484 ;; This function calls:
  8485 ;;		Absolute function
  8486 ;;		_TMR4_DefaultInterruptHandler
  8487 ;;		_TMR4_Interrupt
  8488 ;; This function is called by:
  8489 ;;		_INTERRUPT_InterruptManager
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           	psect	text47
  8494  0031A0                     __ptext47:
  8495                           	opt stack 0
  8496  0031A0                     _TMR4_ISR:
  8497                           	opt stack 23
  8498                           
  8499                           ;tmr4.c: 125: PIR5bits.TMR4IF = 0;
  8500                           
  8501                           ;incstack = 0
  8502  0031A0  907E               	bcf	3966,0,c	;volatile
  8503                           
  8504                           ;tmr4.c: 127: if(TMR4_InterruptHandler)
  8505  0031A2  0100               	movlb	0	; () banked
  8506  0031A4  51BC               	movf	_TMR4_InterruptHandler& (0+255),w,b
  8507  0031A6  0100               	movlb	0	; () banked
  8508  0031A8  11BD               	iorwf	(_TMR4_InterruptHandler+1)& (0+255),w,b
  8509  0031AA  B4D8               	btfsc	status,2,c
  8510  0031AC  0012               	return	
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;tmr4.c: 128: {
  8514                           ;tmr4.c: 129: TMR4_InterruptHandler();
  8515  0031AE  D801               	call	i2u355_48
  8516  0031B0  0012               	return	
  8517  0031B2                     i2u355_48:
  8518  0031B2  0005               	push	
  8519  0031B4  6EFA               	movwf	pclath,c
  8520  0031B6  0100               	movlb	0	; () banked
  8521  0031B8  51BC               	movf	_TMR4_InterruptHandler& (0+255),w,b
  8522  0031BA  6EFD               	movwf	tosl,c
  8523  0031BC  51BD               	movf	(_TMR4_InterruptHandler+1)& (0+255),w,b
  8524  0031BE  6EFE               	movwf	tosh,c
  8525  0031C0  6AFF               	clrf	tosu,c
  8526  0031C2  50FA               	movf	pclath,w,c
  8527  0031C4  0012               	return		;indir
  8528  0031C6                     __end_of_TMR4_ISR:
  8529                           	opt stack 0
  8530                           tosu	equ	0xFFF
  8531                           tosh	equ	0xFFE
  8532                           tosl	equ	0xFFD
  8533                           pclatu	equ	0xFFB
  8534                           pclath	equ	0xFFA
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           intcon2	equ	0xFF1
  8543                           postinc0	equ	0xFEE
  8544                           fsr0h	equ	0xFEA
  8545                           fsr0l	equ	0xFE9
  8546                           wreg	equ	0xFE8
  8547                           fsr1h	equ	0xFE2
  8548                           fsr1l	equ	0xFE1
  8549                           indf2	equ	0xFDF
  8550                           postinc2	equ	0xFDE
  8551                           postdec2	equ	0xFDD
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _TMR4_DefaultInterruptHandler *****************
  8557 ;; Defined at:
  8558 ;;		line 138 in file "mcc_generated_files/tmr4.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		None
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;Total ram usage:        0 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; This function calls:
  8579 ;;		Nothing
  8580 ;; This function is called by:
  8581 ;;		_TMR4_Initialize
  8582 ;;		_TMR4_ISR
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           	psect	text48
  8587  00339C                     __ptext48:
  8588                           	opt stack 0
  8589  00339C                     _TMR4_DefaultInterruptHandler:
  8590                           	opt stack 23
  8591                           
  8592                           ;incstack = 0
  8593  00339C  0012               	return		;funcret
  8594  00339E                     __end_of_TMR4_DefaultInterruptHandler:
  8595                           	opt stack 0
  8596                           tosu	equ	0xFFF
  8597                           tosh	equ	0xFFE
  8598                           tosl	equ	0xFFD
  8599                           pclatu	equ	0xFFB
  8600                           pclath	equ	0xFFA
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           intcon2	equ	0xFF1
  8609                           postinc0	equ	0xFEE
  8610                           fsr0h	equ	0xFEA
  8611                           fsr0l	equ	0xFE9
  8612                           wreg	equ	0xFE8
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           fsr2h	equ	0xFDA
  8619                           fsr2l	equ	0xFD9
  8620                           status	equ	0xFD8
  8621                           
  8622 ;; *************** function _TMR4_Interrupt *****************
  8623 ;; Defined at:
  8624 ;;		line 22 in file "devices.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;		None
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;		None
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1    wreg      void 
  8631 ;; Registers used:
  8632 ;;		wreg, status,2
  8633 ;; Tracked objects:
  8634 ;;		On entry : 0/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;Total ram usage:        0 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_main
  8648 ;;		_TMR4_ISR
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text49
  8653  003362                     __ptext49:
  8654                           	opt stack 0
  8655  003362                     _TMR4_Interrupt:
  8656                           	opt stack 23
  8657                           
  8658                           ;devices.c: 24: TMR4_Ticked = 1;
  8659                           
  8660                           ;incstack = 0
  8661  003362  0E00               	movlw	0
  8662  003364  0100               	movlb	0	; () banked
  8663  003366  6FA9               	movwf	(_TMR4_Ticked+1)& (0+255),b
  8664  003368  0E01               	movlw	1
  8665  00336A  6FA8               	movwf	_TMR4_Ticked& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668  00336C  0012               	return		;funcret
  8669  00336E                     __end_of_TMR4_Interrupt:
  8670                           	opt stack 0
  8671                           tosu	equ	0xFFF
  8672                           tosh	equ	0xFFE
  8673                           tosl	equ	0xFFD
  8674                           pclatu	equ	0xFFB
  8675                           pclath	equ	0xFFA
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon2	equ	0xFF1
  8684                           postinc0	equ	0xFEE
  8685                           fsr0h	equ	0xFEA
  8686                           fsr0l	equ	0xFE9
  8687                           wreg	equ	0xFE8
  8688                           fsr1h	equ	0xFE2
  8689                           fsr1l	equ	0xFE1
  8690                           indf2	equ	0xFDF
  8691                           postinc2	equ	0xFDE
  8692                           postdec2	equ	0xFDD
  8693                           fsr2h	equ	0xFDA
  8694                           fsr2l	equ	0xFD9
  8695                           status	equ	0xFD8
  8696                           
  8697 ;; *************** function _TMR2_ISR *****************
  8698 ;; Defined at:
  8699 ;;		line 121 in file "mcc_generated_files/tmr2.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        0 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    1
  8720 ;; This function calls:
  8721 ;;		Absolute function
  8722 ;;		_TMR2_DefaultInterruptHandler
  8723 ;; This function is called by:
  8724 ;;		_INTERRUPT_InterruptManager
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           	psect	text50
  8729  0031C6                     __ptext50:
  8730                           	opt stack 0
  8731  0031C6                     _TMR2_ISR:
  8732                           	opt stack 23
  8733                           
  8734                           ;tmr2.c: 125: PIR1bits.TMR2IF = 0;
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;incstack = 0
  8738  0031C6  929E               	bcf	3998,1,c	;volatile
  8739                           
  8740                           ;tmr2.c: 127: if(TMR2_InterruptHandler)
  8741  0031C8  0100               	movlb	0	; () banked
  8742  0031CA  51BE               	movf	_TMR2_InterruptHandler& (0+255),w,b
  8743  0031CC  0100               	movlb	0	; () banked
  8744  0031CE  11BF               	iorwf	(_TMR2_InterruptHandler+1)& (0+255),w,b
  8745  0031D0  B4D8               	btfsc	status,2,c
  8746  0031D2  0012               	return	
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;tmr2.c: 128: {
  8750                           ;tmr2.c: 129: TMR2_InterruptHandler();
  8751  0031D4  D801               	call	i2u353_48
  8752  0031D6  0012               	return	
  8753  0031D8                     i2u353_48:
  8754  0031D8  0005               	push	
  8755  0031DA  6EFA               	movwf	pclath,c
  8756  0031DC  0100               	movlb	0	; () banked
  8757  0031DE  51BE               	movf	_TMR2_InterruptHandler& (0+255),w,b
  8758  0031E0  6EFD               	movwf	tosl,c
  8759  0031E2  51BF               	movf	(_TMR2_InterruptHandler+1)& (0+255),w,b
  8760  0031E4  6EFE               	movwf	tosh,c
  8761  0031E6  6AFF               	clrf	tosu,c
  8762  0031E8  50FA               	movf	pclath,w,c
  8763  0031EA  0012               	return		;indir
  8764  0031EC                     __end_of_TMR2_ISR:
  8765                           	opt stack 0
  8766                           tosu	equ	0xFFF
  8767                           tosh	equ	0xFFE
  8768                           tosl	equ	0xFFD
  8769                           pclatu	equ	0xFFB
  8770                           pclath	equ	0xFFA
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           intcon	equ	0xFF2
  8778                           intcon2	equ	0xFF1
  8779                           postinc0	equ	0xFEE
  8780                           fsr0h	equ	0xFEA
  8781                           fsr0l	equ	0xFE9
  8782                           wreg	equ	0xFE8
  8783                           fsr1h	equ	0xFE2
  8784                           fsr1l	equ	0xFE1
  8785                           indf2	equ	0xFDF
  8786                           postinc2	equ	0xFDE
  8787                           postdec2	equ	0xFDD
  8788                           fsr2h	equ	0xFDA
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  8793 ;; Defined at:
  8794 ;;		line 138 in file "mcc_generated_files/tmr2.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		None
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;Total ram usage:        0 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_TMR2_Initialize
  8818 ;;		_TMR2_ISR
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text51
  8823  00339E                     __ptext51:
  8824                           	opt stack 0
  8825  00339E                     _TMR2_DefaultInterruptHandler:
  8826                           	opt stack 23
  8827                           
  8828                           ;incstack = 0
  8829  00339E  0012               	return		;funcret
  8830  0033A0                     __end_of_TMR2_DefaultInterruptHandler:
  8831                           	opt stack 0
  8832                           tosu	equ	0xFFF
  8833                           tosh	equ	0xFFE
  8834                           tosl	equ	0xFFD
  8835                           pclatu	equ	0xFFB
  8836                           pclath	equ	0xFFA
  8837                           tblptru	equ	0xFF8
  8838                           tblptrh	equ	0xFF7
  8839                           tblptrl	equ	0xFF6
  8840                           tablat	equ	0xFF5
  8841                           prodh	equ	0xFF4
  8842                           prodl	equ	0xFF3
  8843                           intcon	equ	0xFF2
  8844                           intcon2	equ	0xFF1
  8845                           postinc0	equ	0xFEE
  8846                           fsr0h	equ	0xFEA
  8847                           fsr0l	equ	0xFE9
  8848                           wreg	equ	0xFE8
  8849                           fsr1h	equ	0xFE2
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           postdec2	equ	0xFDD
  8854                           fsr2h	equ	0xFDA
  8855                           fsr2l	equ	0xFD9
  8856                           status	equ	0xFD8
  8857                           
  8858 ;; *************** function _I2C1_ISR *****************
  8859 ;; Defined at:
  8860 ;;		line 233 in file "mcc_generated_files/i2c1.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      void 
  8867 ;; Registers used:
  8868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;Total ram usage:        2 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    1
  8881 ;; This function calls:
  8882 ;;		_I2C1_FunctionComplete
  8883 ;;		_I2C1_Stop
  8884 ;; This function is called by:
  8885 ;;		_INTERRUPT_InterruptManager
  8886 ;; This function uses a non-reentrant model
  8887 ;;
  8888                           
  8889                           	psect	text52
  8890  002212                     __ptext52:
  8891                           	opt stack 0
  8892  002212                     _I2C1_ISR:
  8893                           	opt stack 23
  8894                           
  8895                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
  8896                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
  8897                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
  8898                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  8899                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
  8900                           
  8901                           ;incstack = 0
  8902  002212  969E               	bcf	3998,3,c	;volatile
  8903                           
  8904                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
  8905  002214  AEC6               	btfss	4038,7,c	;volatile
  8906  002216  D0F9               	goto	i2l4057
  8907                           
  8908                           ;i2c1.c: 246: {
  8909                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
  8910  002218  9EC6               	bcf	4038,7,c	;volatile
  8911                           
  8912                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
  8913  00221A  0E00               	movlw	0
  8914  00221C  6E48               	movwf	_i2c1_state,c
  8915                           
  8916                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
  8917  00221E  EE20 F003          	lfsr	2,3
  8918  002222  5040               	movf	_p_i2c1_current,w,c
  8919  002224  26D9               	addwf	fsr2l,f,c
  8920  002226  5041               	movf	_p_i2c1_current+1,w,c
  8921  002228  22DA               	addwfc	fsr2h,f,c
  8922  00222A  CFDE F004          	movff	postinc2,??_I2C1_ISR
  8923  00222E  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
  8924  002232  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
  8925  002236  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
  8926  00223A  0E01               	movlw	1
  8927  00223C  6EDF               	movwf	indf2,c
  8928                           
  8929                           ;i2c1.c: 253: p_i2c1_current = (0);
  8930  00223E  0E00               	movlw	0
  8931  002240  6E40               	movwf	_p_i2c1_current,c
  8932  002242  0E00               	movlw	0
  8933  002244  6E41               	movwf	_p_i2c1_current+1,c
  8934                           
  8935                           ;i2c1.c: 255: return;
  8936  002246  0012               	return	
  8937  002248                     i2l128:
  8938                           
  8939                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
  8940  002248  B23B               	btfsc	_i2c1_object+4,1,c
  8941  00224A  0012               	return	
  8942                           
  8943                           ;i2c1.c: 264: {
  8944                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
  8945  00224C  C039  F040         	movff	_i2c1_object+2,_p_i2c1_current
  8946  002250  C03A  F041         	movff	_i2c1_object+3,_p_i2c1_current+1
  8947                           
  8948                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
  8949  002254  C039  FFD9         	movff	_i2c1_object+2,fsr2l
  8950  002258  C03A  FFDA         	movff	_i2c1_object+3,fsr2h
  8951  00225C  50DF               	movf	indf2,w,c
  8952  00225E  6E47               	movwf	_i2c1_trb_count,c
  8953                           
  8954                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
  8955  002260  EE20 F001          	lfsr	2,1
  8956  002264  5039               	movf	_i2c1_object+2,w,c
  8957  002266  26D9               	addwf	fsr2l,f,c
  8958  002268  503A               	movf	_i2c1_object+3,w,c
  8959  00226A  22DA               	addwfc	fsr2h,f,c
  8960  00226C  CFDE F042          	movff	postinc2,_p_i2c1_trb_current
  8961  002270  CFDD F043          	movff	postdec2,_p_i2c1_trb_current+1
  8962                           
  8963                           ;i2c1.c: 270: i2c1_object.pTrHead++;
  8964  002274  0E06               	movlw	6
  8965  002276  2639               	addwf	_i2c1_object+2,f,c
  8966  002278  0E00               	movlw	0
  8967  00227A  223A               	addwfc	_i2c1_object+3,f,c
  8968                           
  8969                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
  8970  00227C  0EBC               	movlw	low (_i2c1_tr_queue+6)
  8971  00227E  1839               	xorwf	_i2c1_object+2,w,c
  8972  002280  E108               	bnz	i2l3949
  8973  002282  0E00               	movlw	high (_i2c1_tr_queue+6)
  8974  002284  183A               	xorwf	_i2c1_object+3,w,c
  8975  002286  A4D8               	btfss	status,2,c
  8976  002288  D004               	goto	i2l3949
  8977                           
  8978                           ;i2c1.c: 274: {
  8979                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
  8980  00228A  0EB6               	movlw	low _i2c1_tr_queue
  8981  00228C  6E39               	movwf	_i2c1_object+2,c
  8982  00228E  0E00               	movlw	high _i2c1_tr_queue
  8983  002290  6E3A               	movwf	_i2c1_object+3,c
  8984  002292                     i2l3949:
  8985                           
  8986                           ;i2c1.c: 277: }
  8987                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
  8988  002292  903B               	bcf	_i2c1_object+4,0,c
  8989                           
  8990                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
  8991  002294  5037               	movf	_i2c1_object,w,c
  8992  002296  1839               	xorwf	_i2c1_object+2,w,c
  8993  002298  E104               	bnz	i2l131
  8994  00229A  5038               	movf	_i2c1_object+1,w,c
  8995  00229C  183A               	xorwf	_i2c1_object+3,w,c
  8996  00229E  B4D8               	btfsc	status,2,c
  8997                           
  8998                           ;i2c1.c: 285: {
  8999                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
  9000  0022A0  823B               	bsf	_i2c1_object+4,1,c
  9001  0022A2                     i2l131:
  9002                           
  9003                           ;i2c1.c: 288: }
  9004                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
  9005  0022A2  80C5               	bsf	4037,0,c	;volatile
  9006                           
  9007                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
  9008  0022A4  0E02               	movlw	2
  9009  0022A6  6E48               	movwf	_i2c1_state,c
  9010                           
  9011                           ;i2c1.c: 295: }
  9012                           ;i2c1.c: 297: break;
  9013  0022A8  0012               	return	
  9014  0022AA                     i2l133:
  9015                           
  9016                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
  9017  0022AA  82C5               	bsf	4037,1,c	;volatile
  9018                           
  9019                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
  9020  0022AC  0E02               	movlw	2
  9021  0022AE  6E48               	movwf	_i2c1_state,c
  9022                           
  9023                           ;i2c1.c: 309: break;
  9024  0022B0  0012               	return	
  9025  0022B2                     i2l134:
  9026                           
  9027                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
  9028  0022B2  ACC5               	btfss	4037,6,c	;volatile
  9029  0022B4  D005               	goto	i2l3961
  9030                           
  9031                           ;i2c1.c: 314: {
  9032                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
  9033  0022B6  2A3D               	incf	_i2c1_object+6,f,c
  9034                           
  9035                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9036  0022B8  0E04               	movlw	4
  9037  0022BA  EC24  F018         	call	_I2C1_Stop
  9038                           
  9039                           ;i2c1.c: 317: }
  9040  0022BE  0012               	return	
  9041  0022C0                     i2l3961:
  9042                           
  9043                           ;i2c1.c: 318: else
  9044                           ;i2c1.c: 319: {
  9045                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
  9046  0022C0  90D8               	bcf	status,0,c
  9047  0022C2  304A               	rrcf	I2C1_ISR@i2c_address+1,w,c
  9048  0022C4  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
  9049  0022C6  3049               	rrcf	I2C1_ISR@i2c_address,w,c
  9050  0022C8  6E04               	movwf	??_I2C1_ISR& (0+255),c
  9051  0022CA  5004               	movf	??_I2C1_ISR,w,c
  9052  0022CC  6EC9               	movwf	4041,c	;volatile
  9053                           
  9054                           ;i2c1.c: 324: if(i2c_address & 0x01)
  9055  0022CE  A049               	btfss	I2C1_ISR@i2c_address,0,c
  9056  0022D0  D003               	goto	i2l3967
  9057                           
  9058                           ;i2c1.c: 325: {
  9059                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
  9060  0022D2  0E0B               	movlw	11
  9061  0022D4  6E48               	movwf	_i2c1_state,c
  9062                           
  9063                           ;i2c1.c: 329: }
  9064  0022D6  0012               	return	
  9065  0022D8                     i2l3967:
  9066                           
  9067                           ;i2c1.c: 330: else
  9068                           ;i2c1.c: 331: {
  9069                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
  9070  0022D8  0E03               	movlw	3
  9071  0022DA  6E48               	movwf	_i2c1_state,c
  9072                           
  9073                           ;i2c1.c: 334: }
  9074                           ;i2c1.c: 335: }
  9075                           ;i2c1.c: 337: break;
  9076  0022DC  0012               	return	
  9077  0022DE                     i2l139:
  9078                           
  9079                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
  9080  0022DE  ACC5               	btfss	4037,6,c	;volatile
  9081  0022E0  D005               	goto	i2l140
  9082                           
  9083                           ;i2c1.c: 342: {
  9084                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
  9085  0022E2  2A3D               	incf	_i2c1_object+6,f,c
  9086                           
  9087                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9088  0022E4  0E04               	movlw	4
  9089  0022E6  EC24  F018         	call	_I2C1_Stop
  9090                           
  9091                           ;i2c1.c: 345: }
  9092  0022EA  0012               	return	
  9093  0022EC                     i2l140:
  9094                           
  9095                           ;i2c1.c: 346: else
  9096                           ;i2c1.c: 347: {
  9097                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
  9098  0022EC  82C5               	bsf	4037,1,c	;volatile
  9099                           
  9100                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  9101  0022EE  C049  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
  9102  0022F2  C04A  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
  9103  0022F6  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
  9104  0022FA  6A05               	clrf	??_I2C1_ISR+1,c
  9105  0022FC  0E06               	movlw	6
  9106  0022FE  1604               	andwf	??_I2C1_ISR,f,c
  9107  002300  0E00               	movlw	0
  9108  002302  1605               	andwf	??_I2C1_ISR+1,f,c
  9109  002304  0EF0               	movlw	240
  9110  002306  1004               	iorwf	??_I2C1_ISR,w,c
  9111  002308  6E49               	movwf	I2C1_ISR@i2c_address,c
  9112  00230A  5005               	movf	??_I2C1_ISR+1,w,c
  9113  00230C  6E4A               	movwf	I2C1_ISR@i2c_address+1,c
  9114                           
  9115                           ;i2c1.c: 357: i2c_address |= 0x0001;
  9116  00230E  8049               	bsf	I2C1_ISR@i2c_address,0,c
  9117                           
  9118                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
  9119  002310  0E01               	movlw	1
  9120  002312  6E45               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
  9121                           
  9122                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
  9123  002314  0E02               	movlw	2
  9124  002316  6E48               	movwf	_i2c1_state,c
  9125                           
  9126                           ;i2c1.c: 364: }
  9127                           ;i2c1.c: 366: break;
  9128  002318  0012               	return	
  9129  00231A                     i2l3981:
  9130                           
  9131                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
  9132  00231A  0445               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
  9133  00231C  B4D8               	btfsc	status,2,c
  9134  00231E  D01A               	goto	i2l144
  9135                           
  9136                           ;i2c1.c: 382: {
  9137                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
  9138  002320  C042  FFD9         	movff	_p_i2c1_trb_current,fsr2l
  9139  002324  C043  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
  9140  002328  CFDE F049          	movff	postinc2,I2C1_ISR@i2c_address
  9141  00232C  CFDD F04A          	movff	postdec2,I2C1_ISR@i2c_address+1
  9142                           
  9143                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
  9144  002330  EE20 F003          	lfsr	2,3
  9145  002334  5042               	movf	_p_i2c1_trb_current,w,c
  9146  002336  26D9               	addwf	fsr2l,f,c
  9147  002338  5043               	movf	_p_i2c1_trb_current+1,w,c
  9148  00233A  22DA               	addwfc	fsr2h,f,c
  9149  00233C  CFDE F03E          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
  9150  002340  CFDD F03F          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
  9151                           
  9152                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
  9153  002344  EE20 F002          	lfsr	2,2
  9154  002348  5042               	movf	_p_i2c1_trb_current,w,c
  9155  00234A  26D9               	addwf	fsr2l,f,c
  9156  00234C  5043               	movf	_p_i2c1_trb_current+1,w,c
  9157  00234E  22DA               	addwfc	fsr2h,f,c
  9158  002350  50DF               	movf	indf2,w,c
  9159  002352  6E46               	movwf	I2C1_ISR@i2c_bytes_left,c
  9160  002354                     i2l144:
  9161                           
  9162                           ;i2c1.c: 409: else
  9163                           ;i2c1.c: 410: {
  9164                           ;i2c1.c: 412: SSP1BUF = i2c_address;
  9165  002354  C049  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
  9166                           
  9167                           ;i2c1.c: 413: if(i2c_address & 0x01)
  9168  002358  A049               	btfss	I2C1_ISR@i2c_address,0,c
  9169  00235A  D003               	goto	i2l4001
  9170                           
  9171                           ;i2c1.c: 414: {
  9172                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
  9173  00235C  0E05               	movlw	5
  9174  00235E  6E48               	movwf	_i2c1_state,c
  9175                           
  9176                           ;i2c1.c: 417: }
  9177  002360  0012               	return	
  9178  002362                     i2l4001:
  9179                           
  9180                           ;i2c1.c: 418: else
  9181                           ;i2c1.c: 419: {
  9182                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
  9183  002362  0E03               	movlw	3
  9184  002364  6E48               	movwf	_i2c1_state,c
  9185                           
  9186                           ;i2c1.c: 422: }
  9187                           ;i2c1.c: 423: }
  9188                           ;i2c1.c: 424: break;
  9189  002366  0012               	return	
  9190  002368                     i2l150:
  9191                           
  9192                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
  9193  002368  ACC5               	btfss	4037,6,c	;volatile
  9194  00236A  D006               	goto	i2l4009
  9195                           
  9196                           ;i2c1.c: 430: {
  9197                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
  9198  00236C  2A3D               	incf	_i2c1_object+6,f,c
  9199                           
  9200                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
  9201  00236E  9CC5               	bcf	4037,6,c	;volatile
  9202                           
  9203                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
  9204  002370  0E05               	movlw	5
  9205  002372  EC24  F018         	call	_I2C1_Stop
  9206                           
  9207                           ;i2c1.c: 440: }
  9208  002376  0012               	return	
  9209  002378                     i2l4009:
  9210                           
  9211                           ;i2c1.c: 441: else
  9212                           ;i2c1.c: 442: {
  9213                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
  9214  002378  0646               	decf	I2C1_ISR@i2c_bytes_left,f,c
  9215  00237A  2846               	incf	I2C1_ISR@i2c_bytes_left,w,c
  9216  00237C  A4D8               	btfss	status,2,c
  9217  00237E  D00E               	goto	i2l4019
  9218                           
  9219                           ;i2c1.c: 445: {
  9220                           ;i2c1.c: 449: p_i2c1_trb_current++;
  9221  002380  0E06               	movlw	6
  9222  002382  2642               	addwf	_p_i2c1_trb_current,f,c
  9223  002384  0E00               	movlw	0
  9224  002386  2243               	addwfc	_p_i2c1_trb_current+1,f,c
  9225                           
  9226                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
  9227  002388  2E47               	decfsz	_i2c1_trb_count,f,c
  9228  00238A  D004               	goto	i2l154
  9229                           
  9230                           ;i2c1.c: 453: {
  9231                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
  9232  00238C  0E00               	movlw	0
  9233  00238E  EC24  F018         	call	_I2C1_Stop
  9234                           
  9235                           ;i2c1.c: 455: }
  9236  002392  0012               	return	
  9237  002394                     i2l154:
  9238                           
  9239                           ;i2c1.c: 456: else
  9240                           ;i2c1.c: 457: {
  9241                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
  9242  002394  82C5               	bsf	4037,1,c	;volatile
  9243                           
  9244                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
  9245  002396  0E02               	movlw	2
  9246  002398  6E48               	movwf	_i2c1_state,c
  9247                           
  9248                           ;i2c1.c: 469: }
  9249                           ;i2c1.c: 470: }
  9250  00239A  0012               	return	
  9251  00239C                     i2l4019:
  9252                           
  9253                           ;i2c1.c: 471: else
  9254                           ;i2c1.c: 472: {
  9255                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
  9256  00239C  C03E  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
  9257  0023A0  C03F  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
  9258  0023A4  50DF               	movf	indf2,w,c
  9259  0023A6  6EC9               	movwf	4041,c	;volatile
  9260  0023A8  4A3E               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
  9261  0023AA  2A3F               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
  9262                           
  9263                           ;i2c1.c: 475: }
  9264                           ;i2c1.c: 476: }
  9265                           ;i2c1.c: 477: break;
  9266  0023AC  0012               	return	
  9267  0023AE                     i2l157:
  9268                           
  9269                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
  9270  0023AE  ACC5               	btfss	4037,6,c	;volatile
  9271  0023B0  D006               	goto	i2l158
  9272                           
  9273                           ;i2c1.c: 483: {
  9274                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
  9275  0023B2  2A3D               	incf	_i2c1_object+6,f,c
  9276                           
  9277                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9278  0023B4  0E04               	movlw	4
  9279  0023B6  EC24  F018         	call	_I2C1_Stop
  9280                           
  9281                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
  9282  0023BA  9CC5               	bcf	4037,6,c	;volatile
  9283                           
  9284                           ;i2c1.c: 493: }
  9285  0023BC  0012               	return	
  9286  0023BE                     i2l158:
  9287                           
  9288                           ;i2c1.c: 494: else
  9289                           ;i2c1.c: 495: {
  9290                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
  9291  0023BE  86C5               	bsf	4037,3,c	;volatile
  9292                           
  9293                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
  9294  0023C0  0E08               	movlw	8
  9295  0023C2  6E48               	movwf	_i2c1_state,c
  9296                           
  9297                           ;i2c1.c: 498: }
  9298                           ;i2c1.c: 499: break;
  9299  0023C4  0012               	return	
  9300  0023C6                     i2l4031:
  9301                           
  9302                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
  9303  0023C6  0E08               	movlw	8
  9304  0023C8  6E48               	movwf	_i2c1_state,c
  9305                           
  9306                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
  9307  0023CA  86C5               	bsf	4037,3,c	;volatile
  9308                           
  9309                           ;i2c1.c: 511: break;
  9310  0023CC  0012               	return	
  9311  0023CE                     i2l4035:
  9312                           
  9313                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
  9314  0023CE  C03E  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
  9315  0023D2  C03F  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
  9316  0023D6  CFC9 FFDF          	movff	4041,indf2	;volatile
  9317  0023DA  4A3E               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
  9318  0023DC  2A3F               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
  9319                           
  9320                           ;i2c1.c: 519: if(--i2c_bytes_left)
  9321  0023DE  0E01               	movlw	1
  9322  0023E0  5E46               	subwf	I2C1_ISR@i2c_bytes_left,f,c
  9323  0023E2  B4D8               	btfsc	status,2,c
  9324  0023E4  D004               	goto	i2l162
  9325                           
  9326                           ;i2c1.c: 520: {
  9327                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
  9328  0023E6  9AC5               	bcf	4037,5,c	;volatile
  9329                           
  9330                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
  9331  0023E8  0E06               	movlw	6
  9332  0023EA  6E48               	movwf	_i2c1_state,c
  9333                           
  9334                           ;i2c1.c: 530: }
  9335  0023EC  D003               	goto	i2l4047
  9336  0023EE                     i2l162:
  9337                           
  9338                           ;i2c1.c: 531: else
  9339                           ;i2c1.c: 532: {
  9340                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
  9341  0023EE  8AC5               	bsf	4037,5,c	;volatile
  9342                           
  9343                           ;i2c1.c: 538: I2C1_FunctionComplete();
  9344  0023F0  EC6F  F019         	call	_I2C1_FunctionComplete	;wreg free
  9345  0023F4                     i2l4047:
  9346                           
  9347                           ;i2c1.c: 539: }
  9348                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
  9349  0023F4  88C5               	bsf	4037,4,c	;volatile
  9350                           
  9351                           ;i2c1.c: 543: break;
  9352  0023F6  0012               	return	
  9353  0023F8                     i2l4049:
  9354                           
  9355                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
  9356                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
  9357  0023F8  0E00               	movlw	0
  9358  0023FA  EC24  F018         	call	_I2C1_Stop
  9359                           
  9360                           ;i2c1.c: 550: break;
  9361  0023FE  0012               	return	
  9362  002400                     i2l4051:
  9363                           
  9364                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
  9365  002400  2A3D               	incf	_i2c1_object+6,f,c
  9366                           
  9367                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
  9368  002402  0E06               	movlw	6
  9369  002404  EC24  F018         	call	_I2C1_Stop
  9370                           
  9371                           ;i2c1.c: 560: }
  9372                           
  9373                           ;i2c1.c: 558: break;
  9374  002408  0012               	return	
  9375  00240A                     i2l4057:
  9376  00240A  5048               	movf	_i2c1_state,w,c
  9377                           
  9378                           ; Switch size 1, requested type "space"
  9379                           ; Number of cases is 11, Range of values is 0 to 11
  9380                           ; switch strategies available:
  9381                           ; Name         Instructions Cycles
  9382                           ; simple_byte           34    18 (average)
  9383                           ;	Chosen strategy is simple_byte
  9384  00240C  0A00               	xorlw	0	; case 0
  9385  00240E  B4D8               	btfsc	status,2,c
  9386  002410  D71B               	goto	i2l128
  9387  002412  0A01               	xorlw	1	; case 1
  9388  002414  B4D8               	btfsc	status,2,c
  9389  002416  D749               	goto	i2l133
  9390  002418  0A03               	xorlw	3	; case 2
  9391  00241A  B4D8               	btfsc	status,2,c
  9392  00241C  D77E               	goto	i2l3981
  9393  00241E  0A01               	xorlw	1	; case 3
  9394  002420  B4D8               	btfsc	status,2,c
  9395  002422  D7A2               	goto	i2l150
  9396  002424  0A07               	xorlw	7	; case 4
  9397  002426  B4D8               	btfsc	status,2,c
  9398  002428  D7E7               	goto	i2l4049
  9399  00242A  0A01               	xorlw	1	; case 5
  9400  00242C  B4D8               	btfsc	status,2,c
  9401  00242E  D7BF               	goto	i2l157
  9402  002430  0A03               	xorlw	3	; case 6
  9403  002432  B4D8               	btfsc	status,2,c
  9404  002434  D7C8               	goto	i2l4031
  9405  002436  0A01               	xorlw	1	; case 7
  9406  002438  B4D8               	btfsc	status,2,c
  9407  00243A  D7DE               	goto	i2l4049
  9408  00243C  0A0F               	xorlw	15	; case 8
  9409  00243E  B4D8               	btfsc	status,2,c
  9410  002440  D7C6               	goto	i2l4035
  9411  002442  0A02               	xorlw	2	; case 10
  9412  002444  B4D8               	btfsc	status,2,c
  9413  002446  D735               	goto	i2l134
  9414  002448  0A01               	xorlw	1	; case 11
  9415  00244A  B4D8               	btfsc	status,2,c
  9416  00244C  D748               	goto	i2l139
  9417  00244E  D7D8               	goto	i2l4051
  9418  002450                     __end_of_I2C1_ISR:
  9419                           	opt stack 0
  9420                           tosu	equ	0xFFF
  9421                           tosh	equ	0xFFE
  9422                           tosl	equ	0xFFD
  9423                           pclatu	equ	0xFFB
  9424                           pclath	equ	0xFFA
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           intcon2	equ	0xFF1
  9433                           postinc0	equ	0xFEE
  9434                           fsr0h	equ	0xFEA
  9435                           fsr0l	equ	0xFE9
  9436                           wreg	equ	0xFE8
  9437                           fsr1h	equ	0xFE2
  9438                           fsr1l	equ	0xFE1
  9439                           indf2	equ	0xFDF
  9440                           postinc2	equ	0xFDE
  9441                           postdec2	equ	0xFDD
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _I2C1_Stop *****************
  9447 ;; Defined at:
  9448 ;;		line 581 in file "mcc_generated_files/i2c1.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  completion_c    1    wreg     enum E6983
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  completion_c    1    2[COMRAM] enum E6983
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;Total ram usage:        3 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; This function calls:
  9469 ;;		Nothing
  9470 ;; This function is called by:
  9471 ;;		_I2C1_ISR
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           	psect	text53
  9476  003048                     __ptext53:
  9477                           	opt stack 0
  9478  003048                     _I2C1_Stop:
  9479                           	opt stack 23
  9480                           
  9481                           ;incstack = 0
  9482                           ;I2C1_Stop@completion_code stored from wreg
  9483  003048  6E03               	movwf	I2C1_Stop@completion_code,c
  9484                           
  9485                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
  9486  00304A  84C5               	bsf	4037,2,c	;volatile
  9487                           
  9488                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
  9489  00304C  EE20 F003          	lfsr	2,3
  9490  003050  5040               	movf	_p_i2c1_current,w,c
  9491  003052  26D9               	addwf	fsr2l,f,c
  9492  003054  5041               	movf	_p_i2c1_current+1,w,c
  9493  003056  22DA               	addwfc	fsr2h,f,c
  9494  003058  50DE               	movf	postinc2,w,c
  9495  00305A  10DE               	iorwf	postinc2,w,c
  9496  00305C  B4D8               	btfsc	status,2,c
  9497  00305E  D010               	goto	i2l3537
  9498                           
  9499                           ;i2c1.c: 588: {
  9500                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
  9501  003060  EE20 F003          	lfsr	2,3
  9502  003064  5040               	movf	_p_i2c1_current,w,c
  9503  003066  26D9               	addwf	fsr2l,f,c
  9504  003068  5041               	movf	_p_i2c1_current+1,w,c
  9505  00306A  22DA               	addwfc	fsr2h,f,c
  9506  00306C  CFDE F001          	movff	postinc2,??_I2C1_Stop
  9507  003070  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
  9508  003074  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
  9509  003078  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
  9510  00307C  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
  9511  003080                     i2l3537:
  9512                           
  9513                           ;i2c1.c: 591: }
  9514                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
  9515  003080  0E00               	movlw	0
  9516  003082  6E48               	movwf	_i2c1_state,c
  9517  003084  0012               	return		;funcret
  9518  003086                     __end_of_I2C1_Stop:
  9519                           	opt stack 0
  9520                           tosu	equ	0xFFF
  9521                           tosh	equ	0xFFE
  9522                           tosl	equ	0xFFD
  9523                           pclatu	equ	0xFFB
  9524                           pclath	equ	0xFFA
  9525                           tblptru	equ	0xFF8
  9526                           tblptrh	equ	0xFF7
  9527                           tblptrl	equ	0xFF6
  9528                           tablat	equ	0xFF5
  9529                           prodh	equ	0xFF4
  9530                           prodl	equ	0xFF3
  9531                           intcon	equ	0xFF2
  9532                           intcon2	equ	0xFF1
  9533                           postinc0	equ	0xFEE
  9534                           fsr0h	equ	0xFEA
  9535                           fsr0l	equ	0xFE9
  9536                           wreg	equ	0xFE8
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _I2C1_FunctionComplete *****************
  9547 ;; Defined at:
  9548 ;;		line 563 in file "mcc_generated_files/i2c1.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;		None
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;		None
  9553 ;; Return value:  Size  Location     Type
  9554 ;;                  1    wreg      void 
  9555 ;; Registers used:
  9556 ;;		wreg, status,2, status,0
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;Total ram usage:        0 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_I2C1_ISR
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text54
  9576  0032DE                     __ptext54:
  9577                           	opt stack 0
  9578  0032DE                     _I2C1_FunctionComplete:
  9579                           	opt stack 23
  9580                           
  9581                           ;i2c1.c: 567: p_i2c1_trb_current++;
  9582                           
  9583                           ;incstack = 0
  9584  0032DE  0E06               	movlw	6
  9585  0032E0  2642               	addwf	_p_i2c1_trb_current,f,c
  9586  0032E2  0E00               	movlw	0
  9587  0032E4  2243               	addwfc	_p_i2c1_trb_current+1,f,c
  9588                           
  9589                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
  9590  0032E6  2E47               	decfsz	_i2c1_trb_count,f,c
  9591  0032E8  D003               	goto	i2l3545
  9592                           
  9593                           ;i2c1.c: 571: {
  9594                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
  9595  0032EA  0E04               	movlw	4
  9596  0032EC  6E48               	movwf	_i2c1_state,c
  9597                           
  9598                           ;i2c1.c: 573: }
  9599  0032EE  0012               	return	
  9600  0032F0                     i2l3545:
  9601                           
  9602                           ;i2c1.c: 574: else
  9603                           ;i2c1.c: 575: {
  9604                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
  9605  0032F0  0E01               	movlw	1
  9606  0032F2  6E48               	movwf	_i2c1_state,c
  9607  0032F4  0012               	return	
  9608  0032F6                     __end_of_I2C1_FunctionComplete:
  9609                           	opt stack 0
  9610                           tosu	equ	0xFFF
  9611                           tosh	equ	0xFFE
  9612                           tosl	equ	0xFFD
  9613                           pclatu	equ	0xFFB
  9614                           pclath	equ	0xFFA
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           intcon2	equ	0xFF1
  9623                           postinc0	equ	0xFEE
  9624                           fsr0h	equ	0xFEA
  9625                           fsr0l	equ	0xFE9
  9626                           wreg	equ	0xFE8
  9627                           fsr1h	equ	0xFE2
  9628                           fsr1l	equ	0xFE1
  9629                           indf2	equ	0xFDF
  9630                           postinc2	equ	0xFDE
  9631                           postdec2	equ	0xFDD
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8
  9635                           
  9636 ;; *************** function _I2C1_BusCollisionISR *****************
  9637 ;; Defined at:
  9638 ;;		line 728 in file "mcc_generated_files/i2c1.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;                  1    wreg      void 
  9645 ;; Registers used:
  9646 ;;		None
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;Total ram usage:        0 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;;		_INTERRUPT_InterruptManager
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           	psect	text55
  9666  0033A0                     __ptext55:
  9667                           	opt stack 0
  9668  0033A0                     _I2C1_BusCollisionISR:
  9669                           	opt stack 24
  9670                           
  9671                           ;incstack = 0
  9672  0033A0  0012               	return		;funcret
  9673  0033A2                     __end_of_I2C1_BusCollisionISR:
  9674                           	opt stack 0
  9675                           tosu	equ	0xFFF
  9676                           tosh	equ	0xFFE
  9677                           tosl	equ	0xFFD
  9678                           pclatu	equ	0xFFB
  9679                           pclath	equ	0xFFA
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon	equ	0xFF2
  9687                           intcon2	equ	0xFF1
  9688                           postinc0	equ	0xFEE
  9689                           fsr0h	equ	0xFEA
  9690                           fsr0l	equ	0xFE9
  9691                           wreg	equ	0xFE8
  9692                           fsr1h	equ	0xFE2
  9693                           fsr1l	equ	0xFE1
  9694                           indf2	equ	0xFDF
  9695                           postinc2	equ	0xFDE
  9696                           postdec2	equ	0xFDD
  9697                           fsr2h	equ	0xFDA
  9698                           fsr2l	equ	0xFD9
  9699                           status	equ	0xFD8
  9700                           tosu	equ	0xFFF
  9701                           tosh	equ	0xFFE
  9702                           tosl	equ	0xFFD
  9703                           pclatu	equ	0xFFB
  9704                           pclath	equ	0xFFA
  9705                           tblptru	equ	0xFF8
  9706                           tblptrh	equ	0xFF7
  9707                           tblptrl	equ	0xFF6
  9708                           tablat	equ	0xFF5
  9709                           prodh	equ	0xFF4
  9710                           prodl	equ	0xFF3
  9711                           intcon	equ	0xFF2
  9712                           intcon2	equ	0xFF1
  9713                           postinc0	equ	0xFEE
  9714                           fsr0h	equ	0xFEA
  9715                           fsr0l	equ	0xFE9
  9716                           wreg	equ	0xFE8
  9717                           fsr1h	equ	0xFE2
  9718                           fsr1l	equ	0xFE1
  9719                           indf2	equ	0xFDF
  9720                           postinc2	equ	0xFDE
  9721                           postdec2	equ	0xFDD
  9722                           fsr2h	equ	0xFDA
  9723                           fsr2l	equ	0xFD9
  9724                           status	equ	0xFD8
  9725                           
  9726                           	psect	text56
  9727  000000                     __ptext56:
  9728                           	opt stack 0
  9729                           tosu	equ	0xFFF
  9730                           tosh	equ	0xFFE
  9731                           tosl	equ	0xFFD
  9732                           pclatu	equ	0xFFB
  9733                           pclath	equ	0xFFA
  9734                           tblptru	equ	0xFF8
  9735                           tblptrh	equ	0xFF7
  9736                           tblptrl	equ	0xFF6
  9737                           tablat	equ	0xFF5
  9738                           prodh	equ	0xFF4
  9739                           prodl	equ	0xFF3
  9740                           intcon	equ	0xFF2
  9741                           intcon2	equ	0xFF1
  9742                           postinc0	equ	0xFEE
  9743                           fsr0h	equ	0xFEA
  9744                           fsr0l	equ	0xFE9
  9745                           wreg	equ	0xFE8
  9746                           fsr1h	equ	0xFE2
  9747                           fsr1l	equ	0xFE1
  9748                           indf2	equ	0xFDF
  9749                           postinc2	equ	0xFDE
  9750                           postdec2	equ	0xFDD
  9751                           fsr2h	equ	0xFDA
  9752                           fsr2l	equ	0xFD9
  9753                           status	equ	0xFD8
  9754                           
  9755                           	psect	rparam
  9756  0000                     tosu	equ	0xFFF
  9757                           tosh	equ	0xFFE
  9758                           tosl	equ	0xFFD
  9759                           pclatu	equ	0xFFB
  9760                           pclath	equ	0xFFA
  9761                           tblptru	equ	0xFF8
  9762                           tblptrh	equ	0xFF7
  9763                           tblptrl	equ	0xFF6
  9764                           tablat	equ	0xFF5
  9765                           prodh	equ	0xFF4
  9766                           prodl	equ	0xFF3
  9767                           intcon	equ	0xFF2
  9768                           intcon2	equ	0xFF1
  9769                           postinc0	equ	0xFEE
  9770                           fsr0h	equ	0xFEA
  9771                           fsr0l	equ	0xFE9
  9772                           wreg	equ	0xFE8
  9773                           fsr1h	equ	0xFE2
  9774                           fsr1l	equ	0xFE1
  9775                           indf2	equ	0xFDF
  9776                           postinc2	equ	0xFDE
  9777                           postdec2	equ	0xFDD
  9778                           fsr2h	equ	0xFDA
  9779                           fsr2l	equ	0xFD9
  9780                           status	equ	0xFD8
  9781                           
  9782                           	psect	temp
  9783  00004B                     btemp:
  9784                           	opt stack 0
  9785  00004B                     	ds	1
  9786  0000                     int$flags	set	btemp
  9787                           tosu	equ	0xFFF
  9788                           tosh	equ	0xFFE
  9789                           tosl	equ	0xFFD
  9790                           pclatu	equ	0xFFB
  9791                           pclath	equ	0xFFA
  9792                           tblptru	equ	0xFF8
  9793                           tblptrh	equ	0xFF7
  9794                           tblptrl	equ	0xFF6
  9795                           tablat	equ	0xFF5
  9796                           prodh	equ	0xFF4
  9797                           prodl	equ	0xFF3
  9798                           intcon	equ	0xFF2
  9799                           intcon2	equ	0xFF1
  9800                           postinc0	equ	0xFEE
  9801                           fsr0h	equ	0xFEA
  9802                           fsr0l	equ	0xFE9
  9803                           wreg	equ	0xFE8
  9804                           fsr1h	equ	0xFE2
  9805                           fsr1l	equ	0xFE1
  9806                           indf2	equ	0xFDF
  9807                           postinc2	equ	0xFDE
  9808                           postdec2	equ	0xFDD
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    118
    Data        2
    BSS         40
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      74
    BANK0           160     72      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E6983 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_msg_float@aux(BANK0[5]), lcd_msg_int@aux(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_msg@c	PTR unsigned char  size(2) Largest target is 10
		 -> lcd_msg_float@aux(BANK0[5]), lcd_msg_int@aux(COMRAM[10]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR4_Interrupt(), TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_Interrupt(), TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E6983 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    F7095.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F7090.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> I2C1_ISR@i2c_address(COMRAM[2]), NULL(NULL[0]), 

    S119$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E6983 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    S131$pTrFlag	PTR enum E6983 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E6983 size(2) Largest target is 0

    S131$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S142$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S142$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _lcd_msg->_lcd_dwr
    _lcd_init->_lcd_cmd
    _lcd_init->_lcd_cmd_hf
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _KeyPadAcquire->_KeyPadScan
    _KeyPadScan->_Delay
    _DisplayONCursorONToggleON->_lcd_cmd
    _CursorGOTOxy->_lcd_cmd
    _lcd_lat->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_lcd_msg_float
    _lcd_msg_float->_sprintf
    _sprintf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70488
                       _CursorGOTOxy
                              _Delay
          _DisplayONCursorONToggleON
                      _EUSART1_Write
                      _KeyPadAcquire
                         _KeyPadInit
                  _SYSTEM_Initialize
           _TMR4_SetInterruptHandler
                           _lcd_init
                      _lcd_msg_float
 ---------------------------------------------------------------------------------
 (1) _lcd_msg_float                                        8     5      3   53820
                                             64 BANK0      8     5      3
                            _lcd_msg
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    37      7   51786
                                             28 BANK0     36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12359
                                              0 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12080
                                              0 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2696
                                             33 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5162
                                             39 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             25 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             19 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                             19 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2583
                                             27 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             32 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     546
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     602
                                              7 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4415
                                             22 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4051
                                             10 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2404
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                             19 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             19 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _lcd_msg                                              2     0      2    1798
                                             22 COMRAM     2     0      2
                            _lcd_dwr
 ---------------------------------------------------------------------------------
 (3) _lcd_dwr                                              1     1      0    1625
                                             21 COMRAM     1     1      0
                            _lcd_lat
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    4809
                              _Delay
                            _lcd_cmd
                         _lcd_cmd_hf
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd_hf                                           1     1      0    1603
                                             21 COMRAM     1     1      0
                            _lcd_lat
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     236
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR4_SetInterruptHandler                             2     0      2     150
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      86
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      86
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyPadInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyPadAcquire                                        3     1      2    3247
                                             22 COMRAM     3     1      2
                              _Delay
                         _KeyPadScan
 ---------------------------------------------------------------------------------
 (2) _KeyPadScan                                           1     1      0    1620
                                             21 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DisplayONCursorONToggleON                            0     0      0    3206
                              _Delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _CursorGOTOxy                                        11     7      4    3424
                                             22 COMRAM    11     7      4
                              _Delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0    1625
                                             21 COMRAM     1     1      0
                            _lcd_lat
 ---------------------------------------------------------------------------------
 (4) _lcd_lat                                              0     0      0    1581
                              _Delay
 ---------------------------------------------------------------------------------
 (5) _Delay                                                2     0      2    1581
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0      22
                                              5 COMRAM    14    14      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR4_ISR                                             0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
                     _TMR4_Interrupt *
 ---------------------------------------------------------------------------------
 (8) _TMR4_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR4_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             2     2      0      22
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CursorGOTOxy
     _Delay
     _lcd_cmd
       _lcd_lat
         _Delay
   _Delay
   _DisplayONCursorONToggleON
     _Delay
     _lcd_cmd
       _lcd_lat
         _Delay
   _EUSART1_Write
   _KeyPadAcquire
     _Delay
     _KeyPadScan
       _Delay
   _KeyPadInit
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
       _TMR4_StartTimer
   _TMR4_SetInterruptHandler
   _lcd_init
     _Delay
     _lcd_cmd
       _lcd_lat
         _Delay
     _lcd_cmd_hf
       _lcd_lat
         _Delay
   _lcd_msg_float
     _lcd_msg
       _lcd_dwr
         _lcd_lat
           _Delay
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
   _TMR4_ISR
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
     _TMR4_Interrupt *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      4A       1       78.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AC      12        0.0%
DATA                 0      0      AC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Dec 10 18:55:55 2017

        __end_of_TMR2_SetInterruptHandler 3382                           Delay@DelayCount 0014  
                          ?_lcd_msg_float 00A0                               lcd_cmd_hf@x 0016  
                            ___awdiv@sign 001F                       ___wmul@multiplicand 0024  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0075                              ___ftadd@exp2 0074  
                            ___ftadd@sign 0073                                       l452 3358  
                                     l724 1596                                       l951 295E  
                                     l983 2AF2                              __CFG_CPB$OFF 000000  
                                     _PR2 000FBB                                       _PR4 000F52  
                            __CFG_CPD$OFF 000000                              ___awmod@sign 0019  
                         _TMR2_Initialize 329E                           _PWM4_Initialize 32C0  
                                     tosl 000FFD                                       wreg 000FE8  
                            __CFG_LVP$OFF 000000                          __end_of_I2C1_ISR 2450  
                                    l1010 204C                                      l1012 2074  
                                    l1021 214A                                      l1030 2174  
                                    l1006 2012                                      l1125 2E26  
                                    l1135 2EFC                                      l1055 2836  
                                    l1080 3202                                      l1048 27A8  
                                    l1049 27D0                                      l3303 2824  
                                    l4105 301E                                      l3313 2866  
                                    l3305 2830                                      l4107 302A  
                                    l3341 28F6                                      l3333 28C6  
                                    l3319 2884                                      l3263 276E  
                                    l4081 2C44                                      l4241 2A74  
                                    l4321 2102                                      l3353 2924  
                                    l3257 2742                                      l4091 2C80  
                                    l3603 2502                                      l4315 20DA  
                                    l3451 2DE4                                      l3363 294C  
                                    l4411 2CD2                                      l4085 2C60  
                                    l3621 2536                                      l4253 2AC0  
                                    l4245 2A82                                      l4317 20E8  
                                    l4309 20AC                                      l3461 2E18  
                                    l3453 2DE8                                      l3365 2958  
                                    l3357 2934                                      l3293 27FC  
                                    l4421 2CF4                                      l4405 2CC2  
                                    l4087 2C6A                                      l3615 2524  
                                    l3703 3224                                      l3383 2B72  
                                    l4255 2ADE                                      l4247 2A8C  
                                    l4335 219E                                      l4327 2130  
                                    l4319 20F6                                      l3471 2EC6  
                                    l2921 3126                                      l3633 255E  
                                    l3561 247E                                      l4257 2AE8  
                                    l4249 2AAA                                      l4345 21EC  
                                    l4329 213E                                      l3449 2DD8  
                                    l3473 2ECA                                      l3297 280C  
                                    l4417 2CE8                                      l4433 2D1A  
                                    l4361 29C0                                      l3651 2592  
                                    l3627 2548                                      l3555 246C  
                                    l4099 3008                                      l3379 2B42  
                                    l4419 2CF0                                      l4355 2998  
                                    l4515 1AE4                                      l4611 10BA  
                                    l4603 108E                                      l2925 313E  
                                    l3645 2580                                      l3573 24A6  
                                    l3389 2B9E                                      l4293 205A  
                                    l4541 2FDA                                      l3477 2EEE  
                                    l3469 2EBA                                      l4437 2D28  
                                    l4429 2D10                                      l4461 2E72  
                                    l4453 2E58                                      l4533 1D0C  
                                    l4509 1A2E                                      l4613 10C0  
                                    l2927 3148                                      l3663 25BA  
                                    l3591 24DA                                      l3567 2490  
                                    l4287 2020                                      l4551 260C  
                                    l4375 29F2                                      l4527 1C56  
                                    l4519 1B10                                      l4711 14A2  
                                    l3657 25A4                                      l3585 24C8  
                                    l4473 2E9E                                      l4465 2E86  
                                    l4457 2E66                                      l4449 2E4C  
                                    l4385 2A1A                                      l4721 154A  
                                    l4705 146E                                      l4633 1150  
                                    l4801 18CC                                      l4617 10C8  
                                    l4609 10AE                                      l4299 206A  
                                    l4459 2E6E                                      l4379 2A02  
                                    l4619 10F6                                      l3597 24EC  
                                    l4581 26DE                                      l4573 26B2  
                                    l4469 2E90                                      l4389 2A2A  
                                    l4741 15CA                                      l4733 159A  
                                    l4709 149A                                      l4661 128C  
                                    l4583 26E8                                      l4495 1F62  
                                    l4487 1E94                                      l4727 1564  
                                    l4719 153C                                      l4663 12A2  
                                    l4569 269E                                      l4593 2F14  
                                    l4745 161C                                      l4729 1578  
                                    l4673 1332                                      l4665 12D2  
                                    l4657 1266                                      l4649 11FE  
                                    l3699 3212                                      l4587 2704  
                                    l4579 26CE                                      l4595 2F20  
                                    l4771 1772                                      l4763 1736  
                                    l4755 170E                                      l4691 141C  
                                    l4667 12E8                                      l4757 171C  
                                    l4693 1422                                      l4677 1358  
                                    l4765 1744                                      l4837 2C10  
                                    l4791 1800                                      l4783 17BE  
                                    l4687 13B6                                      l4797 1896  
                                    l4789 17F0                                      l4799 18AC  
                                    STR_1 107A                                      STR_2 1077  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4111 29A8  
                                    u2531 2726                                      u2551 2752  
                                    u4091 2980                                      u4351 25E8  
                                    u4370 2632                                      u4375 2628  
                                    u4640 158E                                      u4480 1196  
                                    u4485 118A                                      u3881 1FC0  
                                    u3891 1FDE                                      _TMR2 000FBC  
                                    _TMR4 000F53                                      _WPUB 000F61  
                           _EUSART1_Write 3356                                      _main 2BA2  
                            ___ftpack@arg 0014                              ___ftpack@exp 0017  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 004B  
                           __CFG_BORV$190 000000                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00AE  
                           __CFG_IESO$OFF 000000                              _sprintf$2475 0089  
              ??_TMR4_SetInterruptHandler 0016                              ___ftmul@cntr 0035  
                            ___param_bank 000000                              ___ftmul@sign 0036  
                            ___fttol@exp1 0075                              ___fttol@lval 0071  
                              _i2c1_state 0048                           ??_KeyPadAcquire 0019  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 3356  
                                   ?_main 0001                           __end_of___awdiv 2D32  
                       __end_of_I2C1_Stop 3086                                     _EEADR 000FA9  
                         __end_of___ftadd 2212                           __end_of___awmod 2EA8  
                         __end_of___ftneg 3210                           __end_of___lldiv 2E38  
                         __end_of___ftmul 2A64                           ___awdiv@divisor 001C  
                         __end_of___llmod 2F0E                           __end_of___ftsub 3004  
                         __end_of___fttol 2716                                     _T2CON 000FBA  
                                   _T4CON 000F51                            __CFG_DEBUG$OFF 000000  
                                   i2l131 22A2                                     i2l140 22EC  
                                   i2l133 22AA                                     i2l150 2368  
                                   i2l134 22B2                                     i2l144 2354  
                                   i2l128 2248                                     i2l162 23EE  
                                   i2l154 2394                                     i2l139 22DE  
                                   i2l157 23AE                                     i2l158 23BE  
                                   i2l407 0072                           ___awdiv@counter 001E  
                                   _PORTB 000F81                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                                   _Delay 3124              __end_of_I2C1_BusCollisionISR 33A2  
                           __CFG_WRT0$OFF 000000                           _TMR4_Initialize 3152  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0024  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 0014  
                         __end_of_lcd_cmd 327C                           __end_of_lcd_lat 3348  
                         __end_of_lcd_dwr 3258                           __end_of_lcd_msg 3234  
                        __end_of_TMR2_ISR 31EC                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                          __end_of_TMR4_ISR 31C6  
                           __CFG_WRTD$OFF 000000                             ?_CursorGOTOxy 0017  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers 1029  
                                   _scale 18DA                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 0018                            ?_EUSART1_Write 0001  
                              _KeyPadInit 3382                                _KeyPadScan 2450  
                                   pclath 000FFA                                     tablat 000FF5  
                                   status 000FD8                           __end_of_sprintf 18DA  
                          __CFG_HFOFST$ON 000000                           _TMR2_StartTimer 3392  
                              _KeyPressed 00C0                           __initialization 3086  
                         ??_lcd_msg_float 0037                __end_of_EUSART1_Initialize 3322  
                            __end_of_main 2C28                            KeyPadScan@Push 0044  
                 __end_of_PWM4_Initialize 32DE                   __end_of_TMR2_Initialize 32C0  
             ?_INTERRUPT_InterruptManager 0001                               _i2c1_object 0037  
                _TMR2_SetInterruptHandler 3378                                    ??_main 0037  
                           ___fttol@sign1 0070                ?_DisplayONCursorONToggleON 0001  
                           __activetblptr 000003                      __size_of__tdiv_to_l_ 0132  
                                  ?_Delay 0014                            ??_CursorGOTOxy 001B  
                        ___llmod@dividend 0021                                    ?_scale 0060  
                                  _EEADRH 000FAA                                    _EEDATA 000FA8  
                                  _CCPR4H 000F59                                    _CCPR4L 000F58  
                                  _EECON2 000FA7                          ___awdiv@dividend 001A  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 2B12  
                        __end_of___lltoft 2F6A                                    i2l4001 2362  
                                  i2l4031 23C6                                    i2l4009 2378  
                                  i2l4051 2400                                    i2l4035 23CE  
                                  i2l4019 239C                            __CFG_WDTEN$OFF 000000  
                                  i2l4047 23F4                                    i2l4049 23F8  
                                  i2l4057 240A                                    i2l3545 32F0  
                                  i2l3537 3080                                    i2l4185 0066  
                                  i2l4177 005A                                    i2l4169 004E  
                                  i2l3961 22C0                                    i2l3981 231A  
                                  i2l3949 2292                                    i2l3967 22D8  
                                  _TABLAT 000FF5                                    _RCREG1 000FAE  
                                  _RCSTA1 000FAB                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                           _TMR4_StartTimer 338C  
                          __CFG_XINST$OFF 000000                          __end_of__powers_ 1050  
                            _CCPTMRS1bits 000F48                          __end_of_lcd_init 2DB6  
                          _p_i2c1_current 0040                                    ___ftge 2B12  
                                  ___wmul 317A                                 ??___awdiv 001E  
                               ??___ftadd 0070                            __CFG_STVREN$ON 000000  
                               ??___awmod 0018                                 ??___ftneg 0017  
                               ??___lldiv 001C                                 ??___ftmul 002E  
                               ??___llmod 0029                                 ??___ftsub 0037  
                               ??___fttol 006B                   __end_of_TMR4_Initialize 317A  
                                  _fround 1D38                                 ?_I2C1_ISR 0001  
                                  clear_0 30A4                                    clear_1 30B0  
                        ___awdiv@quotient 0020                           ___awmod@divisor 0016  
                         ___awmod@counter 0018                                 ??_lcd_cmd 0016  
                               ??_lcd_lat 0016                                 ??_lcd_dwr 0016  
                               ??_lcd_msg 0019                     ___ftmul@f3_as_product 0032  
       __end_of_DisplayONCursorONToggleON 3336      __end_of_TMR4_DefaultInterruptHandler 339E  
   __size_of_TMR4_DefaultInterruptHandler 0002              _TMR4_DefaultInterruptHandler 339C  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                         ??_EUSART1_Write 0014                   __end_of_TMR2_StartTimer 3396  
TMR4_SetInterruptHandler@InterruptHandler 0014  TMR2_SetInterruptHandler@InterruptHandler 0014  
                               ??_sprintf 0083             __size_of_INTERRUPT_Initialize 0004  
                             ?_KeyPadInit 0001                               ?_KeyPadScan 0001  
                       _SYSTEM_Initialize 327C                                __accesstop 0060  
                 __end_of__initialization 30B6                           __CFG_PBADEN$OFF 000000  
                              ___ftadd@f1 006A                                ___ftadd@f2 006D  
                              ___ftge@ff1 0014                                ___ftge@ff2 0017  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                              ___ftneg@f1 0014                            _i2c1_trb_count 0047  
                           __end_of_Delay 3152                                ___ftmul@f1 0028  
                              ___ftmul@f2 002B                     _I2C1_FunctionComplete 32DE  
                    _I2C1_BusCollisionISR 33A0                                ___ftsub@f1 0076  
                              ___ftsub@f2 0079                                ___fttol@f1 0067  
                          __pcstackCOMRAM 0001                              __pidataBANK0 339A  
                     ??_SYSTEM_Initialize 0016                                 ?_TMR2_ISR 0001  
                              ___lltoft@c 001C                                 ?_TMR4_ISR 0001  
                           __end_of_scale 1D38                                ??_I2C1_ISR 0004  
                        ?_TMR2_Initialize 0001                          ?_PWM4_Initialize 0001  
                        lcd_msg_float@aux 00A3                          lcd_msg_float@msg 00A0  
                              __div_to_l_ 2848                                   ??_Delay 0016  
           ?_TMR4_DefaultInterruptHandler 0001                           __div_to_l_@exp1 001F  
                         __div_to_l_@cntr 001E                   __end_of_TMR4_StartTimer 3392  
                                 ??_scale 0037                 __end_of_SYSTEM_Initialize 329E  
                         __div_to_l_@quot 001A                                __pbssBANK0 00A8  
                         __CFG_PLLCFG$OFF 000000                     _TMR4_InterruptHandler 00BC  
                           __div_to_l_@f1 0014                             __div_to_l_@f2 0017  
                   ?_I2C1_BusCollisionISR 0001                        __CFG_CCP2MX$PORTC1 000000  
                    __end_of_CursorGOTOxy 2CAE                                   ?___ftge 0014  
                                 ?___wmul 0022                                ??_TMR2_ISR 0001  
                              ??_TMR4_ISR 0001                        __CFG_CCP3MX$PORTE0 000000  
                         _I2C1_Initialize 30F6                                   _CCP4CON 000F57  
                                 ?_fround 0060                          ?_TMR4_Initialize 0001  
                               ?___ftpack 0014                       __size_of_KeyPadInit 000A  
                     __size_of_KeyPadScan 0182                                 ?___lltoft 001C  
                 __size_of_TMR4_Interrupt 000C                                _lcd_cmd_hf 32F6  
                                 _OSCCON2 000FD2                                 _I2C1_Stop 3048  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _SSP1ADD 000FC8  
                                 _SSP1BUF 000FC9                          ?_TMR2_StartTimer 0001  
                               ?_lcd_init 0001                           __CFG_PWRTEN$OFF 000000  
                  ?_I2C1_FunctionComplete 0001                         __end_of__npowers_ 1077  
                                 __Hparam 0000                                _scale$2474 0063  
                                 __Lparam 0000                ??_TMR2_SetInterruptHandler 0016  
                      _p_i2c1_trb_current 0042                           __size_of___ftge 0090  
                                 ___awdiv 2CAE                                   ___ftadd 1FAA  
                                 ___awmod 2E38                                   ___ftneg 31EC  
                                 ___lldiv 2DB6                           __size_of___wmul 0026  
                                 ___ftmul 2970                                   ___llmod 2EA8  
                                 ___ftsub 2FB8                                   ___fttol 25D2  
                            __psmallconst 1000                                   __pcinit 3086  
                              ??___ftpack 0019                           __size_of_fround 0272  
                                 __ramtop 1000                                ??___lltoft 0020  
                                 __ptext0 2BA2                                   __ptext1 30C0  
                                 __ptext2 107E                                   __ptext3 18DA  
                                 __ptext4 1D38                                   __ptext5 317A  
                                 __ptext6 2970                                   __ptext7 2E38  
                                 __ptext8 2CAE                                   __ptext9 2716  
                   __end_of_KeyPadAcquire 3048                                   _lcd_cmd 3258  
                                 _lcd_lat 3336                                   _lcd_dwr 3234  
                                 _lcd_msg 3210               ??_DisplayONCursorONToggleON 0017  
                             ?__div_to_l_ 0014                                   _dpowers 1001  
                   _OSCILLATOR_Initialize 3348                                 _T2CONbits 000FBA  
                        ___awmod@dividend 0014                                 _T4CONbits 000F51  
                      _EUSART1_Initialize 330C                  ??_PIN_MANAGER_Initialize 0014  
       __size_of_TMR4_SetInterruptHandler 000A                 ?_TMR4_SetInterruptHandler 0014  
                              ?_I2C1_Stop 0001                __size_of_SYSTEM_Initialize 0022  
                                 _sprintf 107E                      I2C1_ISR@pi2c_buf_ptr 003E  
                              ??_lcd_init 0017                          ?_TMR4_StartTimer 0001  
                    end_of_initialization 30B6            ??_TMR4_DefaultInterruptHandler 0001  
                     ?_EUSART1_Initialize 0001                    ??_I2C1_BusCollisionISR 0001  
                 __end_of_I2C1_Initialize 3124                           ___lldiv@divisor 0018  
                         ___lldiv@counter 0020                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __end_of_lcd_msg_float 30F6                            __tdiv_to_l_@f1 0014  
                          __tdiv_to_l_@f2 0017                      ??_EUSART1_Initialize 0014  
                           ??__tdiv_to_l_ 001A                                 _PORTAbits 000F80  
                               _PORTBbits 000F81                         __size_of_I2C1_ISR 023E  
                             ?_lcd_cmd_hf 0001                       EUSART1_Write@txData 0014  
       I2C1_ISR@i2c_10bit_address_restart 0045                              ??_KeyPadInit 0014  
                            ??_KeyPadScan 0016                 _DisplayONCursorONToggleON 3322  
                   __size_of_CursorGOTOxy 0086                       __size_of__div_to_l_ 0128  
                             ___ftmul@exp 0031              __end_of_INTERRUPT_Initialize 339A  
    __end_of_TMR2_DefaultInterruptHandler 33A0     __size_of_TMR2_DefaultInterruptHandler 0002  
            _TMR2_DefaultInterruptHandler 339E                            __end_of___ftge 2BA2  
                          __end_of___wmul 31A0                   I2C1_MasterWrite@trBlock 00B0  
                I2C1_Stop@completion_code 0003                         __size_of_TMR2_ISR 0026  
                       __size_of_TMR4_ISR 0026                             CursorGOTOxy@i 0020  
                           CursorGOTOxy@x 0017                             CursorGOTOxy@y 0019  
                     KeyPadScan@KeyPadKey 0016                    ?_OSCILLATOR_Initialize 0001  
                      __end_of_KeyPadInit 338C                            __end_of_fround 1FAA  
                      __end_of_KeyPadScan 25D2                            _TMR4_Interrupt 3362  
                     start_initialization 3086                               ??_I2C1_Stop 0001  
         __size_of_PIN_MANAGER_Initialize 004E                       __end_of__tdiv_to_l_ 2848  
                            _CursorGOTOxy 2C28                     __end_of_EUSART1_Write 3362  
                         ___llmod@divisor 0025                           ___llmod@counter 0029  
                        ?_I2C1_Initialize 0001                       __size_of_lcd_cmd_hf 0016  
                                ??___ftge 001A                                  ??___wmul 0026  
                             __pdataBANK0 00C0                                  ??_fround 0037  
           ?_TMR2_DefaultInterruptHandler 0001                    __end_of_TMR4_Interrupt 336E  
                           sprintf@tmpval 0098                                fround@prec 0069  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0037                             __pcstackBANK0 0060  
                __size_of_PWM4_Initialize 001E                  __size_of_TMR2_Initialize 0022  
                           _i2c1_tr_queue 00B6                   KeyPadAcquire@KeyAcquire 0019  
                 ??_I2C1_FunctionComplete 0001                         __size_of_lcd_init 0084  
                             sprintf@flag 008E                               sprintf@fval 009C  
                             sprintf@prec 0090                                 __pnvBANK0 00BC  
                  _PIN_MANAGER_Initialize 2F6A                                 __pintcode 0008  
        __end_of_TMR4_SetInterruptHandler 3378                                  ?___awdiv 001A  
                                ?___ftadd 006A                                  ?___awmod 0014  
                                ?___ftneg 0014                                  ?___lldiv 0014  
                                ?___ftmul 0028                                  ?___llmod 0021  
                                ?___ftsub 0076                                 __npowers_ 1050  
                                ?___fttol 0067                                  _I2C1_ISR 2212  
                         ?_TMR4_Interrupt 0001              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                               __tdiv_to_l_ 2716  
                                ?_lcd_cmd 0001                                  ?_lcd_lat 0001  
                                ?_lcd_dwr 0001                                  ?_lcd_msg 0017  
                            ??__div_to_l_ 001A                               __smallconst 1000  
                                _BAUDCON1 000FB8                            __size_of_Delay 002E  
                __size_of_TMR4_Initialize 0028                                  ?_sprintf 007C  
                          __size_of_scale 045E                      _INTERRUPT_Initialize 3396  
                  I2C1_MasterRead@trBlock 00AA                            ___wmul@product 0026  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATDbits 000F8C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                                  _PIE5bits 000F7D  
                __size_of_TMR2_StartTimer 0004       __size_of_INTERRUPT_InterruptManager 00A6  
                                _PIR1bits 000F9E                        __end_of__div_to_l_ 2970  
                                i2u353_48 31D8                                  _PIR2bits 000FA1  
                                i2u355_48 31B2                                  _PIR5bits 000F7E  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _SSP1CON1 000FC6                                  _SSP1CON3 000FCB  
                                _TMR2_ISR 31C6        __size_of_DisplayONCursorONToggleON 0014  
                                _TMR4_ISR 31A0                                  _SSP1STAT 000FC7  
                       ___wmul@multiplier 0022                              ??_lcd_cmd_hf 0016  
          ??_TMR2_DefaultInterruptHandler 0001         __size_of_TMR2_SetInterruptHandler 000A  
               ?_TMR2_SetInterruptHandler 0014                               _INTCON2bits 000FF1  
                   ?_INTERRUPT_Initialize 0001                         ??_TMR2_Initialize 0016  
                       ??_PWM4_Initialize 0014                                _EECON1bits 000FA6  
                  __size_of_KeyPadAcquire 0044                  __size_of_TMR4_StartTimer 0006  
                                __Hrparam 0000             __size_of_I2C1_BusCollisionISR 0002  
                                __Lrparam 0000                        __end_of_lcd_cmd_hf 330C  
                      __CFG_BOREN$SBORDIS 000000                    I2C1_ISR@i2c_bytes_left 0046  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0014  
                        __size_of___awdiv 0084                          __size_of___ftadd 0268  
                        __size_of___awmod 0070                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                          __size_of___ftmul 00F4  
                        __size_of___llmod 0066                          __size_of___ftsub 004C  
                        __size_of___fttol 0144               __size_of_EUSART1_Initialize 0016  
                                ___ftpack 2A64                               _fround$2472 0066  
                             _fround$2473 0063                                  ___lltoft 2F0E  
                _TMR4_SetInterruptHandler 336E                          __size_of_lcd_cmd 0024  
                        __size_of_lcd_lat 0012                          __size_of_lcd_dwr 0024  
                        __size_of_lcd_msg 0024                                sprintf@exp 0096  
                              sprintf@val 0092                       I2C1_ISR@i2c_address 0049  
                                __ptext10 2848                                  __ptext11 2F0E  
                                __ptext20 3210                                  __ptext12 2EA8  
                                __ptext21 3234                                  __ptext13 2DB6  
                                __ptext30 3378                                  __ptext22 2D32  
                                __ptext14 25D2                                  __ptext31 32C0  
                                __ptext23 32F6                                  __ptext15 2FB8  
                                __ptext40 3356                                  __ptext32 2F6A  
                                __ptext24 327C                                  __ptext16 1FAA  
                                __ptext41 3322                                  __ptext33 3348  
                                __ptext25 3152                                  __ptext17 2A64  
                                __ptext50 31C6                                  __ptext42 2C28  
                                __ptext34 3396                                  __ptext26 338C  
                                __ptext18 31EC                                  __ptext51 339E  
                                __ptext43 3258                                  __ptext35 30F6  
                                __ptext27 336E                                  __ptext19 2B12  
                                __ptext52 2212                                  __ptext44 3336  
                                __ptext36 330C                                  __ptext28 329E  
                                __ptext53 3048                                  __ptext45 3124  
                                __ptext37 3382                                  __ptext29 3392  
                                __ptext54 32DE                                  __ptext38 3004  
                                __ptext55 33A0                                  __ptext47 31A0  
                                __ptext39 2450                                  __ptext56 0000  
                                __ptext48 339C                                  __ptext49 3362  
                            _SSP1CON1bits 000FC6                              _SSP1CON2bits 000FC5  
                                __powers_ 1029                                  _lcd_init 2D32  
                        __size_of_sprintf 085C                    __size_of_lcd_msg_float 0036  
                       ??_TMR4_Initialize 0016                             __size_of_main 0086  
                                int$flags 004B                                  lcd_cmd@x 0016  
                       ??_TMR2_StartTimer 0014                                  lcd_dwr@x 0016  
      __end_of_INTERRUPT_InterruptManager 00AE                _INTERRUPT_InterruptManager 0008  
                                lcd_msg@c 0017                             _KeyPadAcquire 3004  
                              _INTCONbits 000FF2                    ??_INTERRUPT_Initialize 0014  
                                scale@scl 0066                                  intlevel2 0000  
                               sprintf@ap 008C                          __tdiv_to_l_@exp1 0022  
                        __tdiv_to_l_@cntr 0021                                 sprintf@sp 007C  
                        __tdiv_to_l_@quot 001D                          ___lldiv@dividend 0014  
                 ?_PIN_MANAGER_Initialize 0001            __size_of_I2C1_FunctionComplete 0018  
                              _RCSTA1bits 000FAB             __end_of_I2C1_FunctionComplete 32F6  
                        ??_TMR4_Interrupt 0001                             _lcd_msg_float 30C0  
                       ??_TMR4_StartTimer 0014                               _TMR4_Ticked 00A8  
                __size_of_I2C1_Initialize 002E                    __size_of_EUSART1_Write 000C  
                            ?__tdiv_to_l_ 0014                            ?_KeyPadAcquire 0017  
                                sprintf@c 009F                                  sprintf@f 007E  
                        ___lldiv@quotient 001C                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 2FB8                        __size_of_I2C1_Stop 003E  
                       __CFG_FOSC$INTIO67 000000                     _TMR2_InterruptHandler 00BE  
